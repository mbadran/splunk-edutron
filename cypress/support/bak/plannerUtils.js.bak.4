/**
 * Cypress Utilities for Planner Tests
 */

// Essential constants only
const PLANNER_CONSTANTS = {
  SELECTION_WAIT: 250,
  CALCULATOR_WAIT: 1000,
  TEAM_ACTION_WAIT: 500,
  FIRST_TEAM_MEMBER_COLUMN: 10,
  PRICE_COLUMN: 5,
  MAX_TEAM_MEMBERS: 20,
};

// Extract price from table row - SIMPLIFIED: One return path, proper chaining
const extractPriceFromRow = (rowIndex) => {
  return cy
    .get(`#table-row-${rowIndex}`)
    .find(`[aria-colindex="${PLANNER_CONSTANTS.PRICE_COLUMN}"]`)
    .invoke("text")
    .then((priceText) => {
      const cleanText = priceText.trim();

      // Handle "Free" case
      if (cleanText === "Free" || cleanText === "") {
        return cy.then(() => 0); // Chain properly with cy.then()
      }

      // Handle numeric case
      const numericPrice = parseFloat(cleanText.replace(/[^0-9.]/g, ""));
      const finalPrice = isNaN(numericPrice) ? 0 : numericPrice;
      return cy.then(() => finalPrice); // Chain properly with cy.then()
    });
};

// Select course for team member
const selectCourseForMember = (
  rowIndex,
  memberColumnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN,
) => {
  cy.get(`#table-row-${rowIndex}`).within(() => {
    cy.get(`[aria-colindex="${memberColumnIndex}"]`).within(() => {
      cy.get('[role="button"]').click();
    });
  });
  cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
};

// Verify selection state
const verifySelectionState = (
  rowIndex,
  shouldBeSelected,
  memberColumnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN,
) => {
  cy.get(`#table-row-${rowIndex}`).within(() => {
    cy.get(`[aria-colindex="${memberColumnIndex}"]`).within(() => {
      if (shouldBeSelected) {
        cy.get(".bg-emerald-400, .plan-cell-selected").should("exist");
      } else {
        cy.get(".border-gray-300, .plan-cell-unselected").should("exist");
      }
    });
  });
};

// Wait for planner ready
const waitForPlannerReady = () => {
  cy.title().should("contain", "Planner");

  cy.get("#planner").should("be.visible");
  cy.get("#monotable").should("be.visible");
  cy.get("#calculator").should("be.visible");

  cy.get("body").then(($body) => {
    if ($body.find("#table-loading-state").length > 0) {
      cy.get("#table-loading-state").should("not.be.visible");
    }
  });
};

// Verify calculator total
const verifyCalculatorTotal = (expectedTotal) => {
  cy.get("#calculator").within(() => {
    cy.get("#total-value").should("contain", expectedTotal.toString());
  });
};

// TEAM MEMBER UTILITIES

// Add team member via UserPlus button - FULLY FIXED: No mixing
const addTeamMember = () => {
  return cy.log("🔍 Attempting to add team member...").then(() => {
    // First verify the button exists and is clickable
    return cy.get("#plan-actions").should("be.visible");
  }).then(() => {
    return cy.get("#plan-actions").within(() => {
      cy.get('button[title="Add Team Member"]').should("be.visible");
      cy.get('button[title="Add Team Member"]').should("not.be.disabled");
      
      return cy.log("📱 Clicking Add Team Member button").then(() => {
        cy.get('button[title="Add Team Member"]').click();
      });
    });
  }).then(() => {
    cy.wait(PLANNER_CONSTANTS.TEAM_ACTION_WAIT);
    return cy.log("⏱️ Waited for team action to complete");
  });
};

// Remove team member via Trash2 button with confirmation handling
const removeTeamMember = (memberName) => {
  // Find the team member in the table header and click delete button
  cy.get('#monotable').within(() => {
    cy.contains(memberName).parent().within(() => {
      cy.get('button[aria-label*="Remove"], button[title*="Remove"]').click();
    });
  });
  
  // Handle confirmation modal
  cy.get('[role="dialog"]').should("be.visible");
  cy.get('[role="dialog"]').within(() => {
    cy.contains("button", "Confirm").click();
  });
  
  cy.wait(PLANNER_CONSTANTS.TEAM_ACTION_WAIT);
};

// Update team member name via click-to-edit
const updateTeamMemberName = (currentName, newName) => {
  // Find and click the team member name to edit
  cy.get('#monotable').within(() => {
    cy.contains(currentName).click();
  });
  
  // Handle the prompt dialog (Note: Cypress can't handle native prompts directly)
  cy.window().then((win) => {
    cy.stub(win, 'prompt').returns(newName);
  });
  
  cy.wait(PLANNER_CONSTANTS.TEAM_ACTION_WAIT);
};

// Get current team member count - BETTER APPROACH: Debug and count more reliably
const getTeamMemberCount = () => {
  return cy.get('#monotable').then(($table) => {
    const tableText = $table.text();
    
    // Debug: Log what we're actually seeing in the table
    return cy.log(`🔍 Analyzing table content (first 300 chars): ${tableText.substring(0, 300)}...`).then(() => {
      
      // Method 1: Count known team member names
      let count = 0;
      const teamMemberPatterns = [
        "Richard Hendricks",
        "Team Member 2",
        "Team Member 3", 
        "Team Member 4",
        "Team Member 5",
        "Team Member 6",
        "Team Member 7",
        "Team Member 8",
        "Team Member 9",
        "Team Member 10"
      ];
      
      teamMemberPatterns.forEach(pattern => {
        if (tableText.includes(pattern)) {
          count++;
          return cy.log(`✅ Found: ${pattern}`);
        }
      });
      
      // Method 2: Try counting by looking for team member column headers
      // BaseTable2 might have team member names in specific locations
      const headerElements = $table.find('[role="columnheader"], .team-member-header, .header');
      let headerCount = 0;
      headerElements.each((index, el) => {
        const elementText = Cypress.$(el).text();
        teamMemberPatterns.forEach(pattern => {
          if (elementText.includes(pattern)) {
            headerCount++;
          }
        });
      });
      
      return cy.log(`📊 Method 1 (text search): ${count} members`).then(() => {
        return cy.log(`📊 Method 2 (header search): ${headerCount} members`).then(() => {
          // Use the higher count as it's more likely to be accurate
          const finalCount = Math.max(count, headerCount, 1); // At least 1 (Richard)
          return cy.log(`📊 Final team member count: ${finalCount}`).then(() => finalCount);
        });
      });
    });
  });
};

// Verify team member exists in table
const verifyTeamMemberExists = (memberName) => {
  cy.get('#monotable').should("contain", memberName);
};

// Verify team member does not exist in table
const verifyTeamMemberNotExists = (memberName) => {
  cy.get('#monotable').should("not.contain", memberName);
};

// Get team member column index by name - FULLY FIXED: Consistent pattern
const getTeamMemberColumnIndex = (memberName) => {
  // Calculate column index based on member order (all synchronous logic)
  if (memberName === "Richard Hendricks") {
    return cy.then(() => PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
  }
  
  // Extract number from "Team Member X" pattern
  const match = memberName.match(/Team Member (\d+)/);
  if (match) {
    const memberNumber = parseInt(match[1]);
    const columnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + memberNumber - 1;
    return cy.then(() => columnIndex);
  }
  
  // Fallback to first team member column
  return cy.then(() => PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
};

// Export only what we need
export {
  PLANNER_CONSTANTS,
  extractPriceFromRow,
  selectCourseForMember,
  verifySelectionState,
  waitForPlannerReady,
  verifyCalculatorTotal,
  // Team member utilities
  addTeamMember,
  removeTeamMember,
  updateTeamMemberName,
  getTeamMemberCount,
  verifyTeamMemberExists,
  verifyTeamMemberNotExists,
  getTeamMemberColumnIndex,
};