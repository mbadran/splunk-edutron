// ***********************************************************
// This example support/e2e.ts is processed and
// loaded automatically before your test files.
//
// This is a great place to put global configuration and
// behavior that modifies Cypress.
//
// You can change the location of this file or turn off
// automatically serving support files with the
// 'supportFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/configuration
// ***********************************************************

// Import commands.js using ES2015 syntax:
import './commands'

// Alternatively you can use CommonJS syntax:
// require('./commands')

// Hide fetch/XHR requests from the Cypress command log for cleaner output
// You can remove this if you want to see all network requests
const app = window.top;
if (!app.document.head.querySelector('[data-hide-command-log-request]')) {
  const style = app.document.createElement('style');
  style.innerHTML = '.command-name-request, .command-name-xhr { display: none }';
  style.setAttribute('data-hide-command-log-request', '');
  app.document.head.appendChild(style);
}

// Global configuration
Cypress.on('uncaught:exception', (err, runnable) => {
  // Returning false here prevents Cypress from failing the test on uncaught exceptions
  // You might want to be more specific about which errors to ignore
  if (err.message.includes('ResizeObserver loop limit exceeded')) {
    return false;
  }
  
  // Let other errors fail the test
  return true;
});

// Add custom assertions for your app
declare global {
  namespace Cypress {
    interface Chainable {
      /**
       * Wait for the app to be ready (catalogs loaded, etc.)
       */
      waitForAppReady(): Chainable<void>
      
      /**
       * Wait for catalogs to be loaded from CSV
       */
      waitForCatalogsLoaded(): Chainable<void>
      
      /**
       * Wait for planner to be ready (moved from utils)
       */
      waitForPlannerReady(): Chainable<void>
      
      /**
       * Navigate to planner and wait for it to be ready (consolidated)
       */
      visitPlannerAndWait(): Chainable<void>
      
      /**
       * Navigate to home page and wait for it to be ready
       */
      visitHomeAndWait(): Chainable<void>
      
      // TEAM MEMBER COMMANDS
      /**
       * Add team member via UserPlus button
       */
      addTeamMember(): Chainable<void>
      
      /**
       * Remove team member with confirmation
       */
      removeTeamMember(memberName: string): Chainable<void>
      
      // SELECTION COMMANDS
      /**
       * Select course for team member
       */
      selectCourseForMember(rowIndex: number, memberColumnIndex?: number): Chainable<void>
      
      // VERIFICATION COMMANDS
      /**
       * Verify team member exists
       */
      verifyTeamMemberExists(memberName: string): Chainable<void>
      
      /**
       * Verify team member does not exist
       */
      verifyTeamMemberNotExists(memberName: string): Chainable<void>
      
      /**
       * Verify calculator total
       */
      verifyCalculatorTotal(expectedTotal: number): Chainable<void>
      
      /**
       * Verify selection state
       */
      verifySelectionState(rowIndex: number, shouldBeSelected: boolean, memberColumnIndex?: number): Chainable<void>
    }
  }
}