/**
 * Cypress Utilities for Planner Tests - Pure Logic Functions Only
 * 
 * NOTE: Most planner actions are now commands (cy.*) for reusability.
 * This file contains only pure logic utilities and data extraction.
 */

// Essential constants only
const PLANNER_CONSTANTS = {
  SELECTION_WAIT: 250,
  CALCULATOR_WAIT: 1000,
  TEAM_ACTION_WAIT: 500,
  FIRST_TEAM_MEMBER_COLUMN: 10,
  PRICE_COLUMN: 5,
  MAX_TEAM_MEMBERS: 20,
};

// PURE LOGIC UTILITIES (keep in utils)

// Extract price from table row - data extraction utility
const extractPriceFromRow = (rowIndex) => {
  return cy
    .get(`#table-row-${rowIndex}`)
    .find(`[aria-colindex="${PLANNER_CONSTANTS.PRICE_COLUMN}"]`)
    .invoke("text")
    .then((priceText) => {
      const cleanText = priceText.trim();

      // Handle "Free" case
      if (cleanText === "Free" || cleanText === "") {
        return cy.then(() => 0);
      }

      // Handle numeric case
      const numericPrice = parseFloat(cleanText.replace(/[^0-9.]/g, ""));
      const finalPrice = isNaN(numericPrice) ? 0 : numericPrice;
      return cy.then(() => finalPrice);
    });
};

// Get current team member count - complex logic utility
const getTeamMemberCount = () => {
  return cy.get('#monotable').then(() => {
    
    return cy.log('🔍 Counting team members using team-member-header class').then(() => {
      
      // PRIMARY METHOD: Count team-member-header elements
      return cy.get('.team-member-header').then(($headers) => {
        const headerCount = $headers.length;
        
        if (headerCount > 0) {
          // Success! We found team member headers
          return cy.log(`📊 Found ${headerCount} team-member-header elements`).then(() => headerCount);
        } else {
          // Fallback: team-member-header class not implemented yet
          return cy.log('⚠️ No team-member-header elements found, using fallback methods').then(() => {
            
            // FALLBACK 1: Count selection columns in first data row
            return cy.get('[id^="table-row-1"]').first().then(($row) => {
              if ($row.length > 0) {
                const selectionButtons = $row.find('[role="button"], .plan-cell-selected, .plan-cell-unselected');
                const selectionCount = selectionButtons.length;
                
                if (selectionCount > 0) {
                  return cy.log(`📊 Fallback: Found ${selectionCount} selection columns`).then(() => selectionCount);
                }
              }
              
              // FALLBACK 2: Count by name matching (least reliable)
              return cy.get('#monotable').then(($table) => {
                const tableText = $table.text();
                let nameCount = 0;
                if (tableText.includes("Richard Hendricks")) nameCount++;
                for (let i = 2; i <= 10; i++) {
                  if (tableText.includes(`Team Member ${i}`)) nameCount++;
                }
                
                const finalCount = Math.max(nameCount, 1); // Minimum 1
                return cy.log(`📊 Final fallback: Name-based count = ${finalCount}`).then(() => finalCount);
              });
            });
          });
        }
      });
    });
  });
};

// Get team member column index by name - calculation utility
const getTeamMemberColumnIndex = (memberName) => {
  // Calculate column index based on member order (all synchronous logic)
  if (memberName === "Richard Hendricks") {
    return cy.then(() => PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
  }
  
  // Extract number from "Team Member X" pattern
  const match = memberName.match(/Team Member (\d+)/);
  if (match) {
    const memberNumber = parseInt(match[1]);
    const columnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + memberNumber - 1;
    return cy.then(() => columnIndex);
  }
  
  // Fallback to first team member column
  return cy.then(() => PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
};

// Export only pure logic utilities (actions are now commands)
export {
  PLANNER_CONSTANTS,
  extractPriceFromRow,
  getTeamMemberCount,
  getTeamMemberColumnIndex,
};