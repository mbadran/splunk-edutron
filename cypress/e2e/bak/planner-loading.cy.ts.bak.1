/**
 * Planner Loading Tests
 */

const initialTeamMember = "Richard Hendricks" as string;

describe("Planner - Loading", () => {
  beforeEach(() => {
    // Start each test with a fresh planner page
    cy.visit("/planner");
    cy.wait(2000); // Give it time to load
  });

  it("loads the planner page successfully", () => {
    // Test 1: Basic page elements are present
    cy.get("#planner").should("be.visible");

    // Check that the page title is correct
    cy.title().should("contain", "Planner");

    // Take a screenshot for visual verification
    // cy.screenshot("planner-loaded");
  });

  it("shows the header", () => {
    // Check header container exists
    cy.get("#app-header").should("be.visible");

    // Check burger menu exists
    cy.get("#header-menu").should("be.visible");
    cy.get("#header-menu button").should("contain.html", "svg"); // Menu icon

    // Check Splunk EDUTRON button exists
    cy.get("#header-home").should("be.visible");
    cy.get("#header-home button").should("contain", "Splunk EDUTRON");

    // Check page title exists with default value
    cy.get("#page-title-display").should("be.visible");
    cy.get("#page-title-display").should(
      "contain",
      "Pied Piper / Splunk Training Plan",
    );
  });

  it("shows monotable with catalog courses", () => {
    // Wait for the monotable container (this IS the catalog courses section)
    cy.get("#monotable").should("be.visible");

    // Wait for dynamic content to load
    // cy.wait(1000);

    // Handle loading state if present
    cy.get("body").then(($body) => {
      if ($body.find("#table-loading-state").length > 0) {
        cy.get("#table-loading-state").should("not.be.visible");
      }
    });

    // Check final state - either courses loaded or error
    cy.get("body").then(($body) => {
      if ($body.find("#table-empty-state").length > 0) {
        // Error state - catalog didn't load
        cy.get("#table-empty-state").should("contain", "No courses available");
      } else {
        // Success state - should have actual course rows
        // Look for table rows with course data (BaseTable2 generates these)
        cy.get("#monotable").within(() => {
          // Should have course rows (they get IDs like table-row-1, table-row-2, etc.)
          cy.get('[id^="table-row-"]').should("exist");
          // Should have course names (they get IDs like course-name-1, course-name-2, etc.)
          cy.get('[id^="course-name-"]').should("exist");
        });
      }
    });
  });

  it("shows monotable with initial team member", () => {
    // Wait for the monotable container
    cy.get("#monotable").should("be.visible");

    // Check if we're in loading state and wait for it to finish
    cy.get("body").then(($body) => {
      if ($body.find("#table-loading-state").length > 0) {
        cy.get("#table-loading-state").should("not.be.visible");
      }
    });

    // Now check the final state - either success or error
    cy.get("body").then(($body) => {
      if ($body.find("#table-empty-state").length > 0) {
        // Error state - catalog didn't load
        cy.get("#table-empty-state").should("contain", "No courses available");
      } else {
        // Success state - should have initial team member
        cy.contains(initialTeamMember).should("be.visible");
      }
    });
  });

  it("shows the calculator with initial values", () => {
    // Test 2: Calculator starts in the correct state
    cy.get("#calculator").should("be.visible");

    // Check that calculator shows $0 initially (or whatever your default is)
    cy.get("#calculator").within(() => {
      // Look for total cost display
      // cy.contains("Total").should("be.visible");

      // You might have specific selectors for the total amount
      // This will depend on your exact calculator implementation
      cy.get("#total-value").should("be.visible");
      cy.get("#total-value").should("contain", "0");
    });

    // cy.screenshot("calculator-initial-state");
  });
});
