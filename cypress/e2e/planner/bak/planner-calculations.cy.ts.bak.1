/**
 * Feature: Training Plan Cost Calculations
 * 
 * As a training planner
 * I want to calculate the cost of my training plan
 * So that I can budget for training realistically
 */

import {
  PLANNER_CONSTANTS,
  extractPriceFromRow,
  getTeamMemberCount,
  generateTrainingPlan,
  calculateExpectedTotal,
} from "../../support/plannerUtils";

const SCENARIO_CONFIG = {
  TEAM_COUNT: 5,
  COURSE_POOL_SIZE: 20,
  MIN_SELECTIONS_PER_MEMBER: 1,
  MAX_SELECTIONS_PER_MEMBER: 15,
  BUDGET_TEST_AMOUNT: 50000,
  EDGE_CASE_COURSES: 5,
};

describe("Feature: Training Plan Cost Calculations", () => {
  
  // Background: Setup planner for comprehensive calculation testing
  beforeEach("Background: Setup planner for calculations", () => {
    // Given I am on the planner page and it has loaded
    cy.visitPlannerAndWait();
  });

  it("Scenario: Budget setting and verification", () => {
    // Given I want to set a training budget
    cy.log(`Setting initial budget: ${SCENARIO_CONFIG.BUDGET_TEST_AMOUNT}`);
    
    // When I set the budget
    cy.setBudget(SCENARIO_CONFIG.BUDGET_TEST_AMOUNT);
    
    // Then the budget should be displayed correctly
    cy.verifyBudget(SCENARIO_CONFIG.BUDGET_TEST_AMOUNT);
    
    // And the difference should show the full budget (no costs yet)
    cy.verifyBudgetDifference(SCENARIO_CONFIG.BUDGET_TEST_AMOUNT);
    
    cy.log("✅ Budget setting and verification completed");
  });

  it("Scenario: Comprehensive multi-member cost tracking with budget monitoring", () => {
    // Given I have set a budget
    cy.setBudget(SCENARIO_CONFIG.BUDGET_TEST_AMOUNT);
    let runningTotal = 0;
    let currentBudgetDifference = SCENARIO_CONFIG.BUDGET_TEST_AMOUNT;
    
    // And I generate a realistic training plan
    const trainingPlan = generateTrainingPlan(
      SCENARIO_CONFIG.TEAM_COUNT,
      SCENARIO_CONFIG.COURSE_POOL_SIZE,
      SCENARIO_CONFIG.MIN_SELECTIONS_PER_MEMBER,
      SCENARIO_CONFIG.MAX_SELECTIONS_PER_MEMBER
    );
    
    cy.log(`Generated training plan: ${SCENARIO_CONFIG.TEAM_COUNT} members, ${trainingPlan.totalSelections} total selections`);
    
    // When I add the required team members
    for (let i = 1; i < SCENARIO_CONFIG.TEAM_COUNT; i++) {
      cy.log(`Adding team member ${i + 1} of ${SCENARIO_CONFIG.TEAM_COUNT}`);
      cy.addTeamMember();
      cy.wait(PLANNER_CONSTANTS.TEAM_ACTION_WAIT);
    }
    
    // Then I should have the expected number of team members
    getTeamMemberCount().then((finalCount) => {
      expect(finalCount).to.equal(SCENARIO_CONFIG.TEAM_COUNT);
      cy.log(`✅ Team setup complete: ${finalCount} members`);
    });
    
    // When I make course selections for each team member
    trainingPlan.memberSelections.forEach((memberSelections, memberIndex) => {
      const columnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + memberIndex;
      
      cy.log(`Member ${memberIndex + 1}: Selecting ${memberSelections.length} courses: [${memberSelections.join(', ')}]`);
      
      memberSelections.forEach((rowIndex) => {
        // Get price and update running totals
        extractPriceFromRow(rowIndex).then((price) => {
          runningTotal += price;
          currentBudgetDifference = SCENARIO_CONFIG.BUDGET_TEST_AMOUNT - runningTotal;
          
          cy.log(`Selecting course ${rowIndex} for member ${memberIndex + 1} (price: ${price}, running total: ${runningTotal})`);
          
          // Make the selection
          cy.selectCourseForMember(rowIndex, columnIndex);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
          
          // Verify calculator shows correct running total (in TUs)
          cy.verifyCalculatorTotal(runningTotal);
          
          // Verify budget difference
          cy.verifyBudgetDifference(currentBudgetDifference);
        });
      });
    });
    
    // When I test toggling to USD mode
    cy.log("Testing Credits to USD toggle...");
    cy.get("#calculator #total-value").invoke('text').then((tuTotal) => {
      const tuAmount = parseInt(tuTotal.trim());
      
      // Toggle to USD mode
      cy.toggleCreditsMode();
      cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
      
      // Verify USD amount is different
      cy.get("#calculator #total-value").invoke('text').then((usdTotal) => {
        const usdAmount = parseInt(usdTotal.trim());
        expect(usdAmount).to.not.equal(tuAmount);
        cy.log(`TUs: ${tuAmount}, USD: ${usdAmount}`);
        
        // Toggle back to TUs
        cy.toggleCreditsMode();
        cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
        
        // Verify we're back to original TU amount
        cy.verifyCalculatorTotal(tuAmount);
        cy.log("✅ Credits/USD toggle verified");
      });
    });
    
    // When I deselect all courses to verify calculator reset
    cy.log("Testing deselection behavior...");
    trainingPlan.memberSelections.forEach((memberSelections, memberIndex) => {
      const columnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + memberIndex;
      
      memberSelections.forEach((rowIndex) => {
        extractPriceFromRow(rowIndex).then((price) => {
          runningTotal -= price;
          currentBudgetDifference = SCENARIO_CONFIG.BUDGET_TEST_AMOUNT - runningTotal;
          
          // Deselect the course
          cy.selectCourseForMember(rowIndex, columnIndex);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
          
          // Verify it's unselected
          cy.verifySelectionState(rowIndex, false, columnIndex);
          
          // Verify calculator decreases
          cy.verifyCalculatorTotal(runningTotal);
          
          // Verify budget difference updates
          cy.verifyBudgetDifference(currentBudgetDifference);
        });
      });
    });
    
    // Then the calculator should return to zero
    cy.verifyCalculatorTotal(0);
    cy.verifyBudgetDifference(SCENARIO_CONFIG.BUDGET_TEST_AMOUNT);
    
    cy.log(`✅ Comprehensive calculation test completed: ${SCENARIO_CONFIG.TEAM_COUNT} members, ${trainingPlan.totalSelections} total selections tested`);
  });

  it("Scenario: Edge case pricing calculations", () => {
    // Given I want to test edge cases with different pricing
    cy.log("Testing edge cases with various course pricing scenarios");
    
    let freeCoursesFound = 0;
    let expensiveCoursesFound = 0;
    let runningTotal = 0;
    
    // When I check the first several courses for pricing patterns
    for (let i = 1; i <= SCENARIO_CONFIG.EDGE_CASE_COURSES; i++) {
      extractPriceFromRow(i).then((price) => {
        if (price === 0) {
          freeCoursesFound++;
          cy.log(`Found free course at row ${i}`);
          cy.selectCourseForMember(i, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        } else if (price > 10000) {
          expensiveCoursesFound++;
          runningTotal += price;
          cy.log(`Found expensive course at row ${i}: ${price}`);
          cy.selectCourseForMember(i, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        } else {
          runningTotal += price;
          cy.log(`Regular course at row ${i}: ${price}`);
          cy.selectCourseForMember(i, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        }
      });
    }
    
    // Then verify the calculator handles all scenarios correctly
    cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
    cy.get("#calculator #total-value").should("be.visible");
    
    cy.log(`✅ Edge case testing completed: ${freeCoursesFound} free, ${expensiveCoursesFound} expensive courses tested`);
  });
});