/**
 * Planner Team Members Tests
 */

import {
  PLANNER_CONSTANTS,
  waitForPlannerReady,
  addTeamMember,
  removeTeamMember,
  getTeamMemberCount,
  verifyTeamMemberExists,
  verifyTeamMemberNotExists,
  selectCourseForMember,
  verifySelectionState,
  verifyCalculatorTotal,
} from "../../support/plannerUtils";

const TEST_CONFIG = {
  LOAD_TIMEOUT: 2000,
  INITIAL_TEAM_MEMBER: "Richard Hendricks",
  NEW_TEAM_MEMBER_PREFIX: "Team Member ",
  MEMBERS_TO_ADD: 3,
  MEMBERS_TO_DELETE: 2,
};

describe("Planner - Team Members", () => {
  beforeEach(() => {
    cy.visit("/planner");
    cy.wait(TEST_CONFIG.LOAD_TIMEOUT);
    waitForPlannerReady();
  });

  it("shows UserPlus button is accessible and functional", () => {
    cy.get("#plan-actions").should("be.visible");
    cy.get("#plan-actions").within(() => {
      cy.get('button[title="Add Team Member"]').should("be.visible");
      cy.get('button[title="Add Team Member"]').should("not.be.disabled");
      
      cy.get('button[title="Add Team Member"]').click();
    }).then(() => {
      return cy.log("✅ Add Team Member button is clickable");
    });
  });

  it("starts with the default team member", () => {
    getTeamMemberCount().then((count) => {
      expect(count).to.equal(1);
      return cy.log(`Initial count verified: ${count}`);
    }).then(() => {
      verifyTeamMemberExists(TEST_CONFIG.INITIAL_TEAM_MEMBER);
    });
  });

  it("adds a new team member via the UserPlus button", () => {
    let initialCount;
    
    getTeamMemberCount().then((count) => {
      initialCount = count;
      expect(initialCount).to.equal(1);
      return cy.log(`Initial team member count: ${initialCount}`);
    }).then(() => {
      return addTeamMember();
    }).then(() => {
      cy.wait(2000);
      return getTeamMemberCount();
    }).then((finalCount) => {
      return cy.log(`Final team member count: ${finalCount}`).then(() => {
        expect(finalCount).to.equal(2);
        expect(finalCount).to.be.greaterThan(initialCount);
      });
    });
  });

  it("adds multiple team members and verifies count increases", () => {
    const MEMBERS_TO_ADD = TEST_CONFIG.MEMBERS_TO_ADD;
    let currentCount;
    
    getTeamMemberCount().then((count) => {
      currentCount = count;
      expect(currentCount).to.equal(1);
      return cy.log(`Starting with ${currentCount} team members`);
    }).then(() => {
      let chain = cy.wrap(null);
      
      for (let i = 0; i < MEMBERS_TO_ADD; i++) {
        chain = chain.then(() => {
          return cy.log(`Adding team member ${i + 1} of ${MEMBERS_TO_ADD}`).then(() => {
            return addTeamMember();
          }).then(() => {
            cy.wait(1000);
            return getTeamMemberCount();
          }).then((newCount) => {
            const expectedCount = currentCount + 1;
            return cy.log(`After adding member ${i + 1}: count = ${newCount}, expected = ${expectedCount}`).then(() => {
              expect(newCount).to.equal(expectedCount);
              currentCount = newCount;
            });
          });
        });
      }
      
      return chain;
    }).then(() => {
      return cy.log(`✅ Successfully added ${MEMBERS_TO_ADD} team members. Final count: ${currentCount}`);
    });
  });

  it("deletes team members and verifies count decreases", () => {
    const MEMBERS_TO_DELETE = TEST_CONFIG.MEMBERS_TO_DELETE;
    let currentCount;
    
    getTeamMemberCount().then((count) => {
      currentCount = count;
      return cy.log(`Starting with ${currentCount} team members`);
    }).then(() => {
      for (let i = 0; i < MEMBERS_TO_DELETE; i++) {
        addTeamMember();
        cy.wait(500);
      }
      cy.wait(1000);
      return getTeamMemberCount();
    }).then((countAfterAdding) => {
      currentCount = countAfterAdding;
      const expectedAfterAdding = 1 + MEMBERS_TO_DELETE;
      expect(currentCount).to.equal(expectedAfterAdding);
      return cy.log(`Added ${MEMBERS_TO_DELETE} members, count now: ${currentCount}`);
    }).then(() => {
      let chain = cy.wrap(null);
      
      for (let i = 0; i < MEMBERS_TO_DELETE; i++) {
        chain = chain.then(() => {
          const memberToDelete = `${TEST_CONFIG.NEW_TEAM_MEMBER_PREFIX}${2 + i}`;
          return cy.log(`Deleting member: ${memberToDelete}`).then(() => {
            return removeTeamMember(memberToDelete);
          }).then(() => {
            cy.wait(1000);
            return getTeamMemberCount();
          }).then((newCount) => {
            const expectedCount = currentCount - 1;
            return cy.log(`After deleting member ${i + 1}: count = ${newCount}, expected = ${expectedCount}`).then(() => {
              expect(newCount).to.equal(expectedCount);
              verifyTeamMemberNotExists(memberToDelete);
              currentCount = newCount;
            });
          });
        });
      }
      
      return chain;
    }).then(() => {
      expect(currentCount).to.equal(1);
      verifyTeamMemberExists(TEST_CONFIG.INITIAL_TEAM_MEMBER);
      return cy.log(`✅ Successfully deleted ${MEMBERS_TO_DELETE} team members. Back to initial state.`);
    });
  });

  it("makes course selections for the initial team member", () => {
    verifyCalculatorTotal(0);
    
    selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    
    verifySelectionState(1, true, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    
    cy.get("#calculator #total-value").invoke('text').then((totalText) => {
      const total = parseInt(totalText.trim());
      expect(total).to.be.greaterThan(0);
      return cy.log(`Calculator total after selection: ${total}`);
    });
  });

  it("makes selections for multiple team members when available", () => {
    addTeamMember().then(() => {
      cy.wait(1000);
      return getTeamMemberCount();
    }).then((count) => {
      if (count > 1) {
        return cy.log(`Testing with ${count} team members`).then(() => {
          selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          
          return cy.get("#calculator #total-value").invoke('text');
        }).then((firstTotal) => {
          const firstAmount = parseInt(firstTotal.trim());
          return cy.log(`First member selection total: ${firstAmount}`).then(() => {
            selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + 1);
            
            return cy.get("#calculator #total-value").invoke('text');
          });
        }).then((secondTotal) => {
          const secondAmount = parseInt(secondTotal.trim());
          return cy.log(`Both members selection total: ${secondAmount}`).then(() => {
            expect(secondAmount).to.be.greaterThan(0);
          });
        });
      } else {
        return cy.log("Only one team member available, skipping multi-member test");
      }
    });
  });

  it("verifies team member functionality is working", () => {
    verifyTeamMemberExists(TEST_CONFIG.INITIAL_TEAM_MEMBER);
    
    cy.get("#plan-actions").within(() => {
      cy.get('button[title="Add Team Member"]').should("be.visible");
      cy.get('button[title="Add Team Member"]').click();
    }).then(() => {
      cy.wait(1000);
      return getTeamMemberCount();
    }).then((count) => {
      return cy.log(`Team members after addition: ${count}`).then(() => {
        expect(count).to.be.at.least(1);
        
        selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
        verifySelectionState(1, true, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
        
        return cy.get("#calculator #total-value").invoke('text');
      });
    }).then((total) => {
      expect(parseInt(total.trim())).to.be.greaterThan(0);
      return cy.log('✅ All team member functionality verified');
    });
  });
});