/**
 * Planner Selection Tests
 *
 * Tests course selection functionality in the Planner MonoTable.
 * Covers clicking selection squares, visual feedback, and calculator updates.
 */

// Import utilities
import {
  PLANNER_CONSTANTS,
  extractPriceFromRow,
  selectCourseForMember,
  verifySelectionState,
  waitForPlannerReady,
} from "../../support/plannerUtils";

// Test configuration constants
const TEST_CONFIG = {
  LOAD_TIMEOUT: 2000,
  BASIC_SELECTION_COUNT: 3,
  CALCULATOR_TEST_COUNT: 10,
  FIRST_TEAM_MEMBER_COLUMN: 10,
};

describe("Planner - Selection", () => {
  beforeEach(() => {
    cy.visit("/planner");
    cy.wait(TEST_CONFIG.LOAD_TIMEOUT);
    waitForPlannerReady();
  });

  it("simulates the user selecting courses for the initial team member", () => {
    // Verify initial calculator state
    cy.get("#calculator #total-value").should("contain", "0");

    // Select courses and verify visual feedback
    for (let i = 1; i <= TEST_CONFIG.BASIC_SELECTION_COUNT; i++) {
      cy.get(`#table-row-${i}`).should("be.visible");

      // Verify unselected state
      verifySelectionState(i, false, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);

      // Select course
      selectCourseForMember(i, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);

      // Verify selected state
      verifySelectionState(i, true, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);
    }

    cy.log(`âœ… Successfully selected ${TEST_CONFIG.BASIC_SELECTION_COUNT} courses`);
  });

  it("verifies that the calculator adds course selection totals", () => {
    cy.log(`ðŸ“Š Testing calculator with ${TEST_CONFIG.CALCULATOR_TEST_COUNT} courses...`);
    
    // Single sequential chain: collect price, then select, then verify
    let runningTotal = 0;
    let chain = cy.wrap(null);
    
    for (let i = 1; i <= TEST_CONFIG.CALCULATOR_TEST_COUNT; i++) {
      chain = chain.then(() => {
        // Step 1: Get the price for this row
        return extractPriceFromRow(i).then((price) => {
          return cy.log(`Row ${i} Price: ${price}`).then(() => {
            // Step 2: Add to running total
            runningTotal += price;
            
            // Step 3: Select the course
            selectCourseForMember(i, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);
            cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
            
            // Step 4: Verify calculator shows correct running total
            return cy.get("#calculator #total-value")
              .invoke('text')
              .then((actualText) => {
                const actualAmount = parseInt(actualText.trim());
                
                return cy.log(`Selection ${i}: Expected ${runningTotal}, got ${actualAmount}`).then(() => {
                  expect(actualAmount).to.equal(runningTotal);
                });
              });
          });
        });
      });
    }
    
    // After all selections complete, do final verification
    chain.then(() => {
      // Verify all courses are selected
      for (let i = 1; i <= TEST_CONFIG.CALCULATOR_TEST_COUNT; i++) {
        verifySelectionState(i, true, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);
      }
      
      cy.log(`ðŸŽ‰ SUCCESS: Selected ${TEST_CONFIG.CALCULATOR_TEST_COUNT} courses, total = ${runningTotal}`);
    });
  });
});