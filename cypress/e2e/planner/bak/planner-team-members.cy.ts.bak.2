/**
 * Feature: Team Member Management in Planner
 * 
 * As a training planner
 * I want to manage team members in my training plan  
 * So that I can assign courses to different team members
 */

import {
  PLANNER_CONSTANTS,
  waitForPlannerReady,
  addTeamMember,
  removeTeamMember,
  getTeamMemberCount,
  verifyTeamMemberExists,
  verifyTeamMemberNotExists,
  selectCourseForMember,
  verifySelectionState,
  verifyCalculatorTotal,
} from "../../support/plannerUtils";

const SCENARIO_CONFIG = {
  LOAD_TIMEOUT: 2000,
  INITIAL_TEAM_MEMBER: "Richard Hendricks",
  MEMBERS_TO_ADD_MULTIPLE: 3,
  MEMBERS_TO_ADD_FOR_DELETION: 2,
  MEMBERS_TO_DELETE: 2,
};

describe("Feature: Team Member Management in Planner", () => {
  
  // Background: Common setup that runs before each scenario
  beforeEach("Background: Setup planner with default team member", () => {
    // Given I am on the planner page
    cy.visit("/planner");
    cy.wait(SCENARIO_CONFIG.LOAD_TIMEOUT);
    
    // And the planner has loaded successfully
    waitForPlannerReady();
    
    // And I start with one default team member
    getTeamMemberCount().then((count) => {
      expect(count).to.equal(1);
    });
    verifyTeamMemberExists(SCENARIO_CONFIG.INITIAL_TEAM_MEMBER);
  });

  it("Scenario: Initial state verification", () => {
    // Then I should see exactly 1 team member
    getTeamMemberCount().then((count) => {
      expect(count).to.equal(1);
      return cy.log(`‚úÖ Verified initial count: ${count} team member`);
    }).then(() => {
      // And the team member should be "Richard Hendricks"
      return cy.get('.team-member-header').should('have.length', 1);
    }).then(() => {
      return cy.get('.team-member-header').first().should('contain', SCENARIO_CONFIG.INITIAL_TEAM_MEMBER);
    }).then(() => {
      return cy.log(`‚úÖ Verified default team member: ${SCENARIO_CONFIG.INITIAL_TEAM_MEMBER}`);
    });
  });

  it("Scenario: Add team member button functionality", () => {
    // Then the "Add Team Member" button should be visible
    cy.get("#plan-actions").within(() => {
      cy.get('button[title="Add Team Member"]').should("be.visible");
    }).then(() => {
      // And the "Add Team Member" button should be enabled
      return cy.get("#plan-actions").within(() => {
        cy.get('button[title="Add Team Member"]').should("not.be.disabled");
      });
    }).then(() => {
      // When I click the "Add Team Member" button
      return cy.get("#plan-actions").within(() => {
        cy.get('button[title="Add Team Member"]').click();
      });
    }).then(() => {
      // Then the button should respond to clicks
      return cy.log("‚úÖ Add Team Member button responds to clicks");
    });
  });

  it("Scenario: Adding multiple team members", () => {
    const MEMBERS_TO_ADD = SCENARIO_CONFIG.MEMBERS_TO_ADD_MULTIPLE;
    let currentCount;
    
    // Given I start with the default team member
    getTeamMemberCount().then((count) => {
      currentCount = count;
      expect(currentCount).to.equal(1);
      return cy.log(`Given: Starting with ${currentCount} team member`);
    }).then(() => {
      // When I add ${MEMBERS_TO_ADD} team members one by one
      let chain = cy.wrap(null);
      
      for (let i = 0; i < MEMBERS_TO_ADD; i++) {
        chain = chain.then(() => {
          return cy.log(`When: Adding team member ${i + 1} of ${MEMBERS_TO_ADD}`).then(() => {
            return addTeamMember();
          }).then(() => {
            cy.wait(1000);
            // Then the team member count should increase after each addition
            return getTeamMemberCount();
          }).then((newCount) => {
            const expectedCount = currentCount + 1;
            return cy.log(`Then: After adding member ${i + 1}, count = ${newCount}, expected = ${expectedCount}`).then(() => {
              expect(newCount).to.equal(expectedCount);
              currentCount = newCount;
            });
          });
        });
      }
      
      return chain;
    }).then(() => {
      // And I should end up with ${1 + MEMBERS_TO_ADD} total team members
      const expectedFinalCount = 1 + MEMBERS_TO_ADD;
      expect(currentCount).to.equal(expectedFinalCount);
      return cy.log(`‚úÖ And: Successfully ended with ${currentCount} total team members`);
    });
  });

  it("Scenario: Deleting team members", () => {
    const MEMBERS_TO_ADD = SCENARIO_CONFIG.MEMBERS_TO_ADD_FOR_DELETION;
    const MEMBERS_TO_DELETE = SCENARIO_CONFIG.MEMBERS_TO_DELETE;
    let currentCount;
    
    // Given I have added ${MEMBERS_TO_ADD} additional team members
    getTeamMemberCount().then((count) => {
      currentCount = count;
      return cy.log(`Given: Starting with ${currentCount} team member`);
    }).then(() => {
      // Add the specified number of members
      let addChain = cy.wrap(null);
      for (let i = 0; i < MEMBERS_TO_ADD; i++) {
        addChain = addChain.then(() => {
          return addTeamMember().then(() => cy.wait(500));
        });
      }
      return addChain;
    }).then(() => {
      cy.wait(1000);
      return getTeamMemberCount();
    }).then((countAfterAdding) => {
      currentCount = countAfterAdding;
      const expectedAfterAdding = 1 + MEMBERS_TO_ADD;
      expect(currentCount).to.equal(expectedAfterAdding);
      return cy.log(`Given: Added ${MEMBERS_TO_ADD} members, now have ${currentCount} total`);
    }).then(() => {
      // When I delete each added team member one by one
      let deleteChain = cy.wrap(null);
      
      for (let i = 0; i < MEMBERS_TO_DELETE; i++) {
        deleteChain = deleteChain.then(() => {
          const memberToDelete = `Team Member ${2 + i}`;
          return cy.log(`When: Deleting team member: ${memberToDelete}`).then(() => {
            return removeTeamMember(memberToDelete);
          }).then(() => {
            cy.wait(1000);
            // Then the team member count should decrease after each deletion
            return getTeamMemberCount();
          }).then((newCount) => {
            const expectedCount = currentCount - 1;
            return cy.log(`Then: After deleting member ${i + 1}, count = ${newCount}, expected = ${expectedCount}`).then(() => {
              expect(newCount).to.equal(expectedCount);
              verifyTeamMemberNotExists(memberToDelete);
              currentCount = newCount;
            });
          });
        });
      }
      
      return deleteChain;
    }).then(() => {
      // And I should end up with only the original team member
      expect(currentCount).to.equal(1);
      verifyTeamMemberExists(SCENARIO_CONFIG.INITIAL_TEAM_MEMBER);
      return cy.log(`‚úÖ And: Successfully returned to original state with 1 team member`);
    });
  });

  it("Scenario: Making course selections for single member", () => {
    // Given the calculator starts at 0
    verifyCalculatorTotal(0);
    
    // When I select a course for "Richard Hendricks"
    selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    
    // Then the course should be marked as selected
    verifySelectionState(1, true, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    
    // And the calculator should show a value greater than 0
    cy.get("#calculator #total-value").invoke('text').then((totalText) => {
      const total = parseInt(totalText.trim());
      expect(total).to.be.greaterThan(0);
      return cy.log(`‚úÖ Then: Calculator shows value: ${total} (greater than 0)`);
    });
  });

  it("Scenario: Making course selections for multiple members", () => {
    // Given I have added 1 additional team member
    addTeamMember().then(() => {
      cy.wait(1000);
      return getTeamMemberCount();
    }).then((count) => {
      return cy.log(`Given: Added team member, now have ${count} total`);
    }).then(() => {
      if (count > 1) {
        // When I select the same course for both team members
        return cy.log(`When: Selecting course for first team member`).then(() => {
          selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          return cy.get("#calculator #total-value").invoke('text');
        }).then((firstTotal) => {
          const firstAmount = parseInt(firstTotal.trim());
          return cy.log(`When: First member selection total: ${firstAmount}`).then(() => {
            return cy.log(`When: Selecting same course for second team member`).then(() => {
              selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + 1);
              return cy.get("#calculator #total-value").invoke('text');
            });
          });
        }).then((secondTotal) => {
          const secondAmount = parseInt(secondTotal.trim());
          return cy.log(`Then: Both members selection total: ${secondAmount}`).then(() => {
            // Then both selections should be independent
            verifySelectionState(1, true, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
            verifySelectionState(1, true, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + 1);
            
            // And the calculator should reflect the combined cost
            expect(secondAmount).to.be.greaterThan(0);
            return cy.log(`‚úÖ Then: Both selections are independent and calculator shows combined cost`);
          });
        });
      } else {
        return cy.log("Given: Only one team member available, skipping multi-member scenario");
      }
    });
  });

  it("Scenario: Editing team member names", () => {
    // TODO: Implement after updating code to use inline editing instead of native prompt
    cy.log("üìù Scenario: Editing team member names - To be implemented");
    cy.log("This scenario will test:");
    cy.log("- Given I have a team member with a default name");
    cy.log("- When I click on the team member name to edit it");
    cy.log("- And I enter a new name");
    cy.log("- Then the team member should display the new name");
    cy.log("- And the new name should persist in the plan state");
  });

  it("Scenario: End-to-end team member workflow", () => {
    // Given I start with the default team member
    verifyTeamMemberExists(SCENARIO_CONFIG.INITIAL_TEAM_MEMBER);
    
    // When I add team members, make selections, and verify calculations
    cy.get("#plan-actions").within(() => {
      cy.get('button[title="Add Team Member"]').should("be.visible");
      cy.get('button[title="Add Team Member"]').click();
    }).then(() => {
      cy.wait(1000);
      return getTeamMemberCount();
    }).then((count) => {
      return cy.log(`When: Added team member, now have ${count} total`).then(() => {
        expect(count).to.be.at.least(1);
        
        // Make a selection and verify it works
        selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
        verifySelectionState(1, true, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
        
        return cy.get("#calculator #total-value").invoke('text');
      });
    }).then((total) => {
      // Then all team member functionality should work correctly
      expect(parseInt(total.trim())).to.be.greaterThan(0);
      return cy.log('‚úÖ Then: All team member functionality works correctly');
    });
  });
});