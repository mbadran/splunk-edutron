/**
 * Planner Selection Tests
 *
 * Tests course selection functionality in the Planner MonoTable.
 * Covers clicking selection squares, visual feedback, and calculator updates.
 */

// Import utilities
import {
  PLANNER_CONSTANTS,
  extractPriceFromRow,
  selectCourseForMember,
  verifySelectionState,
  waitForPlannerReady,
} from "../../support/plannerUtils";

// Test configuration constants
const TEST_CONFIG = {
  LOAD_TIMEOUT: 2000,
  BASIC_SELECTION_COUNT: 3,
  CALCULATOR_TEST_COUNT: 10,
  FIRST_TEAM_MEMBER_COLUMN: 10,
};

describe("Planner - Selection", () => {
  beforeEach(() => {
    cy.visit("/planner");
    cy.wait(TEST_CONFIG.LOAD_TIMEOUT);
    waitForPlannerReady();
  });

  it("simulates the user selecting courses for the initial team member", () => {
    // Verify initial calculator state
    cy.get("#calculator #total-value").should("contain", "0");

    // Select courses and verify visual feedback
    for (let i = 1; i <= TEST_CONFIG.BASIC_SELECTION_COUNT; i++) {
      cy.get(`#table-row-${i}`).should("be.visible");

      // Verify unselected state
      verifySelectionState(i, false, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);

      // Select course
      selectCourseForMember(i, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);

      // Verify selected state
      verifySelectionState(i, true, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);
    }

    cy.log(`âœ… Successfully selected ${TEST_CONFIG.BASIC_SELECTION_COUNT} courses`);
  });

  it("verifies that the calculator adds course selection totals", () => {
    cy.log(`ðŸ“Š Testing calculator with ${TEST_CONFIG.CALCULATOR_TEST_COUNT} courses...`);
    
    // Collect all prices using proper async chaining
    const prices = [];
    let totalPrice = 0;
    
    // Sequential price collection
    let priceChain = cy.wrap(null);
    
    for (let i = 1; i <= TEST_CONFIG.CALCULATOR_TEST_COUNT; i++) {
      priceChain = priceChain.then(() => {
        return extractPriceFromRow(i).then((price) => {
          return cy.log(`Row ${i}: ${price}`).then(() => {
            prices.push(price);
            totalPrice += price;
            return price;
          });
        });
      });
    }
    
    // After all prices collected, run the selection test
    priceChain.then(() => {
      cy.log(`ðŸ’° Expected total: ${totalPrice}`);
      
      // Test selections with running total verification
      let runningTotal = 0;
      
      for (let i = 1; i <= TEST_CONFIG.CALCULATOR_TEST_COUNT; i++) {
        runningTotal += prices[i - 1];
        
        // Select course
        selectCourseForMember(i, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);
        cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
        
        // Verify calculator shows correct running total
        cy.get("#calculator #total-value")
          .invoke('text')
          .then((actualText) => {
            const actualAmount = parseInt(actualText.trim());
            
            return cy.log(`Step ${i}: Expected ${runningTotal}, got ${actualAmount}`).then(() => {
              expect(actualAmount).to.equal(runningTotal);
            });
          });
      }
      
      // Final verification: all courses should be selected
      for (let i = 1; i <= TEST_CONFIG.CALCULATOR_TEST_COUNT; i++) {
        verifySelectionState(i, true, TEST_CONFIG.FIRST_TEAM_MEMBER_COLUMN);
      }
      
      // Final total verification
      cy.get("#calculator #total-value")
        .should("contain", totalPrice.toString());
        
      cy.log(`ðŸŽ‰ SUCCESS: Selected ${TEST_CONFIG.CALCULATOR_TEST_COUNT} courses, total = ${totalPrice}`);
    });
  });
});