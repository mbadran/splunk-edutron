/**
 * Feature: Training Plan Cost Calculations
 * 
 * As a training planner
 * I want to calculate the cost of my training plan
 * So that I can budget for training realistically
 */

import {
  PLANNER_CONSTANTS,
  extractPriceFromRow,
  getTeamMemberCount,
  generateTrainingPlan,
} from "../../support/plannerUtils";

const SCENARIO_CONFIG = {
  TEAM_COUNT: 5,
  COURSE_POOL_SIZE: 20,
  MIN_SELECTIONS_PER_MEMBER: 1,
  MAX_SELECTIONS_PER_MEMBER: 15,
  INITIAL_BUDGET: 50000, // High budget for surplus testing
  DEFICIT_BUDGET: 1000,  // Low budget for deficit testing
  EDGE_CASE_COURSES: 5,
};

describe("Feature: Training Plan Cost Calculations", () => {
  
  // Shared state using Cypress aliases for cross-scenario access
  before("Setup: Generate training plan for all scenarios", () => {
    // Generate a consistent training plan that all scenarios can use
    const trainingPlan = generateTrainingPlan(
      SCENARIO_CONFIG.TEAM_COUNT,
      SCENARIO_CONFIG.COURSE_POOL_SIZE,
      SCENARIO_CONFIG.MIN_SELECTIONS_PER_MEMBER,
      SCENARIO_CONFIG.MAX_SELECTIONS_PER_MEMBER
    );
    cy.wrap(trainingPlan).as('trainingPlan');
    cy.log(`Generated training plan: ${SCENARIO_CONFIG.TEAM_COUNT} members, ${trainingPlan.totalSelections} total selections`);
  });
  
  // Background: Setup planner for each scenario
  beforeEach("Background: Setup planner for calculations", () => {
    // Given I am on the planner page and it has loaded
    cy.visitPlannerAndWait();
  });

  it("Scenario: Budget setup and basic verification", () => {
    // Given I want to set a training budget
    cy.log(`Setting initial budget: ${SCENARIO_CONFIG.INITIAL_BUDGET}`);
    
    // When I set the budget
    cy.setBudget(SCENARIO_CONFIG.INITIAL_BUDGET);
    
    // Then the budget should be displayed correctly
    cy.verifyBudget(SCENARIO_CONFIG.INITIAL_BUDGET);
    
    // And the difference should show the full budget (no costs yet)
    cy.verifyBudgetDifference(SCENARIO_CONFIG.INITIAL_BUDGET);
    
    cy.log("✅ Budget setup and verification completed");
  });

  it("Scenario: Comprehensive team and course selection tracking", () => {
    // Given I have set a budget and have my training plan
    cy.setBudget(SCENARIO_CONFIG.INITIAL_BUDGET);
    cy.get('@trainingPlan').then((trainingPlan: any) => {
      let runningTotal = 0;
      
      // When I add the required team members
      for (let i = 1; i < SCENARIO_CONFIG.TEAM_COUNT; i++) {
        cy.log(`Adding team member ${i + 1} of ${SCENARIO_CONFIG.TEAM_COUNT}`);
        cy.addTeamMember();
        cy.wait(PLANNER_CONSTANTS.TEAM_ACTION_WAIT);
      }
      
      // Then I should have the expected number of team members
      getTeamMemberCount().then((finalCount) => {
        expect(finalCount).to.equal(SCENARIO_CONFIG.TEAM_COUNT);
        cy.log(`✅ Team setup complete: ${finalCount} members`);
        
        // Store team count for other scenarios
        cy.wrap(finalCount).as('teamCount');
      });
      
      // When I make course selections for each team member (in TUs mode)
      trainingPlan.memberSelections.forEach((memberSelections: number[], memberIndex: number) => {
        const columnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + memberIndex;
        
        cy.log(`Member ${memberIndex + 1}: Selecting ${memberSelections.length} courses: [${memberSelections.join(', ')}]`);
        
        memberSelections.forEach((rowIndex: number) => {
          // Get price and update running totals
          extractPriceFromRow(rowIndex).then((price) => {
            runningTotal += price;
            const currentBudgetDifference = SCENARIO_CONFIG.INITIAL_BUDGET - runningTotal;
            
            cy.log(`Selecting course ${rowIndex} for member ${memberIndex + 1} (price: ${price}, running total: ${runningTotal})`);
            
            // Make the selection
            cy.selectCourseForMember(rowIndex, columnIndex);
            cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
            
            // Verify calculator shows correct running total (in TUs)
            cy.verifyCalculatorTotal(runningTotal);
            
            // Verify budget difference updates correctly
            cy.verifyBudgetDifference(currentBudgetDifference);
          });
        });
      });
      
      // Store final total and selections for other scenarios
      cy.wrap(runningTotal).as('finalTotal');
      cy.wrap(trainingPlan.memberSelections).as('memberSelections');
      
      cy.log(`✅ Comprehensive selection tracking completed: ${trainingPlan.totalSelections} total selections, final total: ${runningTotal}`);
    });
  });

  it("Scenario: Currency mode toggle verification", () => {
    // Given I have completed the comprehensive selection scenario
    // Setup: Recreate the state from previous scenario
    cy.setBudget(SCENARIO_CONFIG.INITIAL_BUDGET);
    cy.get('@trainingPlan').then((trainingPlan: any) => {
      
      // Add team members
      for (let i = 1; i < SCENARIO_CONFIG.TEAM_COUNT; i++) {
        cy.addTeamMember();
        cy.wait(PLANNER_CONSTANTS.TEAM_ACTION_WAIT);
      }
      
      // Make all selections to get to the state we want to test
      trainingPlan.memberSelections.forEach((memberSelections: number[], memberIndex: number) => {
        const columnIndex = PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN + memberIndex;
        memberSelections.forEach((rowIndex: number) => {
          cy.selectCourseForMember(rowIndex, columnIndex);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        });
      });
      
      cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
      
      // When I test toggling from TUs to USD mode
      cy.log("Testing Credits to USD toggle...");
      cy.get("#calculator #total-value").invoke('text').then((tuTotal) => {
        const tuAmount = parseInt(tuTotal.trim());
        
        // Toggle to USD mode
        cy.toggleCreditsMode();
        cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
        
        // Then the USD amount should be different (higher)
        cy.get("#calculator #total-value").invoke('text').then((usdTotal) => {
          const usdAmount = parseInt(usdTotal.trim());
          expect(usdAmount).to.not.equal(tuAmount);
          expect(usdAmount).to.be.greaterThan(tuAmount); // USD should be higher than TUs
          cy.log(`TUs: ${tuAmount}, USD: ${usdAmount}`);
          
          // When I toggle back to TUs
          cy.toggleCreditsMode();
          cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
          
          // Then I should be back to the original TU amount
          cy.verifyCalculatorTotal(tuAmount);
          cy.log("✅ Credits/USD toggle verified");
        });
      });
    });
  });

  it("Scenario: Budget surplus and deficit scenarios", () => {
    // Test both positive (surplus) and negative (deficit) budget scenarios
    
    // Given I make a few course selections to get a baseline cost
    cy.selectCourseForMember(1, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    cy.selectCourseForMember(2, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    cy.selectCourseForMember(3, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
    cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
    
    // Get the current total to base our budget testing on
    cy.get("#calculator #total-value").invoke('text').then((totalText) => {
      const currentTotal = parseInt(totalText.trim());
      cy.log(`Current total: ${currentTotal}`);
      
      // Test surplus scenario - budget higher than cost
      const surplusBudget = currentTotal + 10000;
      cy.log(`Testing surplus scenario with budget: ${surplusBudget}`);
      
      cy.setBudget(surplusBudget);
      cy.verifyBudget(surplusBudget);
      
      const expectedSurplus = surplusBudget - currentTotal;
      cy.verifyBudgetDifference(expectedSurplus);
      cy.log(`✅ Surplus scenario verified: ${expectedSurplus} surplus`);
      
      // Test deficit scenario - budget lower than cost
      const deficitBudget = Math.max(SCENARIO_CONFIG.DEFICIT_BUDGET, currentTotal - 5000);
      cy.log(`Testing deficit scenario with budget: ${deficitBudget}`);
      
      // Clear current budget and set low budget
      cy.clearBudget();
      cy.wait(500);
      cy.setBudget(deficitBudget);
      cy.verifyBudget(deficitBudget);
      
      const expectedDeficit = deficitBudget - currentTotal;
      cy.verifyBudgetDifference(expectedDeficit);
      cy.log(`✅ Deficit scenario verified: ${Math.abs(expectedDeficit)} deficit`);
    });
  });

  it("Scenario: Course deselection and calculator reset", () => {
    // Given I have made several course selections
    const testSelections = [1, 2, 3, 4, 5];
    let expectedTotal = 0;
    
    // When I select multiple courses and track the total
    testSelections.forEach((rowIndex) => {
      extractPriceFromRow(rowIndex).then((price) => {
        expectedTotal += price;
        cy.selectCourseForMember(rowIndex, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
        cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        cy.log(`Selected course ${rowIndex}, expected total: ${expectedTotal}`);
      });
    });
    
    cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
    
    // Then verify the total is correct
    cy.get("#calculator #total-value").invoke('text').then((totalText) => {
      const actualTotal = parseInt(totalText.trim());
      expect(actualTotal).to.equal(expectedTotal);
      
      // When I deselect courses in reverse order
      const reversedSelections = [...testSelections].reverse();
      reversedSelections.forEach((rowIndex) => {
        extractPriceFromRow(rowIndex).then((price) => {
          expectedTotal -= price;
          
          // Deselect by clicking the same selection again
          cy.selectCourseForMember(rowIndex, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
          
          // Verify it's now unselected
          cy.verifySelectionState(rowIndex, false, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          
          cy.log(`Deselected course ${rowIndex}, expected total: ${expectedTotal}`);
        });
      });
    });
    
    cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
    
    // Then the total should return to zero
    cy.verifyCalculatorTotal(0);
    cy.log("✅ Deselection behavior verified - calculator returned to zero");
  });

  it("Scenario: Edge case pricing calculations", () => {
    // Given I want to test edge cases with different pricing
    cy.log("Testing edge cases with various course pricing scenarios");
    
    let freeCoursesFound = 0;
    let expensiveCoursesFound = 0;
    let runningTotal = 0;
    
    // When I check the first several courses for pricing patterns
    for (let i = 1; i <= SCENARIO_CONFIG.EDGE_CASE_COURSES; i++) {
      extractPriceFromRow(i).then((price) => {
        if (price === 0) {
          freeCoursesFound++;
          cy.log(`Found free course at row ${i}`);
          cy.selectCourseForMember(i, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        } else if (price > 10000) {
          expensiveCoursesFound++;
          runningTotal += price;
          cy.log(`Found expensive course at row ${i}: ${price}`);
          cy.selectCourseForMember(i, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        } else {
          runningTotal += price;
          cy.log(`Regular course at row ${i}: ${price}`);
          cy.selectCourseForMember(i, PLANNER_CONSTANTS.FIRST_TEAM_MEMBER_COLUMN);
          cy.wait(PLANNER_CONSTANTS.SELECTION_WAIT);
        }
      });
    }
    
    // Then verify the calculator handles all scenarios correctly
    cy.wait(PLANNER_CONSTANTS.CALCULATOR_WAIT);
    cy.get("#calculator #total-value").should("be.visible");
    
    cy.log(`✅ Edge case testing completed: ${freeCoursesFound} free, ${expensiveCoursesFound} expensive courses tested`);
  });
});