import { atom } from "jotai";

// Global working indicator state
export const workingAtom = atom<boolean>(false);
export const workingMessageAtom = atom<string>("");

// Catalog interface
export interface Catalog {
  id: string;
  name: string;
  description?: string;
  courseCount?: number;
  slug: string;
}

// Catalog state atoms
export const catalogsAtom = atom<Catalog[]>([
  {
    id: "splunk-step-001",
    name: "Splunk STEP",
    description: "Comprehensive Splunk training catalog with hands-on courses covering core platform skills, advanced analytics, and administration.",
    courseCount: 48,
    slug: "splunk-step-001",
  },
  {
    id: "splunk-security-002", 
    name: "Splunk Security",
    description: "Security-focused training covering SIEM, threat detection, incident response, and security analytics with Splunk Enterprise Security.",
    courseCount: 24,
    slug: "splunk-security-002",
  },
  {
    id: "splunk-itsi-003",
    name: "Splunk ITSI",
    description: "IT Service Intelligence training for monitoring, analytics, and predictive insights to optimize IT operations and service delivery.",
    courseCount: 12,
    slug: "splunk-itsi-003",
  },
]);

export const catalogsLoadingAtom = atom<boolean>(false);

// Derived atoms
export const catalogsCountAtom = atom((get) => get(catalogsAtom).length);
export const totalCoursesAtom = atom((get) => 
  get(catalogsAtom).reduce((total, catalog) => total + (catalog.courseCount || 0), 0)
);

// Working indicator helpers
export const setWorkingAtom = atom(
  null,
  (get, set, { isWorking, message }: { isWorking: boolean; message?: string }) => {
    set(workingAtom, isWorking);
    set(workingMessageAtom, message || "");
    
    // Auto-clear working state after page navigation
    if (isWorking && typeof window !== 'undefined') {
      // Clear working state after a reasonable timeout for navigation
      setTimeout(() => {
        set(workingAtom, false);
        set(workingMessageAtom, "");
      }, 2000);
    }
  }
);