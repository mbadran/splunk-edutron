import { atom } from "jotai";
import { Catalog, Status, Course, PlanState, Person } from "@/types/types";
import { DEFAULT_PLAN_TITLE, DEFAULT_TEAM_NAMES, DEFAULT_CATALOG } from "@/utils/constants";

// Global working indicator state
export const workingAtom = atom<boolean>(false);
export const workingMessageAtom = atom<string>("");

// Catalog state atoms - simple data storage only
export const catalogsAtom = atom<Catalog[]>([]);
export const catalogsLoadingAtom = atom<boolean>(false);
export const catalogsErrorAtom = atom<string | null>(null);

// Planner-specific atoms as per PRD data flow requirements
export const plannerCatalogsAtom = atom<string[]>([DEFAULT_CATALOG]); // Default to hardcoded catalog for MVP

// Helper function to generate plan selection key
export const createPlanSelectionKey = (personName: string, courseId: string): string => {
  const normalizedPersonName = personName.toLowerCase().replace(/\s+/g, '-');
  return `${normalizedPersonName}_${courseId}`;
};

// Helper function to parse plan selection key
export const parsePlanSelectionKey = (key: string): { personName: string; courseId: string } => {
  const [personPart, courseId] = key.split('_');
  const personName = personPart.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  return { personName, courseId };
};

// Create initial plan state
const createInitialPlanState = (): PlanState => {
  const defaultMember: Person = {
    id: `member-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    name: DEFAULT_TEAM_NAMES[0],
    email: "",
    role: "",
  };

  return {
    id: `plan-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    title: DEFAULT_PLAN_TITLE,
    description: "",
    catalogs: [DEFAULT_CATALOG],
    teamMembers: [defaultMember],
    selections: {},
    budget: null,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };
};

// Global plan state atom - session-only persistence (no atomWithStorage)
export const planStateAtom = atom<PlanState>(createInitialPlanState());

// Derived atoms for computed values
export const catalogsCountAtom = atom((get) => get(catalogsAtom).length);
export const totalCoursesAtom = atom((get) =>
  get(catalogsAtom).reduce(
    (total, catalog) => total + (catalog.courseCount || 0),
    0,
  ),
);

// Derived atom to get all courses from planner-selected catalogs
export const plannerCoursesAtom = atom((get) => {
  const catalogs = get(catalogsAtom);
  const planState = get(planStateAtom);
  
  const courses: Course[] = [];
  planState.catalogs.forEach(catalogId => {
    const catalog = catalogs.find(c => c.id === catalogId);
    if (catalog && catalog.courses) {
      courses.push(...catalog.courses);
    }
  });
  
  return courses;
});

// Derived atom for plan total calculation
export const planTotalAtom = atom((get) => {
  const courses = get(plannerCoursesAtom);
  const planState = get(planStateAtom);
  
  return Object.entries(planState.selections).reduce((total, [selectionKey, isSelected]) => {
    if (!isSelected) return total;
    
    const { courseId } = parsePlanSelectionKey(selectionKey);
    const course = courses.find(c => c.ID === courseId);
    return total + (course?.Price || 0);
  }, 0);
});

// Derived atom for cost per member calculation
export const planCostPerMemberAtom = atom((get) => {
  const courses = get(plannerCoursesAtom);
  const planState = get(planStateAtom);
  const costPerMember: Record<string, number> = {};
  
  // Initialize all team members with 0 cost
  planState.teamMembers.forEach(member => {
    costPerMember[member.name] = 0;
  });
  
  // Calculate cost for each member based on selections
  Object.entries(planState.selections).forEach(([selectionKey, isSelected]) => {
    if (!isSelected) return;
    
    const { personName, courseId } = parsePlanSelectionKey(selectionKey);
    const course = courses.find(c => c.ID === courseId);
    if (course) {
      costPerMember[personName] = (costPerMember[personName] || 0) + course.Price;
    }
  });
  
  return costPerMember;
});

// Derived atom for selected courses count
export const planSelectedCoursesAtom = atom((get) => {
  const planState = get(planStateAtom);
  return Object.values(planState.selections).filter(Boolean).length;
});

// Working indicator helper - simplified
export const setStatusAtom = atom(
  null,
  (get, set, { isWorking, message }: Status) => {
    set(workingAtom, isWorking);
    set(workingMessageAtom, message || "");
  },
);

// Plan state update helpers
export const updatePlanStateAtom = atom(
  null,
  (get, set, updates: Partial<PlanState>) => {
    const currentState = get(planStateAtom);
    const updatedState = {
      ...currentState,
      ...updates,
      updatedAt: new Date().toISOString(),
    };
    set(planStateAtom, updatedState);
  },
);