import { atom } from "jotai";
import { Catalog, Status, Course } from "@/types/types";

// Global working indicator state
export const workingAtom = atom<boolean>(false);
export const workingMessageAtom = atom<string>("");

// Catalog state atoms - simple data storage only
export const catalogsAtom = atom<Catalog[]>([]);
export const catalogsLoadingAtom = atom<boolean>(false);
export const catalogsErrorAtom = atom<string | null>(null);

// Planner-specific atoms as per PRD data flow requirements
export const plannerCatalogsAtom = atom<string[]>(['splunk-step']); // Default to hardcoded catalog for MVP

// Derived atoms for computed values
export const catalogsCountAtom = atom((get) => get(catalogsAtom).length);
export const totalCoursesAtom = atom((get) =>
  get(catalogsAtom).reduce(
    (total, catalog) => total + (catalog.courseCount || 0),
    0,
  ),
);

// Derived atom to get all courses from planner-selected catalogs
export const plannerCoursesAtom = atom((get) => {
  const catalogs = get(catalogsAtom);
  const selectedCatalogIds = get(plannerCatalogsAtom);
  
  const courses: Course[] = [];
  selectedCatalogIds.forEach(catalogId => {
    const catalog = catalogs.find(c => c.id === catalogId);
    if (catalog && catalog.courses) {
      courses.push(...catalog.courses);
    }
  });
  
  return courses;
});

// Working indicator helper - simplified
export const setStatusAtom = atom(
  null,
  (get, set, { isWorking, message }: Status) => {
    set(workingAtom, isWorking);
    set(workingMessageAtom, message || "");
  },
);