import { atom } from "jotai";
import { PlanAction } from "@/types/actions";
import { planStateAtom, addCourseSelection, removeCourseSelection } from "@/atoms/planner/planStateAtom";
import { isCreditsUnitModeAtom } from "@/atoms/planner/planCalculatorAtom";
import { addToHistory } from "@/atoms/history/historyAtom";

// Action execution atom - applies actions and records them in history
export const executeActionAtom = atom(
  null,
  (get, set, action: PlanAction) => {
    const currentState = get(planStateAtom);
    
    // Apply the action to state
    let newState = { ...currentState };
    
    switch (action.type) {
      case "ADD_TEAM_MEMBER":
        newState.teamMembers = [...currentState.teamMembers];
        newState.teamMembers.splice(action.payload.index, 0, action.payload.member);
        break;
      
      case "REMOVE_TEAM_MEMBER":
        newState.teamMembers = currentState.teamMembers.filter((_, i) => i !== action.payload.index);
        // Remove selections for deleted member
        const updatedSelections = { ...currentState.selections };
        delete updatedSelections[action.payload.member.id];
        newState.selections = updatedSelections;
        break;
      
      case "UPDATE_TEAM_MEMBER":
        newState.teamMembers = [...currentState.teamMembers];
        newState.teamMembers[action.payload.index] = action.payload.newMember;
        break;
      
      case "TOGGLE_COURSE_SELECTION":
        if (action.payload.wasSelected) {
          // Remove selection
          newState.selections = removeCourseSelection(
            currentState.selections,
            action.payload.personId,
            action.payload.catalogId,
            action.payload.courseId
          );
        } else {
          // Add selection
          newState.selections = addCourseSelection(
            currentState.selections,
            action.payload.personId,
            action.payload.catalogId,
            action.payload.courseId
          );
        }
        break;
      
      case "UPDATE_TITLE":
        newState.title = action.payload.newTitle;
        break;
      
      case "UPDATE_NOTES":
        newState.notes = action.payload.newNotes;
        break;
      
      case "SET_BUDGET":
        newState.budget = action.payload.newBudget;
        break;
      
      case "RESET_SELECTIONS":
        newState.selections = action.payload.oldSelections;
        break;
      
      case "IMPORT_PLAN":
        newState = action.payload.newPlanState;
        break;
      
      case "TOGGLE_CREDITS_MODE":
        // This doesn't affect plan state, handle in calculator atom
        break;
      
      default:
        console.warn(`Unknown action type: ${(action as any).type}`);
        return;
    }
    
    // Update plan state
    newState.updatedAt = new Date().toISOString();
    set(planStateAtom, newState);
    
    // Add to history
    addToHistory(get, set, action);
  },
);