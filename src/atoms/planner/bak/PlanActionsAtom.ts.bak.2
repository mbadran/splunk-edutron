import { atom } from "jotai";
import { 
  canUndoAtom, 
  canRedoAtom, 
  undoAtom, 
  redoAtom,
  planStateAtom,
  setStatusAtom 
} from "@/atoms/globalAtoms";
import { Plan, PlanMetadata, PlanMetrics } from "@/types/types";
import { APP_VERSION } from "@/utils/constants";

// Export plan functionality as an atom
export const exportPlanAtom = atom(
  null,
  (get, set) => {
    const planState = get(planStateAtom);
    
    set(setStatusAtom, { isWorking: true, message: "Exporting plan..." });

    try {
      // Create export metadata
      const metadata: PlanMetadata = {
        id: `export-${Date.now()}`,
        appVersion: APP_VERSION,
        exportedAt: new Date().toISOString(),
      };

      // Calculate metrics
      const totalCost = Object.values(planState.selections).reduce((total, personSelections) => {
        return total + Object.values(personSelections).reduce((personTotal, courseIds) => {
          return personTotal + courseIds.length * 100; // Placeholder calculation
        }, 0);
      }, 0);

      const metrics: PlanMetrics = {
        catalogs: planState.catalogs.length,
        costPerMember: {},
        courses: Object.values(planState.selections).reduce((total, personSelections) => {
          return total + Object.values(personSelections).reduce((personTotal, courseIds) => {
            return personTotal + courseIds.length;
          }, 0);
        }, 0),
        selections: Object.keys(planState.selections).length,
        teamMembers: planState.teamMembers.length,
        teams: planState.teams.length,
        totalCost,
      };

      // Create complete plan export
      const exportData: Plan = {
        metadata,
        plan: planState,
        metrics,
      };

      // Create and download file
      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${planState.title.replace(/[^a-z0-9]/gi, "_").toLowerCase()}_${metadata.id}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      set(setStatusAtom, { isWorking: false, message: "Plan exported successfully!" });
      setTimeout(() => {
        set(setStatusAtom, { isWorking: false, message: "" });
      }, 2000);
    } catch (error) {
      console.error("Export failed:", error);
      set(setStatusAtom, { isWorking: false, message: "Export failed" });
      setTimeout(() => {
        set(setStatusAtom, { isWorking: false, message: "" });
      }, 2000);
    }
  }
);

// Plan action atoms that were missing
export const setBudgetAtom = atom(null, (get, set, budget: number | null) => {
  // Implementation would go here
});

export const addTeamMemberAtom = atom(null, (get, set, member: any) => {
  // Implementation would go here
});

export const updateTeamMemberAtom = atom(null, (get, set, payload: any) => {
  // Implementation would go here
});

export const deleteTeamMemberAtom = atom(null, (get, set, memberId: string) => {
  // Implementation would go here
});

export const createNewPlanAtom = atom(null, (get, set) => {
  // Implementation would go here
});

export const resetPlanSelectionsAtom = atom(null, (get, set) => {
  // Implementation would go here
});

export const importPlanAtom = atom(null, (get, set, planData: any) => {
  // Implementation would go here
});

export const updateTitleAtom = atom(null, (get, set, title: string) => {
  // Implementation would go here
});

export const updateNotesAtom = atom(null, (get, set, notes: string) => {
  // Implementation would go here
});

export const toggleCreditsModeAtom = atom(null, (get, set) => {
  // Implementation would go here
});

export const toggleSelectionAtom = atom(null, (get, set, payload: any) => {
  // Implementation would go here
});

// Re-export existing atoms for convenience
export { canUndoAtom, canRedoAtom, undoAtom, redoAtom };