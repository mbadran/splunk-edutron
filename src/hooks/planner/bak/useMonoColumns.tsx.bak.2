import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { useAtom } from "jotai";

// Updated imports to use new table utilities
import { createColumn, createRowNumberColumn } from "@/utils/table/columnUtils";
import { TableHeader } from "@/components/common/table/TableHeader";
import {
  IDCell,
  CategoryCell,
  ModeCell,
  LanguageCell,
  DurationCell,
  PriceCell,
  NameCell,
  PDFCell,
  PlanCell,
} from "@/components/common/table/cellrenderers";

import { Course, Person } from "@/types/types";
import { TABLE_DEFAULTS } from "@/utils/constants";
import { generateTeamMemberColumnId } from "@/utils/table/tableHelpers";
import { MonoTableSelectionHook } from "@/hooks/planner/useMonoTableSelection";
import { TeamMemberManagementHook } from "@/hooks/planner/useTeamMemberManagement";
import { isCreditsUnitModeAtom } from "@/atoms/globalAtoms";

export interface UseMonoTableColumnsHook {
  courseColumns: ColumnDef<Course>[];
  teamColumns: ColumnDef<Course>[];
  allColumns: ColumnDef<Course>[];
}

/**
 * Hook for creating MonoTable column definitions using BaseTable2 utilities
 */
export const useMonoTableColumns = (
  teamMembers: Person[],
  selectionHook: MonoTableSelectionHook,
  managementHook: TeamMemberManagementHook,
  onMoveColumn?: (columnId: string, direction: "left" | "right") => void,
): UseMonoTableColumnsHook => {
  // Get TU mode state for price display
  const [isCreditsMode] = useAtom(isCreditsUnitModeAtom);

  // Create course data columns (pinned to the left) using new utilities
  const courseColumns = useMemo(
    (): ColumnDef<Course>[] => [
      // Row number column
      createRowNumberColumn<Course>({
        size: TABLE_DEFAULTS.COLUMN_WIDTH.XSMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_XSMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_XSMALL,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Course ID column
      createColumn<Course>("ID", {
        header: "ID",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_SMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_SMALL,
        cell: IDCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Course Name column
      createColumn<Course>("Name", {
        header: "Course",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.XXLARGE,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_XXLARGE,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_XXLARGE,
        cell: NameCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Category column
      createColumn<Course>("Category", {
        header: "Category",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.MEDIUM,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_MEDIUM,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_MEDIUM,
        cell: CategoryCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Price column - WITH TU SUPPORT
      createColumn<Course>("Price", {
        header: "Price",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_SMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_SMALL,
        cell: ({ getValue }) => {
          const price = getValue() as number;
          
          // Handle free courses
          if (price === 0) {
            return (
              <div className="h-12 flex items-center px-2 justify-center">
                <span className="text-sm font-semibold text-green-600">
                  Free
                </span>
              </div>
            );
          }

          // Convert to TUs if in credits mode (1 TU = $10)
          const displayPrice = isCreditsMode ? price / 10 : price;
          const currencySymbol = isCreditsMode ? "" : "$";
          
          // Format the number
          const formattedPrice = new Intl.NumberFormat("en-US", {
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
          }).format(displayPrice);

          return (
            <div className="h-12 flex items-center px-2 justify-center">
              <span className="text-sm font-semibold text-gray-700">
                {currencySymbol}{formattedPrice}
              </span>
            </div>
          );
        },
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // PDF column
      createColumn<Course>("PDF", {
        header: "PDF",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.XSMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_XSMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_XSMALL,
        cell: PDFCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Mode column
      createColumn<Course>("Mode", {
        header: "Mode",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_SMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_SMALL,
        cell: ModeCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Language column
      createColumn<Course>("Language", {
        header: "Language",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_SMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_SMALL,
        cell: LanguageCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),

      // Duration column
      createColumn<Course>("Duration", {
        header: "Duration",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_SMALL,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_SMALL,
        cell: DurationCell,
        headerClassName: "text-sm font-semibold text-white",
        showMoveHandle: true,
        onMoveColumn,
      }),
    ],
    [isCreditsMode, onMoveColumn], // Add dependency so price column re-renders when mode changes
  );

  // Create team member columns (scrollable on the right) using new utilities
  const teamColumns = useMemo((): ColumnDef<Course>[] => {
    const memberColumns = teamMembers.map((member, memberIndex) => {
      const columnId = generateTeamMemberColumnId(member.id);

      return {
        id: columnId,
        header: ({ column }: any) => (
          <TeamMemberHeader
            column={column}
            member={member}
            index={memberIndex}
            totalMembers={teamMembers.length}
            managementHook={managementHook}
            onMoveColumn={onMoveColumn}
          />
        ),
        cell: ({ row }: any) => (
          <PlanCell
            course={row.original}
            member={member}
            isSelected={selectionHook.isSelected(row.original, member)}
            onToggle={selectionHook.handleToggleSelection}
          />
        ),
        size: TABLE_DEFAULTS.COLUMN_WIDTH.MEDIUM,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_MEDIUM,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_MEDIUM,
        enableResizing: true,
        enableSorting: false,
        enableColumnFilter: false,
      };
    });

    return memberColumns;
  }, [teamMembers, selectionHook, managementHook, onMoveColumn]);

  // Combine all columns
  const allColumns = useMemo(
    () => [...courseColumns, ...teamColumns],
    [courseColumns, teamColumns],
  );

  return {
    courseColumns,
    teamColumns,
    allColumns,
  };
};

// Clean team member header component using TableHeader
const TeamMemberHeader = React.memo<{
  column: any;
  member: Person;
  index: number;
  totalMembers: number;
  managementHook: TeamMemberManagementHook;
  onMoveColumn?: (columnId: string, direction: "left" | "right") => void;
}>(({ column, member, index, totalMembers, managementHook, onMoveColumn }) => {
  const { handleDeleteTeamMember } = managementHook;

  // Handle team member name editing
  const handleEditName = () => {
    const newName = prompt("Enter new name:", member.name);
    if (newName && newName.trim() && newName.trim() !== member.name) {
      managementHook.handleUpdateTeamMember(index, newName.trim());
    }
  };

  // Handle team member deletion
  const handleDelete = () => {
    if (totalMembers <= 1) {
      alert("Cannot delete the last team member");
      return;
    }
    
    if (confirm(`Delete ${member.name} from the team?`)) {
      handleDeleteTeamMember(index);
    }
  };

  return (
    <div className="w-full">
      <TableHeader 
        column={column}
        className="text-sm font-semibold text-white"
        showMoveHandle={true}
        onMoveColumn={onMoveColumn}
      >
        <div className="flex items-center justify-between w-full min-w-0">
          <button
            onClick={handleEditName}
            className="flex-1 text-left truncate hover:bg-white/20 rounded px-1 py-0.5 transition-colors min-w-0"
            title={`Edit ${member.name}`}
          >
            <span className="truncate block">{member.name}</span>
          </button>
          
          {totalMembers > 1 && (
            <button
              onClick={handleDelete}
              className="ml-1 p-0.5 hover:bg-red-500/20 rounded transition-colors text-red-300 hover:text-red-200"
              title={`Delete ${member.name}`}
            >
              Ã—
            </button>
          )}
        </div>
      </TableHeader>
    </div>
  );
});

TeamMemberHeader.displayName = "TeamMemberHeader";