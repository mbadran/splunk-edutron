import React, { useMemo } from "react";
import { Plus, FileText, ExternalLink } from "lucide-react";
import { ColumnDef } from "@tanstack/react-table";
import { useAtom } from "jotai";
import {
  SortableHeader,
  createRowNumberColumn,
  createDataColumn,
} from "@/components/common/BaseTable";
import { Course, Person } from "@/types/types";
import {
  TABLE_DEFAULTS,
  CATEGORY_COLORS,
  MODE_COLORS,
  MODE_TOOLTIPS,
} from "@/utils/constants";
import {
  interpolateColor,
  generateCourseUrl,
  generateDetailsUrl,
} from "@/utils/planner/tableUtils";
import { MonoTableSelectionHook } from "@/hooks/planner/useMonoTableSelection";
import { TeamMemberManagementHook } from "@/hooks/planner/useTeamMemberManagement";
import { PlanSelectionCell } from "@/components/PlanSelectionCell";
import { TeamMemberHeader } from "@/components/PlanTeamMemberHeader";
import { isCreditsUnitModeAtom } from "@/atoms/globalAtoms";

const MEMBER_COLUMN_WIDTH = TABLE_DEFAULTS.COLUMN_WIDTH.MEDIUM;
const MAX_TEAM_MEMBERS = 20;

export interface UseMonoTableColumnsHook {
  courseColumns: ColumnDef<Course>[];
  teamColumns: ColumnDef<Course>[];
  allColumns: ColumnDef<Course>[];
}

/**
 * Hook for creating MonoTable column definitions with JSX rendering
 */
export const useMonoTableColumns = (
  teamMembers: Person[],
  selectionHook: MonoTableSelectionHook,
  managementHook: TeamMemberManagementHook,
): UseMonoTableColumnsHook => {
  // Get TU mode state for price display
  const [isCreditsMode] = useAtom(isCreditsUnitModeAtom);

  // Create course data columns (pinned to the left)
  const courseColumns = useMemo(
    (): ColumnDef<Course>[] => [
      // Row number column
      createRowNumberColumn(),

      // Course ID column
      createDataColumn("ID", {
        header: "ID",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        cell: ({ getValue, row }) => (
          <div className="h-12 flex items-center px-2 justify-center">
            <span
              className="text-sm text-gray-700 font-mono truncate"
              title={getValue() as string}
            >
              {getValue() as string}
            </span>
          </div>
        ),
      }),

      // Course Name column
      createDataColumn("Name", {
        header: "Course",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.XXLARGE,
        cell: ({ getValue, row }) => {
          const course = row.original;
          const courseUrl = generateCourseUrl(course);

          return (
            <div className="h-12 flex items-center px-2">
              {courseUrl !== "#" ? (
                <a
                  href={courseUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-orange-600 hover:text-orange-700 font-medium truncate flex items-center gap-1"
                  title={`Open ${getValue() as string} in new tab`}
                >
                  <span className="truncate">{getValue() as string}</span>
                  <ExternalLink className="w-3 h-3 flex-shrink-0" />
                </a>
              ) : (
                <span
                  className="text-sm text-orange-600 font-medium truncate"
                  title={getValue() as string}
                >
                  {getValue() as string}
                </span>
              )}
            </div>
          );
        },
      }),

      // Category column
      createDataColumn("Category", {
        header: "Category",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.MEDIUM,
        cell: ({ getValue }) => {
          const category = getValue() as string;
          const colorClass =
            CATEGORY_COLORS[category] || "bg-gray-500 text-white";

          return (
            <div className="h-12 flex items-center px-2 justify-center">
              <span
                className={`px-2 py-1 rounded text-xs font-semibold ${colorClass}`}
                title={category}
              >
                {category}
              </span>
            </div>
          );
        },
      }),

      // Price column - WITH TU SUPPORT
      createDataColumn("Price", {
        header: "Price",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        cell: ({ getValue }) => {
          const price = getValue() as number;

          // Handle free courses
          if (price === 0) {
            return (
              <div className="h-12 flex items-center px-2 justify-center">
                <span className="text-sm font-semibold text-green-600">
                  Free
                </span>
              </div>
            );
          }

          // Convert to TUs if in credits mode (1 TU = $10)
          const displayPrice = isCreditsMode ? price / 10 : price;
          const currencySymbol = isCreditsMode ? "" : "$";

          // Format the number
          const formattedPrice = new Intl.NumberFormat("en-US", {
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
          }).format(displayPrice);

          return (
            <div className="h-12 flex items-center px-2 justify-center">
              <span className="text-sm font-semibold text-gray-700">
                {currencySymbol}
                {formattedPrice}
              </span>
            </div>
          );
        },
      }),

      // PDF column
      createDataColumn("PDF", {
        header: "PDF",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.XSMALL,
        cell: ({ getValue, row }) => {
          const course = row.original;
          const detailsUrl = generateDetailsUrl(course);

          return (
            <div className="h-12 flex items-center px-2 justify-center">
              {detailsUrl !== "#" ? (
                <a
                  href={detailsUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-orange-600 hover:text-orange-700 transition-colors"
                  title="View course details PDF"
                  aria-label={`View ${course.Name} details PDF`}
                >
                  <FileText className="w-4 h-4" />
                </a>
              ) : (
                <span className="text-gray-300">
                  <FileText className="w-4 h-4" />
                </span>
              )}
            </div>
          );
        },
      }),

      // Mode column
      createDataColumn("Mode", {
        header: "Mode",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        cell: ({ getValue }) => {
          const mode = getValue() as string;
          const colorClass = MODE_COLORS[mode] || "bg-gray-100 text-gray-800";
          const tooltip = MODE_TOOLTIPS[mode] || mode;

          return (
            <div className="h-12 flex items-center px-2 justify-center">
              <span
                className={`px-2 py-1 rounded text-xs font-semibold ${colorClass}`}
                title={tooltip}
              >
                {mode}
              </span>
            </div>
          );
        },
      }),

      // Language column
      createDataColumn("Language", {
        header: "Language",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        cell: ({ getValue }) => (
          <div className="h-12 flex items-center px-2 justify-center">
            <span className="text-sm text-gray-700 font-medium">
              {(getValue() as string) || "EN"}
            </span>
          </div>
        ),
      }),

      // Duration column
      createDataColumn("Duration", {
        header: "Duration",
        size: TABLE_DEFAULTS.COLUMN_WIDTH.SMALL,
        cell: ({ getValue }) => (
          <div className="h-12 flex items-center px-2 justify-center">
            <span className="text-sm text-gray-700 font-mono">
              {getValue() as number}h
            </span>
          </div>
        ),
      }),
    ],
    [isCreditsMode], // Add dependency so price column re-renders when mode changes
  );

  // Create team member columns (scrollable on the right)
  const teamColumns = useMemo((): ColumnDef<Course>[] => {
    const memberColumns = teamMembers.map((member, memberIndex) => {
      // Calculate gradient color for header
      const gradientFactor =
        teamMembers.length > 1 ? memberIndex / (teamMembers.length - 1) : 0;
      const headerColor = interpolateColor(
        "#000000",
        "#dddddd",
        gradientFactor,
      );

      return {
        id: `member-${member.id}`,
        header: ({ column }: any) => (
          <SortableHeader column={column} showDragHandle={false}>
            <div
              className="w-full h-full -m-1"
              style={{ backgroundColor: headerColor }}
            >
              <TeamMemberHeader
                member={member}
                index={memberIndex}
                totalMembers={teamMembers.length}
                managementHook={managementHook}
              />
            </div>
          </SortableHeader>
        ),
        cell: ({ row }: any) => (
          <PlanSelectionCell
            course={row.original}
            member={member}
            isSelected={selectionHook.isSelected(row.original, member)}
            onToggle={selectionHook.handleToggleSelection}
          />
        ),
        size: MEMBER_COLUMN_WIDTH,
        minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_MEDIUM,
        maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_MEDIUM,
        enableResizing: true,
        enableSorting: false,
      };
    });

    // Add member button column with gradient color
    const addButtonColor =
      teamMembers.length > 0
        ? interpolateColor("#000000", "#dddddd", 1.0)
        : "#dddddd";

    const addButtonColumn = {
      id: "add-member",
      header: ({ column }: any) => (
        <SortableHeader column={column} showDragHandle={false}>
          <div
            className="w-full h-full -m-1 flex items-center justify-center"
            style={{ backgroundColor: addButtonColor }}
          >
            <button
              onClick={managementHook.handleAddTeamMember}
              disabled={teamMembers.length >= MAX_TEAM_MEMBERS}
              className={`w-8 h-8 bg-transparent border-none transition-colors rounded flex items-center justify-center font-semibold ${
                teamMembers.length < MAX_TEAM_MEMBERS
                  ? "hover:bg-white/20 cursor-pointer text-black"
                  : "opacity-50 cursor-not-allowed text-gray-500"
              }`}
              title={
                teamMembers.length < MAX_TEAM_MEMBERS
                  ? "Add team member"
                  : `Maximum ${MAX_TEAM_MEMBERS} members allowed`
              }
              aria-label={
                teamMembers.length < MAX_TEAM_MEMBERS
                  ? "Add new team member to training plan"
                  : `Maximum ${MAX_TEAM_MEMBERS} team members allowed`
              }
            >
              <Plus className="w-5 h-5" />
            </button>
          </div>
        </SortableHeader>
      ),
      cell: () => <div className="h-12"></div>,
      size: MEMBER_COLUMN_WIDTH,
      minSize: TABLE_DEFAULTS.COLUMN_LIMITS.MIN_MEDIUM,
      maxSize: TABLE_DEFAULTS.COLUMN_LIMITS.MAX_MEDIUM,
      enableResizing: true,
      enableSorting: false,
    };

    return [...memberColumns, addButtonColumn];
  }, [teamMembers, selectionHook, managementHook]);

  // Combine all columns
  const allColumns = useMemo(
    () => [...courseColumns, ...teamColumns],
    [courseColumns, teamColumns],
  );

  return {
    courseColumns,
    teamColumns,
    allColumns,
  };
};
