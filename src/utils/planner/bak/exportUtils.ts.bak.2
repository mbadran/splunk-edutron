import { Plan, PlanState, Course } from "@/types/types";

/**
 * Generates filename for plan export with format: edutron_YYYY-MM-DDTHH-MM_plan-title-with-hyphens.json
 */
export const generateExportFilename = (planTitle: string, extension: string = 'json'): string => {
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  
  // Get local time in HH-MM format (24-hour)
  const hours = now.getHours().toString().padStart(2, '0');
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const timeStr = `${hours}-${minutes}`;
  
  // Clean plan title: replace spaces with hyphens, remove special chars
  const cleanTitle = planTitle
    .toLowerCase()
    .replace(/\s+/g, '-')           // Replace spaces with hyphens
    .replace(/[^a-z0-9-]/g, '')     // Remove special characters except hyphens
    .replace(/-+/g, '-')            // Replace multiple consecutive hyphens with single
    .replace(/^-|-$/g, '');         // Remove leading/trailing hyphens
  
  return `edutron_${dateStr}T${timeStr}_${cleanTitle}.${extension}`;
};

/**
 * Exports plan data as JSON file with enhanced metadata
 */
export const exportPlanAsJSON = (
  planState: PlanState,
  selectedCoursesCount: number,
  totalCost: number,
  costPerMember: Record<string, number>
): void => {
  const planExport: Plan = {
    metadata: {
      id: planState.id,
      title: planState.title,
      version: "1.0",
      createdAt: planState.createdAt,
      updatedAt: planState.updatedAt,
      exportedAt: new Date().toISOString(),
    },
    state: planState,
    totals: {
      selectedCourses: selectedCoursesCount,
      totalCost: totalCost,
      costPerMember: costPerMember,
    },
    courses: [], // Remove courses array - keep lean for import/export
  };

  const dataStr = JSON.stringify(planExport, null, 2);
  const filename = generateExportFilename(planState.title, 'json');

  // Try using the File System Access API if available, fallback to blob download
  if ('showSaveFilePicker' in window) {
    try {
      (window as any).showSaveFilePicker({
        suggestedName: filename,
        types: [{
          description: 'JSON files',
          accept: { 'application/json': ['.json'] },
        }],
      }).then((fileHandle: any) => {
        return fileHandle.createWritable();
      }).then((writable: any) => {
        writable.write(dataStr);
        writable.close();
      }).catch(() => {
        // Fallback to blob download if user cancels or API fails
        downloadWithBlob(dataStr, filename);
      });
    } catch {
      // Fallback to blob download if API not supported
      downloadWithBlob(dataStr, filename);
    }
  } else {
    // Fallback to blob download for browsers without File System Access API
    downloadWithBlob(dataStr, filename);
  }
};

// Helper function for blob download
const downloadWithBlob = (dataStr: string, filename: string) => {
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);

  const linkElement = document.createElement("a");
  linkElement.setAttribute("href", url);
  linkElement.setAttribute("download", filename);
  linkElement.style.display = 'none';
  document.body.appendChild(linkElement);
  linkElement.click();
  document.body.removeChild(linkElement);
  
  // Clean up the blob URL
  URL.revokeObjectURL(url);
};