import { useAtom } from "jotai";
import { useEffect, useRef } from "react";
import {
  catalogsAtom,
  catalogsLoadingAtom,
  catalogsErrorAtom,
  setStatusAtom,
} from "@/atoms/globalAtoms";
import { loadAllCatalogs } from "@/utils/catalogLoader";
import { CATALOG_LOAD_ERROR_MESSAGE } from "@/utils/constants";

/**
 * Centralized hook for accessing catalogs with automatic loading
 * 
 * This hook ensures that catalogs are loaded from CSV files into the global atom
 * regardless of which page/component the user lands on first. It prevents
 * duplicate loading attempts and provides a consistent interface for catalog access.
 * 
 * Usage:
 * const { catalogs, loading, error, catalogsCount, totalCourses } = useCatalogs();
 */
export const useCatalogs = () => {
  const [catalogs, setCatalogs] = useAtom(catalogsAtom);
  const [loading, setLoading] = useAtom(catalogsLoadingAtom);
  const [error, setError] = useAtom(catalogsErrorAtom);
  const [, setStatus] = useAtom(setStatusAtom);
  
  // Use ref to prevent duplicate loading calls during React's double-effect in development
  const loadingInitiated = useRef(false);

  useEffect(() => {
    // Only load if:
    // 1. No catalogs are currently loaded
    // 2. Not currently loading
    // 3. Haven't already initiated loading in this component instance
    if (catalogs.length === 0 && !loading && !loadingInitiated.current) {
      loadingInitiated.current = true;
      loadCatalogs();
    }
  }, [catalogs.length, loading]);

  const loadCatalogs = async () => {
    console.log("useCatalogs: Starting catalog load process");
    
    setLoading(true);
    setError(null);
    setStatus({ isWorking: true, message: "Loading catalogs..." });

    try {
      const loadedCatalogs = await loadAllCatalogs();
      setCatalogs(loadedCatalogs);
      
      console.log("useCatalogs: Successfully loaded catalogs:", loadedCatalogs.map(c => `${c.name} (${c.id})`));
      
      if (loadedCatalogs.length === 0) {
        setError(CATALOG_LOAD_ERROR_MESSAGE);
      }
    } catch (loadError) {
      const errorMessage = loadError instanceof Error ? loadError.message : "Failed to load catalogs";
      console.error("useCatalogs: Failed to load catalogs:", errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
      setStatus({ isWorking: false, message: "" });
      loadingInitiated.current = false; // Reset for potential retries
    }
  };

  // Derived values for convenience
  const catalogsCount = catalogs.length;
  const totalCourses = catalogs.reduce(
    (total, catalog) => total + (catalog.courseCount || 0),
    0,
  );

  return {
    catalogs,
    loading,
    error,
    catalogsCount,
    totalCourses,
    // Expose reload function for error recovery
    reloadCatalogs: loadCatalogs,
  };
};