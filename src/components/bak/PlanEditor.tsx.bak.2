import React, { useState, useEffect } from "react";
import Header from "./Header";
import Catalog from "./Catalog";
import Team from "./Team";
import Footer from "./Footer";
import { ConfirmationModal, useConfirmationModal } from "./Utilities";
import { useScrollSync } from "./hooks/scrollSync";
import { Course, PlanState } from "./types";
import { DEFAULT_PLAN_TITLE, PAGE_TITLE_EDIT, CAST_NAMES } from "./constants";

interface PlanScrollerProps {
  courseCount: number;
  courses: Course[];
  teamMembers: string[];
  selections: Record<string, boolean>;
  onCoursesLoad: (count: number, courses: Course[]) => void;
  onTeamMembersChange: (members: string[]) => void;
  onSelectionsChange: (selections: Record<string, boolean>) => void;
}

const PlanScroller: React.FC<PlanScrollerProps> = ({
  courseCount,
  courses,
  teamMembers,
  selections,
  onCoursesLoad,
  onTeamMembersChange,
  onSelectionsChange,
}) => {
  const [isResizing, setIsResizing] = useState(false);
  const [leftWidth, setLeftWidth] = useState(50);
  const {
    catalogTableRef,
    teamTableRef,
    handleCatalogScroll,
    handleTeamScroll,
  } = useScrollSync();

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!isResizing) return;

      const containerRect = document
        .querySelector(".training-plan-container")
        ?.getBoundingClientRect();
      if (!containerRect) return;

      const newLeftWidth =
        ((e.clientX - containerRect.left) / containerRect.width) * 100;

      if (newLeftWidth >= 30 && newLeftWidth <= 70) {
        setLeftWidth(newLeftWidth);
      }
    };

    const handleMouseUp = () => {
      setIsResizing(false);
    };

    if (isResizing) {
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
    }

    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
    };
  }, [isResizing]);

  const handleMouseDown = () => {
    setIsResizing(true);
  };

  const handleCoursesLoad = (count: number, courses: Course[]) => {
    onCoursesLoad(count, courses);
  };

  const handleTeamChange = (members: string[]) => {
    onTeamMembersChange(members);
  };

  const handleToggleSelection = (courseIndex: number, memberIndex: number) => {
    const key = `${courseIndex}-${memberIndex}`;
    const newSelections = {
      ...selections,
      [key]: !selections[key],
    };
    onSelectionsChange(newSelections);
  };

  const isSelected = (courseIndex: number, memberIndex: number) => {
    const key = `${courseIndex}-${memberIndex}`;
    return selections[key] || false;
  };

  return (
    <div className="h-[70vh] training-plan-container flex relative">
      <div
        className="h-full overflow-hidden catalog-scroll-container"
        style={{
          width: `${leftWidth}%`,
        }}
      >
        <div className="bg-white h-full">
          <Catalog
            ref={catalogTableRef}
            onCoursesLoad={handleCoursesLoad}
            onScroll={handleCatalogScroll}
          />
        </div>
      </div>

      <div
        className="bg-gradient-to-b from-orange-500 to-pink-500 cursor-col-resize hover:from-orange-600 hover:to-pink-600 transition-colors duration-150 group relative flex-shrink-0 flex items-center justify-center hover:cursor-grab active:cursor-grabbing"
        style={{ width: "10px" }}
        onMouseDown={handleMouseDown}
      >
        <div
          className="bg-orange-500 rounded-md shadow-lg group-hover:bg-orange-600 transition-colors duration-150 flex flex-col items-center justify-center z-10 border border-orange-400 gap-1"
          style={{ width: "14px", height: "32px" }}
        >
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
        </div>
      </div>

      <div
        className="h-full overflow-hidden team-scroll-container"
        style={{
          width: `${100 - leftWidth}%`,
        }}
      >
        <div className="bg-white h-full">
          <Team
            ref={teamTableRef}
            courses={courses}
            courseCount={courseCount}
            teamMembers={teamMembers}
            selections={selections}
            onTeamMembersChange={handleTeamChange}
            onToggleSelection={handleToggleSelection}
            isSelected={isSelected}
            onScroll={handleTeamScroll}
          />
        </div>
      </div>
    </div>
  );
};

interface PlanEditorProps {
  onBackToWelcome: () => void;
  hasExistingPlan: boolean;
}

const PlanEditor: React.FC<PlanEditorProps> = ({
  onBackToWelcome,
  hasExistingPlan,
}) => {
  const [planTitle, setPlanTitle] = useState(DEFAULT_PLAN_TITLE);
  const [courseCount, setCourseCount] = useState(0);
  const [courses, setCourses] = useState<Course[]>([]);
  const [teamMembers, setTeamMembers] = useState([CAST_NAMES[0]]);
  const [selections, setSelections] = useState<Record<string, boolean>>({});
  const [budget, setBudget] = useState<number | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [history, setHistory] = useState<PlanState[]>([
    {
      title: DEFAULT_PLAN_TITLE,
      courseCount: 0,
      teamMembers: [CAST_NAMES[0]],
      selections: {},
    },
  ]);
  const [historyIndex, setHistoryIndex] = useState(0);

  const {
    showConfirmation,
    showConfirmationModal,
    handleConfirmAction,
    handleCancelAction,
    confirmationTitle,
    confirmationMessage,
  } = useConfirmationModal();

  const initialState: PlanState = {
    title: DEFAULT_PLAN_TITLE,
    courseCount: 0,
    teamMembers: [CAST_NAMES[0]],
    selections: {},
  };

  // Calculate total cost based on selections
  const calculateTotal = () => {
    let total = 0;

    Object.entries(selections).forEach(([key, isSelected]) => {
      if (isSelected) {
        const [courseIndexStr] = key.split("-");
        const courseIndex = parseInt(courseIndexStr, 10);

        if (courses[courseIndex]) {
          const course = courses[courseIndex];
          const price = course.Price || 0;
          total += price;
        }
      }
    });

    return total;
  };

  const total = calculateTotal();

  useEffect(() => {
    document.title = PAGE_TITLE_EDIT;

    const handlePopState = () => {
      if (hasChanges) {
        showConfirmationModal(
          () => onBackToWelcome(),
          "Unsaved Changes!",
          "We recommend downloading your current plan before continuing. Are you sure you want to leave?",
        );
        window.history.pushState({ view: "edit" }, "", "#edit");
      } else {
        onBackToWelcome();
      }
    };

    window.addEventListener("popstate", handlePopState);

    return () => {
      window.removeEventListener("popstate", handlePopState);
    };
  }, [onBackToWelcome, hasChanges, showConfirmationModal]);

  const updateHistory = (
    newTitle: string,
    newCourseCount: number,
    newTeamMembers: string[],
    newSelections: Record<string, boolean>,
  ) => {
    const newState: PlanState = {
      title: newTitle,
      courseCount: newCourseCount,
      teamMembers: newTeamMembers,
      selections: newSelections,
    };
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(newState);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  const checkForChanges = (
    title: string,
    courseCount: number,
    teamMembers: string[],
    selections: Record<string, boolean>,
  ) => {
    const titleChanged = title !== initialState.title;
    const coursesChanged = courseCount !== initialState.courseCount;
    const teamChanged =
      JSON.stringify(teamMembers) !== JSON.stringify(initialState.teamMembers);
    const selectionsChanged =
      JSON.stringify(selections) !== JSON.stringify(initialState.selections);
    setHasChanges(
      titleChanged || coursesChanged || teamChanged || selectionsChanged,
    );
  };

  const handleUpdateTitle = (newTitle: string) => {
    setPlanTitle(newTitle);
    updateHistory(newTitle, courseCount, teamMembers, selections);
    checkForChanges(newTitle, courseCount, teamMembers, selections);
  };

  const handleDownload = () => {
    alert("Coming soon!");
  };

  const handleCoursesLoad = (count: number, courses: Course[]) => {
    setCourseCount(count);
    setCourses(courses);
    updateHistory(planTitle, count, teamMembers, selections);
    checkForChanges(planTitle, count, teamMembers, selections);
  };

  const handleTeamMembersChange = (newTeamMembers: string[]) => {
    setTeamMembers(newTeamMembers);
    updateHistory(planTitle, courseCount, newTeamMembers, selections);
    checkForChanges(planTitle, courseCount, newTeamMembers, selections);
  };

  const handleSelectionsChange = (newSelections: Record<string, boolean>) => {
    setSelections(newSelections);
    updateHistory(planTitle, courseCount, teamMembers, newSelections);
    checkForChanges(planTitle, courseCount, teamMembers, newSelections);
  };

  const handleBudgetChange = (newBudget: number | null) => {
    setBudget(newBudget);
  };

  const handleUndo = () => {
    if (historyIndex > 0) {
      const newIndex = historyIndex - 1;
      const state = history[newIndex];
      setHistoryIndex(newIndex);
      setPlanTitle(state.title);
      setCourseCount(state.courseCount);
      setTeamMembers(state.teamMembers);
      setSelections(state.selections);
      checkForChanges(
        state.title,
        state.courseCount,
        state.teamMembers,
        state.selections,
      );
    }
  };

  const handleRedo = () => {
    if (historyIndex < history.length - 1) {
      const newIndex = historyIndex + 1;
      const state = history[newIndex];
      setHistoryIndex(newIndex);
      setPlanTitle(state.title);
      setCourseCount(state.courseCount);
      setTeamMembers(state.teamMembers);
      setSelections(state.selections);
      checkForChanges(
        state.title,
        state.courseCount,
        state.teamMembers,
        state.selections,
      );
    }
  };

  const canUndo = historyIndex > 0;
  const canRedo = historyIndex < history.length - 1;

  const handleBackToWelcome = () => {
    if (hasChanges) {
      showConfirmationModal(
        () => onBackToWelcome(),
        "Unsaved Changes!",
        "We recommend downloading your current plan before continuing. Are you sure you want to leave?",
      );
    } else {
      onBackToWelcome();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header
        onBackToWelcome={handleBackToWelcome}
        planTitle={planTitle}
        onUpdateTitle={handleUpdateTitle}
        onUndo={handleUndo}
        onRedo={handleRedo}
        onDownload={handleDownload}
        canUndo={canUndo}
        canRedo={canRedo}
        total={total}
        onBudgetChange={handleBudgetChange}
      />

      <PlanScroller
        courseCount={courseCount}
        courses={courses}
        teamMembers={teamMembers}
        selections={selections}
        onCoursesLoad={handleCoursesLoad}
        onTeamMembersChange={handleTeamMembersChange}
        onSelectionsChange={handleSelectionsChange}
      />

      <div className="mt-16">
        <Footer />
      </div>

      <ConfirmationModal
        isOpen={showConfirmation}
        onClose={handleCancelAction}
        onConfirm={handleConfirmAction}
        title={confirmationTitle}
        message={confirmationMessage}
      />
    </div>
  );
};

export default PlanEditor;
