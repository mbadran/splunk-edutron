import React from "react";
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  ColumnResizeMode,
} from "@tanstack/react-table";
import { Clock, DollarSign, ExternalLink, FileText } from "lucide-react";
import { useAtom } from "jotai";
import { atomWithStorage } from "jotai/utils";
import BaseTable, {
  createColumnsFromConfig,
  ColumnConfig,
  ColumnSizeConfig,
} from "@/components/common/BaseTable";
import CatalogBase from "./CatalogBase";
import { Course } from "@/types/types";
import {
  COURSE_URL_TEMPLATE,
  CATEGORY_COLORS,
  MODE_COLORS,
  MODE_TOOLTIPS,
  DEFAULT_TABLE,
  DETAILS_URL_TEMPLATE,
} from "@/utils/constants";

interface CatalogTableProps {
  catalogId?: string; // Optional catalog ID to specify which catalog to display
  onScroll?: (scrollTop: number) => void;
}

// Jotai atoms for state management
const tableSortingAtom = atomWithStorage("catalog-table-sorting", []);

// Configuration constants - ONLY exclude fields that should never be displayed
const COLUMN_EXCEPTIONS = new Set<string>([
  "STEP_ID", // Use values but don't display as column - this is used for linking
  "Alias", // Use values but don't display as column - this is used for linking
]);

// Define column order - columns not in this list will be added at the end
const COLUMN_ORDER = [
  "ID",
  "Category",
  "Price",
  "Name",
  "PDF",
  "Mode",
  "Language",
  "Duration",
  "Product", // Add common columns that might appear
];

// Column size configuration
const COLUMN_SIZES: Record<string, ColumnSizeConfig> = {
  "#": {
    size: DEFAULT_TABLE.COLUMN_WIDTH.XSMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_XSMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_XSMALL,
  },
  ID: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_MEDIUM,
  },
  Category: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_LARGE,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
  },
  Mode: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
  },
  Language: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
  },
  Duration: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_LARGE,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
  },
  Price: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
  },
  Name: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.XXLARGE,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_XXLARGE,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_XXLARGE,
  },
  PDF: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
  },
  Product: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_MEDIUM,
  },
};

// Universal cell renderer function that handles all columns
const createUniversalCellRenderer = () => {
  const baseClassName = "h-12 flex items-center px-2";

  return (
    columnKey: string,
    value: unknown,
    course: Course,
    rowIndex: number,
  ) => {
    const cellId = `course-${columnKey.toLowerCase()}-${rowIndex}`;

    // Handle each column type with specific styling
    switch (columnKey) {
      case "ID":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <code className="text-sm font-mono text-gray-700 bg-gray-200 px-2 py-1 rounded whitespace-nowrap">
                {String(value)}
              </code>
            </div>
          </div>
        );

      case "Category":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <span
                className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${
                  CATEGORY_COLORS[String(value)] || "bg-gray-500 text-white"
                }`}
              >
                {String(value)}
              </span>
            </div>
          </div>
        );

      case "Mode":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <span
                className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${
                  MODE_COLORS[String(value)] || "bg-gray-100 text-gray-800"
                }`}
                title={MODE_TOOLTIPS[String(value)] || String(value)}
              >
                {String(value)}
              </span>
            </div>
          </div>
        );

      case "Language":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <span className="px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-blue-100 text-blue-800">
                {String(value)}
              </span>
            </div>
          </div>
        );

      case "Duration":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <div className="relative bg-yellow-100 px-2 py-1 rounded inline-block">
                <Clock className="absolute left-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-600 opacity-80" />
                <span className="text-sm font-medium text-gray-700 pl-4">
                  {String(value)}h
                </span>
              </div>
            </div>
          </div>
        );

      case "Price":
        const price = Number(value);
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              {price === 0 ? (
                <span className="text-gray-700 font-medium text-sm bg-green-200 px-2 py-1 rounded whitespace-nowrap">
                  Free
                </span>
              ) : (
                <div className="flex items-center text-gray-700 bg-pink-200 px-2 py-1 rounded">
                  <DollarSign className="w-3 h-3 mr-1" />
                  <span className="font-medium text-sm font-mono">
                    {price.toLocaleString("en-US")}
                  </span>
                </div>
              )}
            </div>
          </div>
        );

      case "Name":
        return (
          <div id={cellId}>
            <div
              className={`${baseClassName} justify-start`}
              style={{ minWidth: 0 }}
            >
              <div className="w-full min-w-0 overflow-hidden">
                {course.STEP_ID ? (
                  <a
                    href={COURSE_URL_TEMPLATE.replace(
                      "<STEP_ID>",
                      course.STEP_ID,
                    )}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0 w-full overflow-hidden"
                    title={String(value)}
                  >
                    <span className="truncate min-w-0 flex-1 overflow-hidden text-ellipsis whitespace-nowrap">
                      {String(value)}
                    </span>
                    <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
                  </a>
                ) : (
                  <span
                    className="font-medium text-gray-900 truncate block min-w-0 w-full overflow-hidden text-ellipsis whitespace-nowrap"
                    title={String(value)}
                  >
                    {String(value)}
                  </span>
                )}
              </div>
            </div>
          </div>
        );

      case "PDF":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-center`}>
              {course.Alias ? (
                <a
                  href={DETAILS_URL_TEMPLATE.replace(
                    "<COURSE_ALIAS>",
                    course.Alias,
                  )}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-red-600 hover:text-red-800 transition-colors p-1 rounded hover:bg-red-50"
                  title={`View PDF for ${course.Name || "course"}`}
                >
                  <FileText className="w-4 h-4" />
                </a>
              ) : (
                <span className="text-gray-400" title="PDF not available">
                  <FileText className="w-4 h-4" />
                </span>
              )}
            </div>
          </div>
        );

      case "Product":
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <span className="px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-purple-100 text-purple-800">
                {String(value)}
              </span>
            </div>
          </div>
        );

      // Default case for any unknown columns - this ensures all columns are rendered
      default:
        return (
          <div id={cellId}>
            <div className={`${baseClassName} justify-start`}>
              <span
                className="text-sm text-gray-700 truncate w-full overflow-hidden text-ellipsis whitespace-nowrap"
                title={String(value || "")}
              >
                {String(value || "")}
              </span>
            </div>
          </div>
        );
    }
  };
};

// Column configuration for Course data
const createCourseColumnConfig = (): ColumnConfig<Course> => {
  const universalCellRenderer = createUniversalCellRenderer();

  return {
    columnOrder: COLUMN_ORDER,
    columnExceptions: COLUMN_EXCEPTIONS,
    columnSizes: COLUMN_SIZES,
    // Use the universal renderer for ALL columns - this ensures every column gets rendered
    cellRenderers: {
      // We don't need to specify individual renderers anymore since the universal one handles all cases
      // But we'll keep this structure in case we need column-specific overrides later
    },
    // Set a default cell renderer that will be used for ALL columns
    defaultCellRenderer: universalCellRenderer,
    customAccessors: {
      // PDF column uses Alias for sorting/filtering instead of the column value
      PDF: (course) => course.Alias || "",
    },
    customSortingFns: {
      // PDF column sorting based on Alias
      PDF: (rowA, rowB) => {
        const aliasA = rowA.original.Alias || "";
        const aliasB = rowB.original.Alias || "";
        return aliasA.localeCompare(aliasB);
      },
    },
  };
};

// Separate component for the table logic to ensure hooks are called consistently
const CatalogTableInner: React.FC<{
  courses: Course[];
  isLoading: boolean;
  error: unknown;
  onScroll?: (scrollTop: number) => void;
}> = ({ courses, isLoading, error, onScroll }) => {
  const [sorting, setSorting] = useAtom(tableSortingAtom);

  // Create columns using BaseTable's configuration-driven approach
  const columnConfig = createCourseColumnConfig();
  const columns = createColumnsFromConfig(courses || [], columnConfig);

  const table = useReactTable({
    data: courses || [],
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
    onSortingChange: setSorting,
    columnResizeMode: "onChange" as ColumnResizeMode,
    enableColumnResizing: true,
    enableSorting: !isLoading && !error,
  });

  // Handle loading and error states AFTER all hooks are called
  if (isLoading || error) {
    return null; // CatalogBase handles loading and error states
  }

  return (
    <div id="catalog-table" className="h-full">
      <BaseTable
        table={table}
        onScroll={onScroll}
        headerClassName="bg-slate-800"
        rowHeight={48}
        emptyStateMessage="No courses available"
        loadingState={false}
      />
    </div>
  );
};

const CatalogTable: React.FC<CatalogTableProps> = ({ catalogId, onScroll }) => {
  return (
    <div id="catalog-table-container" className="h-full">
      <CatalogBase catalogId={catalogId}>
        {({ courses, isLoading, error }) => (
          <CatalogTableInner
            courses={courses}
            isLoading={isLoading}
            error={error}
            onScroll={onScroll}
          />
        )}
      </CatalogBase>
    </div>
  );
};

export default CatalogTable;