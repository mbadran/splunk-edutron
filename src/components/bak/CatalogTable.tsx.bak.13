import React from "react";
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  ColumnResizeMode,
  ColumnDef,
} from "@tanstack/react-table";
import { Clock, DollarSign, ExternalLink, FileText } from "lucide-react";
import { useAtom } from "jotai";
import { atomWithStorage } from "jotai/utils";
import BaseTable2, {
  createCatalogColumn,
  createRowNumberColumn,
} from "@/components/common/BaseTable2";
import CatalogBase from "./CatalogBase";
import { Course } from "@/types/types";
import {
  COURSE_URL_TEMPLATE,
  CATEGORY_COLORS,
  MODE_COLORS,
  MODE_TOOLTIPS,
  DETAILS_URL_TEMPLATE,
} from "@/utils/constants";

interface CatalogTableProps {
  catalogId?: string;
  onScroll?: (scrollTop: number) => void;
}

// Jotai atoms for state management
const tableSortingAtom = atomWithStorage("catalog-table-sorting", []);

// Custom catalog cell renderers using TanStack's native getValue()
const createIDCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <code className="text-sm font-mono bg-gray-200 px-3 py-1 rounded-full whitespace-nowrap text-gray-700">
      {String(getValue())}
    </code>
  </div>
);

const createCategoryCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <span
      className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap ${
        CATEGORY_COLORS[String(getValue())] || "bg-gray-500 text-white"
      }`}
    >
      {String(getValue())}
    </span>
  </div>
);

const createModeCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <span
      className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${
        MODE_COLORS[String(getValue())] || "bg-gray-100 text-gray-800"
      }`}
      title={MODE_TOOLTIPS[String(getValue())] || String(getValue())}
    >
      {String(getValue())}
    </span>
  </div>
);

const createLanguageCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <span className="px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-violet-100 text-violet-700">
      {String(getValue())}
    </span>
  </div>
);

const createDurationCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <div className="bg-yellow-100 px-3 py-1 rounded-full inline-flex items-center">
      <Clock className="w-3 h-3 text-gray-600 opacity-80 mr-1" />
      <span className="text-sm font-medium text-gray-700">
        {String(getValue())}h
      </span>
    </div>
  </div>
);

const createPriceCell = ({ getValue }: any) => {
  const price = Number(getValue());
  return (
    <div className="h-12 flex items-center px-2 justify-start">
      {price === 0 ? (
        <span className="text-gray-700 font-medium text-sm bg-green-200 px-3 py-1 rounded-full whitespace-nowrap">
          Free
        </span>
      ) : (
        <div className="flex items-center text-gray-700 bg-pink-200 px-3 py-1 rounded-full">
          <DollarSign className="w-3 h-3 mr-1" />
          <span className="font-medium text-sm font-mono">
            {price.toLocaleString("en-US")}
          </span>
        </div>
      )}
    </div>
  );
};

const createNameCell = ({ getValue, row }: any) => {
  const course = row.original;
  return (
    <div className="h-12 flex items-center px-2 justify-start" style={{ minWidth: 0 }}>
      <div className="w-full min-w-0 overflow-hidden">
        {course.STEP_ID ? (
          <a
            href={COURSE_URL_TEMPLATE.replace("<STEP_ID>", course.STEP_ID)}
            target="_blank"
            rel="noopener noreferrer"
            className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0 w-full overflow-hidden"
            title={String(getValue())}
          >
            <span className="truncate min-w-0 flex-1 overflow-hidden text-ellipsis whitespace-nowrap">
              {String(getValue())}
            </span>
            <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
          </a>
        ) : (
          <span
            className="font-medium text-gray-900 truncate block min-w-0 w-full overflow-hidden text-ellipsis whitespace-nowrap"
            title={String(getValue())}
          >
            {String(getValue())}
          </span>
        )}
      </div>
    </div>
  );
};

const createPDFCell = ({ getValue, row }: any) => {
  const course = row.original;
  return (
    <div className="h-12 flex items-center px-2 justify-center">
      {course.Alias ? (
        <a
          href={DETAILS_URL_TEMPLATE.replace("<COURSE_ALIAS>", course.Alias)}
          target="_blank"
          rel="noopener noreferrer"
          className="text-red-600 hover:text-red-800 transition-colors p-1 rounded hover:bg-red-50"
          title={`View PDF for ${course.Name || "course"}`}
        >
          <FileText className="w-4 h-4" />
        </a>
      ) : (
        <span className="text-gray-400" title="PDF not available">
          <FileText className="w-4 h-4" />
        </span>
      )}
    </div>
  );
};

// Create columns using new createCatalogColumn utility
const createCourseColumns = (): ColumnDef<Course>[] => {
  return [
    // Row number column
    createRowNumberColumn<Course>({
      size: 60,
      minSize: 40,
      maxSize: 80,
      headerClassName: "text-sm font-semibold text-white",
      cellClassName: "px-2 py-1",
    }),
    
    // Course data columns
    createCatalogColumn<Course>("ID", {
      header: "ID",
      size: 120,
      minSize: 80,
      maxSize: 150,
      cell: createIDCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("Category", {
      header: "Category",
      size: 120,
      minSize: 100,
      maxSize: 200,
      cell: createCategoryCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("Price", {
      header: "Price",
      size: 120,
      minSize: 80,
      maxSize: 150,
      cell: createPriceCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("Name", {
      header: "Course",
      size: 350,
      minSize: 200,
      maxSize: 500,
      cell: createNameCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("PDF", {
      header: "PDF",
      size: 80,
      minSize: 60,
      maxSize: 100,
      cell: createPDFCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("Mode", {
      header: "Mode",
      size: 80,
      minSize: 60,
      maxSize: 120,
      cell: createModeCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("Language", {
      header: "Language",
      size: 80,
      minSize: 60,
      maxSize: 120,
      cell: createLanguageCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
    
    createCatalogColumn<Course>("Duration", {
      header: "Duration",
      size: 80,
      minSize: 60,
      maxSize: 120,
      cell: createDurationCell,
      headerClassName: "text-sm font-semibold text-white",
    }),
  ];
};

// Inner table component
const CatalogTableInner: React.FC<{
  courses: Course[];
  isLoading: boolean;
  error: unknown;
  onScroll?: (scrollTop: number) => void;
}> = ({ courses, isLoading, error, onScroll }) => {
  const [sorting, setSorting] = useAtom(tableSortingAtom);

  // Create columns using new utility
  const columns = createCourseColumns();

  const table = useReactTable({
    data: courses || [],
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
    onSortingChange: setSorting,
    columnResizeMode: "onChange" as ColumnResizeMode,
    enableColumnResizing: true,
    enableSorting: !isLoading && !error,
  });

  // Handle loading and error states
  if (isLoading || error) {
    return null; // CatalogBase handles these states
  }

  // Calculate footer message
  const totalCourses = courses.length;
  const footerMessage = `**${totalCourses}** courses total.`;

  return (
    <div className="h-full">
      <BaseTable2
        table={table}
        onScroll={onScroll}
        containerHeight="100%"
        headerClassName="bg-gray-600 border-b border-gray-500"
        bodyClassName="divide-y divide-gray-200"
        rowClassName="hover:bg-orange-50 transition-colors"
        cellClassName="border-r border-gray-200 last:border-r-0"
        emptyStateMessage="No courses available"
        loadingState={false}
        footerMessage={footerMessage}
      />
    </div>
  );
};

const CatalogTable: React.FC<CatalogTableProps> = ({ catalogId, onScroll }) => {
  return (
    <div className="h-full">
      <CatalogBase catalogId={catalogId}>
        {({ courses, isLoading, error }) => (
          <CatalogTableInner
            courses={courses}
            isLoading={isLoading}
            error={error}
            onScroll={onScroll}
          />
        )}
      </CatalogBase>
    </div>
  );
};

export default CatalogTable;