import React, { useState, useEffect } from 'react';
import { Clock, DollarSign, ExternalLink } from 'lucide-react';
import CatalogControls from './CatalogControls';
import CatalogInsights from './CatalogInsights';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface CatalogProps {
  onCoursesLoaded?: (courses: Course[]) => void;
  onLoadingChange?: (loading: boolean) => void;
  onError?: (error: string | null) => void;
}

const loadCoursesFromCSV = async () => {
  try {
    const response = await fetch('/catalog.csv');
    if (!response.ok) {
      throw new Error(`Failed to load catalog.csv: ${response.status}`);
    }
    const text = await response.text();
    
    const lines = text.split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
    
    const courses = [];
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      const values = line.split(',').map(v => v.trim());
      if (values.length < headers.length) continue;
      
      const course = {};
      headers.forEach((header, index) => {
        let value = values[index] || '';
        
        if (header === 'Duration' || header === 'Price') {
          value = parseFloat(value) || 0;
        } else if (header === 'STEP ID') {
          course['STEP_ID'] = value;
          return;
        }
        
        course[header] = value;
      });
      
      if (course.ID && course.Name) {
        courses.push(course);
      }
    }
    
    return courses;
  } catch (error) {
    console.error('Error loading course catalog:', error);
    return [];
  }
};

const Catalog = ({ onCoursesLoaded, onLoadingChange, onError }: CatalogProps) => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadCourses = async () => {
      setIsLoading(true);
      onLoadingChange?.(true);
      onError?.(null);
      
      try {
        const loadedCourses = await loadCoursesFromCSV();
        if (loadedCourses.length === 0) {
          throw new Error('No courses found in catalog.csv');
        }
        setCourses(loadedCourses);
        onCoursesLoaded?.(loadedCourses);
      } catch (err) {
        const errorMessage = `Failed to load courses: ${err.message}`;
        onError?.(errorMessage);
      } finally {
        setIsLoading(false);
        onLoadingChange?.(false);
      }
    };

    loadCourses();
  }, [onCoursesLoaded, onLoadingChange, onError]);

  const generateCourseUrl = (stepId: string) => {
    if (!stepId) return '#';
    return `https://education.splunk.com/Saba/Web_spf/NA10P2PRD105/guestapp/ledetail/${stepId}?utm_source=splunk-edutron`;
  };

  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      'Core': 'bg-orange-500 text-white',
      'Power User': 'bg-blue-500 text-white',
      'Admin': 'bg-green-500 text-white',
      'Security': 'bg-red-500 text-white',
      'ITSI': 'bg-purple-500 text-white'
    };
    return colors[category] || 'bg-gray-500 text-white';
  };

  const getModeColor = (mode: string) => {
    const colors: Record<string, string> = {
      'E': 'bg-green-100 text-green-800',
      'EL': 'bg-orange-100 text-orange-800',
      'ILT': 'bg-blue-100 text-blue-800'
    };
    return colors[mode] || 'bg-gray-100 text-gray-800';
  };

  const getModeTooltip = (mode: string) => {
    const tooltips: Record<string, string> = {
      'E': 'eLearning (No Labs)',
      'EL': 'eLearning (With Labs)', 
      'ILT': 'Instructor-Led Training'
    };
    return tooltips[mode] || mode;
  };

  if (isLoading) {
    return (
      <div className="flex-shrink-0 w-1/2 min-w-[600px] max-w-[800px] border-r-2 border-gray-300 overflow-auto flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading course catalog...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-shrink-0 w-1/2 min-w-[600px] max-w-[800px] border-r-2 border-gray-300 overflow-auto">
      <CatalogControls />
      
      <table className="w-full">
        <thead>
          <tr className="bg-gradient-to-r from-orange-500 to-pink-500 text-white sticky top-0 z-10">
            <th className="px-4 py-3 text-left font-semibold w-40">ID</th>
            <th className="px-4 py-3 text-left font-semibold min-w-[250px]">Course</th>
            <th className="px-4 py-3 text-left font-semibold min-w-[100px]">Category</th>
            <th className="px-4 py-3 text-left font-semibold w-20">Duration</th>
            <th className="px-4 py-3 text-center font-semibold w-16">Mode</th>
            <th className="px-4 py-3 text-right font-semibold w-20">Price</th>
          </tr>
        </thead>
        <tbody>
          {courses.map((course, index) => (
            <tr key={course.ID} className={`h-12 border-b border-gray-200 ${
              index % 2 === 0 ? 'bg-white' : 'bg-gray-50'
            } hover:bg-orange-50 transition-colors`}>
              <td className="px-4 py-2">
                <code className="text-sm font-mono text-gray-700 bg-gray-100 px-2 py-1 rounded">
                  {course.ID}
                </code>
              </td>
              <td className="px-4 py-2">
                {course.STEP_ID ? (
                  <a 
                    href={generateCourseUrl(course.STEP_ID)}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group"
                  >
                    {course.Name}
                    <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity" />
                  </a>
                ) : (
                  <span className="font-medium text-gray-900">{course.Name}</span>
                )}
              </td>
              <td className="px-4 py-2">
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(course.Category)}`}>
                  {course.Category}
                </span>
              </td>
              <td className="px-4 py-2 text-left">
                <div className="flex items-center gap-1" title="Hours">
                  <Clock className="w-3 h-3 text-gray-500" />
                  <span className="text-sm font-medium text-gray-900">{course.Duration}</span>
                </div>
              </td>
              <td className="px-4 py-2 text-center">
                <span 
                  className={`px-2 py-1 rounded text-xs font-medium ${getModeColor(course.Mode)} cursor-help`}
                  title={getModeTooltip(course.Mode)}
                >
                  {course.Mode}
                </span>
              </td>
              <td className="px-4 py-2 text-right">
                <div className="flex items-center justify-end gap-1">
                  {course.Price === 0 ? (
                    <span className="text-green-600 font-normal text-sm bg-green-50 px-2 py-1 rounded">Free</span>
                  ) : (
                    <>
                      <DollarSign className="w-3 h-3 text-gray-500" />
                      <span className="font-semibold text-sm text-gray-900">{course.Price.toLocaleString()}</span>
                    </>
                  )}
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      
      <CatalogInsights />
    </div>
  );
};

export default Catalog;