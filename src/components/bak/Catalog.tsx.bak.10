import React, { useState, useEffect } from 'react';
import { Clock, DollarSign, ExternalLink, GraduationCap } from 'lucide-react';
import CatalogControls from './CatalogControls';
import CatalogInsights from './CatalogInsights';
import Footer from './Footer';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface CatalogProps {
  onBackToWelcome?: () => void;
}

/**
 * Loads course data from the CSV file and parses it into Course objects
 */
const loadCoursesFromCSV = async (): Promise<Course[]> => {
  try {
    const response = await fetch('/catalog.csv');
    if (!response.ok) {
      throw new Error(`Failed to load catalog.csv: ${response.status}`);
    }
    const text = await response.text();
    
    const lines = text.split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
    
    const courses: Course[] = [];
    
    // Parse each line of the CSV
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      const values = line.split(',').map(v => v.trim());
      if (values.length < headers.length) continue;
      
      const course: any = {};
      
      // Map each header to its corresponding value
      headers.forEach((header, index) => {
        let value = values[index] || '';
        
        // Parse numeric fields
        if (header === 'Duration' || header === 'Price') {
          value = parseFloat(value) || 0;
        } else if (header === 'STEP ID') {
          // Handle the special case of STEP ID with space
          course['STEP_ID'] = value;
          return;
        }
        
        course[header] = value;
      });
      
      // Only add courses with required fields
      if (course.ID && course.Name) {
        courses.push(course as Course);
      }
    }
    
    return courses;
  } catch (error) {
    console.error('Error loading course catalog:', error);
    throw error;
  }
};

const Catalog: React.FC<CatalogProps> = ({ onBackToWelcome }) => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load courses when component mounts
  useEffect(() => {
    let isMounted = true;

    const loadCourses = async () => {
      setIsLoading(true);
      setError(null);
      
      try {
        const loadedCourses = await loadCoursesFromCSV();
        
        if (!isMounted) return;
        
        if (loadedCourses.length === 0) {
          throw new Error('No courses found in catalog.csv');
        }
        
        setCourses(loadedCourses);
        
      } catch (err) {
        if (!isMounted) return;
        
        const errorMessage = `Failed to load catalog: ${(err as Error).message}`;
        setError(errorMessage);
        
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };

    loadCourses();

    return () => {
      isMounted = false;
    };
  }, []);

  /**
   * Generates a URL for accessing the course details on Splunk Education platform
   */
  const generateCourseUrl = (stepId: string): string => {
    if (!stepId) return '#';
    return `https://education.splunk.com/Saba/Web_spf/NA10P2PRD105/guestapp/ledetail/${stepId}?utm_source=splunk-edutron`;
  };

  /**
   * Returns appropriate CSS classes for category badges
   */
  const getCategoryColor = (category: string): string => {
    const colors: Record<string, string> = {
      'Core': 'bg-orange-500 text-white',
      'Power User': 'bg-blue-500 text-white',
      'Admin': 'bg-green-500 text-white',
      'Security': 'bg-red-500 text-white',
      'ITSI': 'bg-purple-500 text-white',
      'Platform': 'bg-indigo-500 text-white',
      'Observability': 'bg-teal-500 text-white',
      'Cloud': 'bg-cyan-500 text-white'
    };
    return colors[category] || 'bg-gray-500 text-white';
  };

  /**
   * Returns appropriate CSS classes for mode badges
   */
  const getModeColor = (mode: string): string => {
    const colors: Record<string, string> = {
      'E': 'bg-green-100 text-green-800',
      'EL': 'bg-orange-100 text-orange-800',
      'ILT': 'bg-blue-100 text-blue-800'
    };
    return colors[mode] || 'bg-gray-100 text-gray-800';
  };

  /**
   * Returns tooltip text explaining the course mode abbreviation
   */
  const getModeTooltip = (mode: string): string => {
    const tooltips: Record<string, string> = {
      'E': 'eLearning (No Labs)',
      'EL': 'eLearning (With Labs)', 
      'ILT': 'Instructor-Led Training'
    };
    return tooltips[mode] || mode;
  };

  /**
   * Formats price with consistent spacing for alignment
   */
  const formatPrice = (price: number): string => {
    if (price === 0) return '';
    return price.toLocaleString().padStart(5, ' ');
  };

  const handleRetry = () => {
    setError(null);
    setIsLoading(true);
    
    const loadCourses = async () => {
      try {
        const loadedCourses = await loadCoursesFromCSV();
        
        if (loadedCourses.length === 0) {
          throw new Error('No courses found in catalog.csv');
        }
        
        setCourses(loadedCourses);
        
      } catch (err) {
        const errorMessage = `Failed to load catalog: ${(err as Error).message}`;
        setError(errorMessage);
      } finally {
        setIsLoading(false);
      }
    };

    loadCourses();
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="flex-shrink-0 w-1/2 min-w-[600px] max-w-[800px] border-r-2 border-gray-300 overflow-auto flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading course catalog...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-800 via-slate-700 to-blue-900 flex items-center justify-center p-4 relative">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
              <GraduationCap className="w-8 h-8 text-white" />
            </div>
            <div className="text-red-400 mb-4 text-2xl">⚠️ Error</div>
            <p className="text-white mb-4">{error}</p>
            <p className="text-white/70 text-sm mb-6">
              Make sure catalog.csv is in your /public directory
            </p>
            <div className="space-y-3">
              <button 
                onClick={handleRetry}
                className="w-full bg-white text-gray-800 hover:bg-gray-50 font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                Retry Loading
              </button>
              {onBackToWelcome && (
                <button 
                  onClick={onBackToWelcome}
                  className="w-full bg-transparent border-2 border-white text-white hover:bg-white hover:text-gray-800 font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  Back to Home
                </button>
              )}
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  // Main render - catalog table with horizontal scroll
  return (
    <div className="flex-shrink-0 w-1/2 min-w-[600px] max-w-[800px] border-r-2 border-gray-300">
      <CatalogControls />
      
      <div className="overflow-x-auto">
        <table className="w-full min-w-[900px]">
          <thead>
            <tr className="bg-gradient-to-r from-orange-500 to-pink-500 text-white sticky top-0 z-10">
              <th className="px-4 py-3 text-left font-semibold w-48">ID</th>
              <th className="px-4 py-3 text-left font-semibold w-80">Course</th>
              <th className="px-4 py-3 text-left font-semibold w-32">Category</th>
              <th className="px-4 py-3 text-left font-semibold w-24">Duration</th>
              <th className="px-4 py-3 text-center font-semibold w-20">Mode</th>
              <th className="px-4 py-3 text-right font-semibold w-24">Price</th>
            </tr>
          </thead>
          <tbody>
            {courses.map((course, index) => (
              <tr 
                key={course.ID} 
                className={`h-12 border-b border-gray-200 ${
                  index % 2 === 0 ? 'bg-white' : 'bg-gray-50'
                } hover:bg-orange-50 transition-colors`}
              >
                <td className="px-4 py-2">
                  <code className="text-sm font-mono text-gray-700 bg-gray-100 px-2 py-1 rounded">
                    {course.ID}
                  </code>
                </td>
                
                <td className="px-4 py-2">
                  <div className="w-80 truncate">
                    {course.STEP_ID ? (
                      <a 
                        href={generateCourseUrl(course.STEP_ID)}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group"
                        title={course.Name}
                      >
                        <span className="truncate">{course.Name}</span>
                        <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
                      </a>
                    ) : (
                      <span className="font-medium text-gray-900 truncate block" title={course.Name}>
                        {course.Name}
                      </span>
                    )}
                  </div>
                </td>
                
                <td className="px-4 py-2">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(course.Category)}`}>
                    {course.Category}
                  </span>
                </td>
                
                <td className="px-4 py-2 text-left">
                  <div className="flex items-center gap-1 bg-blue-50 text-blue-800 px-2 py-1 rounded">
                    <Clock className="w-3 h-3" />
                    <span className="text-sm font-medium">{course.Duration}</span>
                  </div>
                </td>
                
                <td className="px-4 py-2 text-center">
                  <span 
                    className={`px-2 py-1 rounded text-xs font-medium ${getModeColor(course.Mode)} cursor-help`}
                    title={getModeTooltip(course.Mode)}
                  >
                    {course.Mode}
                  </span>
                </td>
                
                <td className="px-4 py-2 text-right">
                  <div className="flex items-center justify-end">
                    {course.Price === 0 ? (
                      <span className="text-green-800 font-medium text-sm bg-green-100 px-2 py-1 rounded">
                        Free
                      </span>
                    ) : (
                      <div className="flex items-center bg-red-50 text-red-700 px-2 py-1 rounded">
                        <DollarSign className="w-3 h-3" />
                        <span className="font-medium text-sm font-mono">
                          {formatPrice(course.Price)}
                        </span>
                      </div>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <CatalogInsights courses={courses} />
    </div>
  );
};

export default Catalog;