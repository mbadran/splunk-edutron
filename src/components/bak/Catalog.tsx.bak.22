import React, { useState, useEffect, useCallback } from 'react';
import { Clock, DollarSign, ExternalLink, GraduationCap } from 'lucide-react';
import Papa from 'papaparse';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface CatalogProps {
  onCoursesLoad?: (count: number, courses: Course[]) => void;
}

const loadCoursesFromCSV = async (): Promise<Course[]> => {
  try {
    const response = await fetch('/catalog.csv');
    if (!response.ok) {
      throw new Error(`Failed to load catalog.csv: ${response.status}`);
    }
    const text = await response.text();
    
    return new Promise((resolve, reject) => {
      Papa.parse(text, {
        header: true,
        skipEmptyLines: true,
        dynamicTyping: true,
        trimHeaders: true,
        transform: (value, header) => {
          // Trim whitespace from all values
          if (typeof value === 'string') {
            return value.trim();
          }
          return value;
        },
        complete: (results) => {
          try {
            const courses: Course[] = [];
            
            for (const row of results.data as any[]) {
              // Handle STEP ID mapping
              if (row['STEP ID']) {
                row.STEP_ID = row['STEP ID'];
                delete row['STEP ID'];
              }
              
              // Ensure required fields exist and have values
              if (row.ID && row.Name) {
                // Ensure Duration and Price are numbers
                const course: Course = {
                  ID: String(row.ID || ''),
                  Name: String(row.Name || ''),
                  Category: String(row.Category || ''),
                  Duration: Number(row.Duration) || 0,
                  Mode: String(row.Mode || ''),
                  Price: Number(row.Price) || 0,
                  STEP_ID: row.STEP_ID ? String(row.STEP_ID) : undefined
                };
                
                courses.push(course);
              }
            }
            
            if (courses.length === 0) {
              reject(new Error('No valid courses found in catalog.csv'));
            } else {
              resolve(courses);
            }
          } catch (error) {
            reject(error);
          }
        },
        error: (error) => {
          reject(new Error(`CSV parsing error: ${error.message}`));
        }
      });
    });
  } catch (error) {
    console.error('Error loading course catalog:', error);
    throw error;
  }
};

const Catalog: React.FC<CatalogProps> = ({ onCoursesLoad }) => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fix infinite reloading by removing onCoursesLoad from dependencies
  const loadCourses = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const loadedCourses = await loadCoursesFromCSV();
      
      if (loadedCourses.length === 0) {
        throw new Error('No courses found in catalog.csv');
      }
      
      // Sort courses alphabetically by name
      const sortedCourses = loadedCourses.sort((a, b) => a.Name.localeCompare(b.Name));
      
      setCourses(sortedCourses);
      // Call onCoursesLoad without making it a dependency
      if (onCoursesLoad) {
        onCoursesLoad(sortedCourses.length, sortedCourses);
      }
      
    } catch (err) {
      const errorMessage = `Failed to load catalog: ${(err as Error).message}`;
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, []); // Remove onCoursesLoad from dependencies to prevent infinite loop

  useEffect(() => {
    loadCourses();
  }, [loadCourses]);

  const generateCourseUrl = (stepId: string): string => {
    if (!stepId) return '#';
    return `https://education.splunk.com/Saba/Web_spf/NA10P2PRD105/guestapp/ledetail/${stepId}?utm_source=splunk-edutron`;
  };

  const getCategoryColor = (category: string): string => {
    const colors: Record<string, string> = {
      'Core': 'bg-orange-500 text-white',
      'Power User': 'bg-blue-500 text-white',
      'Admin': 'bg-green-500 text-white',
      'Security': 'bg-red-500 text-white',
      'ITSI': 'bg-purple-500 text-white',
      'Platform': 'bg-indigo-500 text-white',
      'Observability': 'bg-teal-500 text-white',
      'Cloud': 'bg-cyan-500 text-white'
    };
    return colors[category] || 'bg-gray-500 text-white';
  };

  const getModeColor = (mode: string): string => {
    const colors: Record<string, string> = {
      'E': 'bg-blue-100 text-blue-800',
      'EL': 'bg-purple-100 text-purple-800',
      'ILT': 'bg-green-100 text-green-800'
    };
    return colors[mode] || 'bg-gray-100 text-gray-800';
  };

  const getModeTooltip = (mode: string): string => {
    const tooltips: Record<string, string> = {
      'E': 'eLearning (No Labs)',
      'EL': 'eLearning (With Labs)', 
      'ILT': 'Instructor-Led Training'
    };
    return tooltips[mode] || mode;
  };

  const formatPrice = (price: number): string => {
    return price.toLocaleString();
  };

  const handleRetry = () => {
    loadCourses();
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading course catalog...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-full p-4">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
              <GraduationCap className="w-8 h-8 text-gray-600" />
            </div>
            <div className="text-red-400 mb-4 text-2xl">⚠️ Error</div>
            <p className="text-gray-600 mb-4">{error}</p>
            <p className="text-gray-500 text-sm mb-6">
              Make sure catalog.csv is in your /public directory
            </p>
            <div className="space-y-3">
              <button 
                onClick={handleRetry}
                className="w-full bg-orange-500 text-white hover:bg-orange-600 font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                Retry Loading
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-hidden relative">
        <div className="h-full overflow-y-auto">
          <table className="w-full min-w-[900px]">
            <thead className="sticky top-0 z-50 bg-slate-800 shadow-lg">
              <tr>
                <th className="px-4 py-3 text-left font-semibold bg-slate-800 text-white border-r border-slate-700" style={{width: '120px', minWidth: '120px'}}>ID</th>
                <th className="px-4 py-3 text-left font-semibold bg-slate-800 text-white border-r border-slate-700" style={{width: '120px', minWidth: '120px'}}>Category</th>
                <th className="px-4 py-3 text-center font-semibold bg-slate-800 text-white border-r border-slate-700" style={{width: '80px', minWidth: '80px'}}>Mode</th>
                <th className="px-4 py-3 text-left font-semibold bg-slate-800 text-white border-r border-slate-700" style={{width: '120px', minWidth: '120px'}}>Duration</th>
                <th className="px-4 py-3 text-left font-semibold bg-slate-800 text-white border-r border-slate-700" style={{width: '100px', minWidth: '100px'}}>Price</th>
                <th className="px-4 py-3 text-left font-semibold bg-slate-800 text-white" style={{width: '350px', minWidth: '350px'}}>Course</th>
              </tr>
            </thead>
            <tbody>
              {courses.map((course, index) => (
                <tr 
                  key={course.ID} 
                  className={`h-12 border-b border-gray-200 ${
                    index % 2 === 0 ? 'bg-white' : 'bg-gray-50'
                  } hover:bg-orange-50 transition-colors`}
                >
                  <td className="px-4 py-2" style={{width: '120px', minWidth: '120px'}}>
                    <code className="text-sm font-mono text-gray-700 bg-gray-200 px-2 py-1 rounded whitespace-nowrap">
                      {course.ID}
                    </code>
                  </td>
                  
                  <td className="px-4 py-2" style={{width: '120px', minWidth: '120px'}}>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${getCategoryColor(course.Category)}`}>
                      {course.Category}
                    </span>
                  </td>
                  
                  <td className="px-4 py-2 text-center" style={{width: '80px', minWidth: '80px'}}>
                    <span 
                      className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${getModeColor(course.Mode)}`}
                      title={getModeTooltip(course.Mode)}
                    >
                      {course.Mode}
                    </span>
                  </td>
                  
                  <td className="px-4 py-2 text-left relative" style={{width: '120px', minWidth: '120px'}}>
                    <div className="relative bg-yellow-100 px-2 py-1 rounded inline-block">
                      <Clock className="absolute left-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-600 opacity-80" />
                      <span className="text-sm font-medium text-gray-700 pl-4">
                        {course.Duration}
                      </span>
                    </div>
                  </td>
                  
                  <td className="px-4 py-2 text-left" style={{width: '100px', minWidth: '100px'}}>
                    <div className="flex items-center">
                      {course.Price === 0 ? (
                        <span className="text-gray-700 font-medium text-sm bg-green-200 px-2 py-1 rounded whitespace-nowrap">
                          Free
                        </span>
                      ) : (
                        <div className="flex items-center text-gray-700 bg-pink-200 px-2 py-1 rounded">
                          <DollarSign className="w-3 h-3 mr-1" />
                          <span className="font-medium text-sm font-mono">
                            {formatPrice(course.Price)}
                          </span>
                        </div>
                      )}
                    </div>
                  </td>
                  
                  <td className="px-4 py-2" style={{width: '350px', minWidth: '350px'}}>
                    <div className="whitespace-nowrap overflow-hidden">
                      {course.STEP_ID ? (
                        <a 
                          href={generateCourseUrl(course.STEP_ID)}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group"
                          title={course.Name}
                        >
                          <span className="truncate">{course.Name}</span>
                          <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
                        </a>
                      ) : (
                        <span className="font-medium text-gray-900 truncate block" title={course.Name}>
                          {course.Name}
                        </span>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Catalog;