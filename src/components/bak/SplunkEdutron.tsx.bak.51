import React, { useState, useEffect } from "react";
import WelcomeScreen from "./WelcomeScreen";
import PlanEditor from "./PlanEditor";

const SplunkEdutron: React.FC = () => {
  const [currentView, setCurrentView] = useState("welcome");
  const [hasExistingPlan, setHasExistingPlan] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const hash = window.location.hash;
      if (hash === "#edit") {
        setCurrentView("edit");
      }
    }
  }, []);

  const handleCreatePlan = () => {
    setCurrentView("edit");
    setHasExistingPlan(false);
    if (typeof window !== "undefined") {
      window.history.pushState({ view: "edit" }, "", "#edit");
    }
  };

  const handleLoadPlan = () => {
    alert("Coming soon!");
  };

  const handleBackToWelcome = () => {
    setCurrentView("welcome");
    setHasExistingPlan(false);
    if (typeof window !== "undefined") {
      window.history.pushState({ view: "welcome" }, "", "/");
    }
  };

  useEffect(() => {
    const handlePopState = (event: PopStateEvent) => {
      if (event.state?.view) {
        setCurrentView(event.state.view);
      } else {
        setCurrentView("welcome");
      }
    };

    if (typeof window !== "undefined") {
      window.addEventListener("popstate", handlePopState);
    }

    return () => {
      if (typeof window !== "undefined") {
        window.removeEventListener("popstate", handlePopState);
      }
    };
  }, []);

  useEffect(() => {
    if (typeof document !== "undefined") {
      const style = document.createElement("style");
      style.textContent = `
        a:hover {
          cursor: pointer;
        }
      `;
      document.head.appendChild(style);

      return () => {
        if (document.head.contains(style)) {
          document.head.removeChild(style);
        }
      };
    }
  }, []);

  if (currentView === "edit") {
    return (
      <PlanEditor
        onBackToWelcome={handleBackToWelcome}
        hasExistingPlan={hasExistingPlan}
      />
    );
  }

  return (
    <WelcomeScreen
      onCreatePlan={handleCreatePlan}
      onLoadPlan={handleLoadPlan}
    />
  );
};

export default SplunkEdutron;
