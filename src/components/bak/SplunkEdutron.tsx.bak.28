import React, { useState, useEffect, useRef } from 'react';
import { ExternalLink, PenTool, Monitor, Users, GraduationCap } from 'lucide-react';
import Header from './Header';
import Catalog from './Catalog';
import Team from './Team';
import Footer from './Footer';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

const ConfirmationModal = ({ isOpen, onClose, onConfirm, title, message }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-2xl p-8 max-w-md mx-4 shadow-2xl">
        <h3 className="text-xl font-bold text-gray-800 mb-4">{title}</h3>
        <p className="text-gray-600 mb-6">{message}</p>
        <div className="flex gap-4">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="flex-1 bg-gradient-to-r from-orange-500 to-pink-500 text-white py-2 px-4 rounded-lg hover:from-orange-600 hover:to-pink-600 transition-colors"
          >
            Continue
          </button>
        </div>
      </div>
    </div>
  );
};

const WelcomeScreen = ({ onCreatePlan, onLoadPlan }) => {
  return (
    <div 
      className="min-h-screen flex items-center justify-center p-4 relative"
      style={{
        backgroundImage: 'url(/img/luis-tosta-COAbFWdOf5s-unsplash.jpg)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat'
      }}
    >
      <div className="max-w-2xl mx-auto text-center">
        <div className="bg-gradient-to-br from-slate-800/90 via-slate-700/90 to-blue-900/90 backdrop-blur-md rounded-3xl p-12 shadow-2xl border border-white/20">
          <div className="mb-8">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
              <GraduationCap className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-4 tracking-tight">
              Splunk <span className="bg-gradient-to-r from-orange-500 to-pink-500 bg-clip-text text-transparent">EDUTRON</span>
            </h1>
            <p className="text-lg text-white/90 font-light mb-2">
              <em>The Missing Splunk EDU Training Planner</em>
            </p>
          </div>

          <div className="space-y-4 mb-8">
            <button 
              onClick={onCreatePlan}
              className="w-full bg-white text-gray-800 hover:bg-gray-50 font-semibold py-4 px-8 rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg flex items-center justify-center gap-3"
            >
              <PenTool className="w-5 h-5" />
              Create Training Plan
            </button>
            
            <button 
              onClick={onLoadPlan}
              className="w-full bg-transparent border-2 border-white text-white hover:bg-white hover:text-gray-800 font-semibold py-4 px-8 rounded-xl transition-all duration-200 transform hover:scale-105 flex items-center justify-center gap-3"
            >
              <ExternalLink className="w-5 h-5" />
              Upload Existing Plan
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-white/80">
            <div className="flex items-center gap-2">
              <Monitor className="w-4 h-4" />
              <span>Interactive Planning</span>
            </div>
            <div className="flex items-center gap-2">
              <Users className="w-4 h-4" />
              <span>Team Support</span>
            </div>
            <div className="flex items-center gap-2">
              <ExternalLink className="w-4 h-4" />
              <span>STEP Integration</span>
            </div>
          </div>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

const PlanScroller = ({ courses, onCoursesLoad }) => {
  const [isResizing, setIsResizing] = useState(false);
  const [leftWidth, setLeftWidth] = useState(50);
  const [scrollTop, setScrollTop] = useState(0);
  const isScrollingSyncRef = useRef(false);

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (!isResizing) return;
      
      const containerRect = document.querySelector('.training-plan-container')?.getBoundingClientRect();
      if (!containerRect) return;
      
      const newLeftWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;
      
      if (newLeftWidth >= 30 && newLeftWidth <= 70) {
        setLeftWidth(newLeftWidth);
      }
    };

    const handleMouseUp = () => {
      setIsResizing(false);
    };

    if (isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isResizing]);

  const handleMouseDown = () => {
    setIsResizing(true);
  };

  const handleCatalogScroll = (e) => {
    if (isScrollingSyncRef.current) return;
    
    const newScrollTop = e.target.scrollTop;
    setScrollTop(newScrollTop);
    
    isScrollingSyncRef.current = true;
    const teamPanel = document.querySelector('.team-scroll-container');
    if (teamPanel) {
      teamPanel.scrollTop = newScrollTop;
    }
    
    setTimeout(() => {
      isScrollingSyncRef.current = false;
    }, 10);
  };

  const handleTeamScroll = (e) => {
    if (isScrollingSyncRef.current) return;
    
    const newScrollTop = e.target.scrollTop;
    setScrollTop(newScrollTop);
    
    isScrollingSyncRef.current = true;
    const catalogPanel = document.querySelector('.catalog-scroll-container');
    if (catalogPanel) {
      catalogPanel.scrollTop = newScrollTop;
    }
     
    setTimeout(() => {
      isScrollingSyncRef.current = false;
    }, 10);
  };

  return (
    <div className="h-[70vh] training-plan-container flex relative">
      <div 
        className="h-full overflow-auto catalog-scroll-container"
        style={{ 
          width: `${leftWidth}%`,
          overflowX: 'auto',
          overflowY: 'auto'
        }}
        onScroll={handleCatalogScroll}
      >
        <div className="bg-white min-w-max">
          <Catalog 
            onCoursesLoad={onCoursesLoad}
            scrollTop={scrollTop}
          />
        </div>
      </div>
      
      <div 
        className="bg-gradient-to-b from-orange-500 to-pink-500 cursor-col-resize hover:from-orange-600 hover:to-pink-600 transition-colors duration-150 group relative flex-shrink-0"
        style={{ width: '16px' }}
        onMouseDown={handleMouseDown}
      >
        <div className="w-8 h-12 bg-orange-500 rounded-lg shadow-md group-hover:bg-orange-600 transition-colors duration-150 flex items-center justify-center absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10">
          <div className="flex flex-col gap-1">
            <div className="w-1 h-2 bg-gray-300 rounded-full"></div>
            <div className="w-1 h-2 bg-gray-300 rounded-full"></div>
            <div className="w-1 h-2 bg-gray-300 rounded-full"></div>
          </div>
        </div>
      </div>
      
      <div 
        className="h-full overflow-auto team-scroll-container"
        style={{ 
          width: `${100 - leftWidth}%`,
          overflowX: 'auto',
          overflowY: 'auto'
        }}
        onScroll={handleTeamScroll}
      >
        <div className="bg-white h-full min-w-max">
          <Team 
            courses={courses}
            scrollTop={scrollTop}
          />
        </div>
      </div>
    </div>
  );
};

const PlanEditor = ({ onBackToWelcome, hasExistingPlan }) => {
  const [planTitle, setPlanTitle] = useState('Pied Piper / Splunk Training Plan');
  const [courses, setCourses] = useState<Course[]>([]);
  const [hasChanges, setHasChanges] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [pendingAction, setPendingAction] = useState(null);

  useEffect(() => {
    document.title = "Splunk EDUTRON â€” Training Plan";
    
    const handlePopState = (event) => {
      if (hasChanges) {
        setShowConfirmation(true);
        setPendingAction(() => onBackToWelcome);
        window.history.pushState({ view: 'edit' }, '', '#edit');
      } else {
        onBackToWelcome();
      }
    };

    window.addEventListener('popstate', handlePopState);
    
    return () => {
      window.removeEventListener('popstate', handlePopState);
    };
  }, [onBackToWelcome, hasChanges]);

  const handleUpdateTitle = (newTitle) => {
    setPlanTitle(newTitle);
    setHasChanges(true);
  };

  const handleSave = () => {
    alert('Coming soon!');
  };

  const handleCoursesLoad = (loadedCourses: Course[]) => {
    setCourses(loadedCourses);
    setHasChanges(true);
  };

  const handleConfirmAction = () => {
    setShowConfirmation(false);
    if (pendingAction) {
      pendingAction();
    }
  };

  const handleCancelAction = () => {
    setShowConfirmation(false);
    setPendingAction(null);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header 
        title={planTitle}
        onUpdateTitle={handleUpdateTitle}
        onSave={handleSave}
        onBackToWelcome={() => {
          if (hasChanges) {
            setShowConfirmation(true);
            setPendingAction(() => onBackToWelcome);
          } else {
            onBackToWelcome();
          }
        }}
      />
      
      <PlanScroller courses={courses} onCoursesLoad={handleCoursesLoad} />
      
      <div className="mt-16">
        <Footer />
      </div>

      <ConfirmationModal
        isOpen={showConfirmation}
        onClose={handleCancelAction}
        onConfirm={handleConfirmAction}
        title="Unsaved Changes"
        message="You have unsaved changes. We recommend downloading your current plan before continuing. Are you sure you want to leave?"
      />
    </div>
  );
};

const SplunkEdutron = () => {
  const [currentView, setCurrentView] = useState('welcome');
  const [hasExistingPlan, setHasExistingPlan] = useState(false);

  const handleCreatePlan = () => {
    setCurrentView('plan');
    setHasExistingPlan(false);
    window.history.pushState({ view: 'edit' }, '', '#edit');
  };

  const handleLoadPlan = () => {
    setCurrentView('plan');
    setHasExistingPlan(true);
            window.history.pushState({ view: 'edit' }, '', '#edit');
  };

  const handleBackToWelcome = () => {
    setCurrentView('welcome');
    setHasExistingPlan(false);
    window.history.pushState({ view: 'welcome' }, '', '/');
  };

  useEffect(() => {
    const handlePopState = (event) => {
      if (event.state?.view) {
        setCurrentView(event.state.view);
      } else {
        setCurrentView('welcome');
      }
    };

    window.addEventListener('popstate', handlePopState);
    
    return () => {
      window.removeEventListener('popstate', handlePopState);
    };
  }, []);

  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      a:hover {
        cursor: pointer;
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  if (currentView === 'edit') {
    return <PlanEditor onBackToWelcome={handleBackToWelcome} hasExistingPlan={hasExistingPlan} />;
  }

  return (
    <WelcomeScreen 
      onCreatePlan={handleCreatePlan}
      onLoadPlan={handleLoadPlan}
    />
  );
};

export default SplunkEdutron;