import React, { useEffect } from "react";
import { useAtom } from "jotai";
import { atom } from "jotai";
import { Course } from "@/types/types";
import { setStatusAtom } from "@/atoms/globalAtoms";
import { loadCoursesFromCSV } from "@/utils/catalogLoader";
import { CATALOG_CONFIGS } from "@/utils/constants";

// Shared atoms for catalog state
export const catalogDataAtom = atom<Course[]>([]);
export const catalogLoadingAtom = atom<boolean>(false);
export const catalogErrorAtom = atom<Error | null>(null);

interface CatalogBaseProps {
  children: (data: {
    courses: Course[];
    isLoading: boolean;
    error: Error | null;
    refetch: () => void;
  }) => React.ReactNode;
}

const CatalogBase: React.FC<CatalogBaseProps> = ({ children }) => {
  const [courses, setCourses] = useAtom(catalogDataAtom);
  const [isLoading, setIsLoading] = useAtom(catalogLoadingAtom);
  const [error, setError] = useAtom(catalogErrorAtom);
  const [, setWorking] = useAtom(setStatusAtom);

  const loadCourses = async () => {
    if (isLoading) return;

    setIsLoading(true);
    setError(null);
    setWorking({ isWorking: true, message: "Loading catalog courses" });

    try {
      // Use the default catalog (first one in the config)
      const defaultCatalog = CATALOG_CONFIGS[0];
      if (!defaultCatalog) {
        throw new Error("No catalog configuration found");
      }

      const loadedCourses = await loadCoursesFromCSV(defaultCatalog.csvPath);

      // Debug log to see what columns are actually in the data
      if (loadedCourses.length > 0) {
        console.log("Loaded courses sample:", loadedCourses[0]);
        console.log("All column keys found:", Object.keys(loadedCourses[0]));
      }

      setCourses(loadedCourses);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err : new Error("Unknown error occurred");
      setError(errorMessage);
      setCourses([]);
      console.error("Error loading courses:", errorMessage);
    } finally {
      setIsLoading(false);
      setWorking({ isWorking: false, message: "" });
    }
  };

  const refetch = () => {
    loadCourses();
  };

  // Load courses on mount if not already loaded
  useEffect(() => {
    if (courses.length === 0 && !isLoading && !error) {
      loadCourses();
    }
  }, []);

  // Show loading state
  if (isLoading) {
    return (
      <div
        id="catalog-loading"
        className="h-full flex items-center justify-center"
      >
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-slate-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading courses...</p>
        </div>
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div
        id="catalog-error"
        className="h-full flex items-center justify-center"
      >
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-red-600 mb-4">
            <svg
              className="w-12 h-12 mx-auto"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Failed to Load Courses
          </h3>
          <p className="text-gray-600 mb-4">{error.message}</p>
          <button
            onClick={refetch}
            className="bg-slate-600 hover:bg-slate-700 text-white px-4 py-2 rounded transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return <>{children({ courses, isLoading, error, refetch })}</>;
};

export default CatalogBase;
