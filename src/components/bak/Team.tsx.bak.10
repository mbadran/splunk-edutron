import React, { useState } from 'react';
import { Plus, Edit, Check, X } from 'lucide-react';
// import TeamControls from './TeamControls';
import TeamInsights from './TeamInsights';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface SelectionCellProps {
  isSelected: boolean;
  onToggle: () => void;
  courseName: string;
  memberName: string;
  rowIndex: number;
}

interface TeamMemberHeaderProps {
  member: string;
  index: number;
  onEdit: () => void;
  isEditing: boolean;
  editValue: string;
  onEditChange: (value: string) => void;
  onSave: () => void;
  onCancel: () => void;
}

interface TeamProps {
  courses: Course[];
}

const SelectionCell = ({ isSelected, onToggle, courseName, memberName, rowIndex }: SelectionCellProps) => {
  return (
    <td className={`w-32 h-12 text-center cursor-pointer transition-all duration-200 border-b border-gray-200 ${
      rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'
    } hover:bg-orange-50`} style={{width: '128px', minWidth: '128px'}}>
      <button
        onClick={onToggle}
        className={`w-full h-full flex items-center justify-center text-lg font-bold transition-colors ${
          isSelected ? 'text-orange-600' : 'text-gray-400 hover:text-orange-600'
        }`}
        title={`Toggle ${courseName} for ${memberName}`}
      >
        {isSelected ? 'âœ“' : ''}
      </button>
    </td>
  );
};

const TeamMemberHeader = ({ member, index, onEdit, isEditing, editValue, onEditChange, onSave, onCancel }: TeamMemberHeaderProps) => {
  return (
    <th className="w-32 h-12 text-center sticky top-0 z-10 bg-gradient-to-r from-orange-500 to-pink-500 text-white font-semibold" style={{width: '128px', minWidth: '128px'}}>
      {isEditing ? (
        <div className="flex items-center justify-center gap-1">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') onSave();
              if (e.key === 'Escape') onCancel();
            }}
            className="w-20 h-6 px-1 text-xs text-gray-800 rounded border-none outline-none text-center"
            autoFocus
          />
          <button onClick={onSave} className="text-green-300 hover:text-green-100">
            <Check className="w-3 h-3" />
          </button>
          <button onClick={onCancel} className="text-red-300 hover:text-red-100">
            <X className="w-3 h-3" />
          </button>
        </div>
      ) : (
        <div className="flex items-center justify-center gap-1">
          <button
            onClick={onEdit}
            className="font-semibold hover:bg-white/20 rounded transition-colors px-1 text-center"
            title="Click to edit name"
          >
            {member}
          </button>
          <button onClick={onEdit} className="text-white/70 hover:text-white">
            <Edit className="w-3 h-3" />
          </button>
        </div>
      )}
    </th>
  );
};

const Team: React.FC<TeamProps> = ({ courses }) => {
  const CAST_NAMES = [
    'Richard Hendricks',
    'Erlich Bachman',
    'Dinesh Chugtai',
    'Bertram Gilfoyle',
    'Jared Dunn',
    'Monica Hall',
    'Gavin Belson',
    'Nelson Bighetti',
    'Russ Hanneman',
    'Peter Gregory',
    'Laurie Bream',
    'Ed Chen',
    'Hoover Chan',
    'Don Bang',
    'Carla Walton',
    'Dan Melcher',
    'Fiona Wallace',
    'John Stafford',
    'Kara Swisher',
    'Maximo Reyes'
  ];

  const [teamMembers, setTeamMembers] = useState([CAST_NAMES[0]]);
  const [selections, setSelections] = useState<Record<string, boolean>>({});
  const [history, setHistory] = useState<Array<{teamMembers: string[], selections: Record<string, boolean>}>>([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  const [editingMember, setEditingMember] = useState<number | null>(null);
  const [editValue, setEditValue] = useState('');

  const saveState = () => {
    const state = {
      teamMembers: [...teamMembers],
      selections: {...selections}
    };
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(state);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  const handleAddTeamMember = () => {
    saveState();
    const newMemberName = CAST_NAMES[teamMembers.length] || `Team Member ${teamMembers.length + 1}`;
    setTeamMembers([...teamMembers, newMemberName]);
  };

  const handleUpdateTeamMember = (index: number, newName: string) => {
    saveState();
    const updatedMembers = [...teamMembers];
    updatedMembers[index] = newName;
    setTeamMembers(updatedMembers);
  };

  const handleToggleSelection = (courseIndex: number, memberIndex: number) => {
    saveState();
    const key = `${courseIndex}-${memberIndex}`;
    setSelections(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const isSelected = (courseIndex: number, memberIndex: number) => {
    const key = `${courseIndex}-${memberIndex}`;
    return selections[key] || false;
  };

  const startEditing = (index: number) => {
    setEditingMember(index);
    setEditValue(teamMembers[index]);
  };

  const saveEdit = () => {
    if (editValue.trim() && editingMember !== null) {
      handleUpdateTeamMember(editingMember, editValue.trim());
    }
    setEditingMember(null);
    setEditValue('');
  };

  const cancelEdit = () => {
    setEditingMember(null);
    setEditValue('');
  };

  return (
    <div className="flex flex-col h-full">
      {/* <TeamControls /> */}
      
      <div className="flex-1 overflow-auto">
        <table className="w-full">
          <thead>
            <tr>
              {teamMembers.map((member, index) => (
                <TeamMemberHeader
                  key={index}
                  member={member}
                  index={index}
                  isEditing={editingMember === index}
                  editValue={editValue}
                  onEdit={() => startEditing(index)}
                  onEditChange={setEditValue}
                  onSave={saveEdit}
                  onCancel={cancelEdit}
                />
              ))}
              <th className="w-24 h-12 bg-gradient-to-r from-orange-500 to-pink-500 text-white font-semibold sticky top-0 z-10" style={{width: '96px', minWidth: '96px'}}>
                <button 
                  onClick={handleAddTeamMember}
                  className="w-full h-full bg-transparent border-none text-white hover:bg-white/20 transition-colors rounded flex items-center justify-center gap-1 font-semibold"
                  title="Add team member"
                >
                  <Plus className="w-5 h-5" />
                </button>
              </th>
            </tr>
          </thead>
          <tbody>
            {courses.map((course, courseIndex) => (
              <tr key={course.ID} className={`h-12 border-b border-gray-200 ${
                courseIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'
              } hover:bg-orange-50 transition-colors`}>
                {teamMembers.map((member, memberIndex) => (
                  <SelectionCell
                    key={memberIndex}
                    isSelected={isSelected(courseIndex, memberIndex)}
                    onToggle={() => handleToggleSelection(courseIndex, memberIndex)}
                    courseName={course.Name}
                    memberName={member}
                    rowIndex={courseIndex}
                  />
                ))}
                <td className="w-24 h-12 bg-transparent" style={{width: '96px', minWidth: '96px'}}></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <TeamInsights />
    </div>
  );
};

export default Team;