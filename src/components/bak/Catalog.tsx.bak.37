import React, {
  useState,
  useCallback,
  forwardRef,
  useImperativeHandle,
} from "react";
import { useQuery } from "@tanstack/react-query";
import { Clock, DollarSign, ExternalLink, GraduationCap } from "lucide-react";
import Papa from "papaparse";
import { z } from "zod";
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  ColumnDef,
  getSortedRowModel,
  SortingState,
  ColumnResizeMode,
} from "@tanstack/react-table";
import BaseTable, {
  BaseTableRef,
  SortableHeader,
  TABLE_CONSTANTS,
} from "./BaseTable";
import { Course } from "./types";
import {
  COURSE_URL,
  CATEGORY_COLORS,
  MODE_COLORS,
  MODE_TOOLTIPS,
} from "./constants";

interface CatalogProps {
  onCoursesLoad?: (count: number, courses: Course[]) => void;
  onScroll?: (scrollTop: number) => void;
}

interface CatalogRef {
  scrollToOffset: (offset: number) => void;
}

// Configuration constants
const COLUMN_EXCEPTIONS = new Set<string>([
  "STEP_ID", // Use values but don't display as column
]);

// Define column order - columns not in this list will be added at the end
const COLUMN_ORDER = ["ID", "Category", "Price", "Name", "Mode", "Duration"];

// Cell renderer functions for different data types
const cellRenderers = {
  rowNumber: (value: any, course: Course, rowIndex: number) => (
    <div className="h-12 flex items-center justify-end px-2">
      <span className="text-sm font-mono text-gray-600 font-medium">
        {rowIndex + 1}
      </span>
    </div>
  ),

  id: (value: any) => (
    <div className="h-12 flex items-center justify-start px-2">
      <code className="text-sm font-mono text-gray-700 bg-gray-200 px-2 py-1 rounded whitespace-nowrap">
        {value}
      </code>
    </div>
  ),

  category: (value: any) => (
    <div className="h-12 flex items-center justify-start px-2">
      <span
        className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${
          CATEGORY_COLORS[value] || "bg-gray-500 text-white"
        }`}
      >
        {value}
      </span>
    </div>
  ),

  mode: (value: any) => (
    <div className="h-12 flex items-center justify-start px-2">
      <span
        className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${
          MODE_COLORS[value] || "bg-gray-100 text-gray-800"
        }`}
        title={MODE_TOOLTIPS[value] || value}
      >
        {value}
      </span>
    </div>
  ),

  duration: (value: any) => (
    <div className="h-12 flex items-center justify-start px-2">
      <div className="relative bg-yellow-100 px-2 py-1 rounded inline-block">
        <Clock className="absolute left-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-600 opacity-80" />
        <span className="text-sm font-medium text-gray-700 pl-4">{value}h</span>
      </div>
    </div>
  ),

  price: (value: any) => (
    <div className="h-12 flex items-center justify-start px-2">
      {value === 0 ? (
        <span className="text-gray-700 font-medium text-sm bg-green-200 px-2 py-1 rounded whitespace-nowrap">
          Free
        </span>
      ) : (
        <div className="flex items-center text-gray-700 bg-pink-200 px-2 py-1 rounded">
          <DollarSign className="w-3 h-3 mr-1" />
          <span className="font-medium text-sm font-mono">
            {value.toLocaleString("en-US")}
          </span>
        </div>
      )}
    </div>
  ),

  name: (value: any, course: Course) => (
    <div className="h-12 flex items-center justify-start px-2">
      <div className="whitespace-nowrap overflow-hidden min-w-0">
        {course.STEP_ID ? (
          <a
            href={COURSE_URL.replace("<STEP_ID>", course.STEP_ID)}
            target="_blank"
            rel="noopener noreferrer"
            className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0"
            title={value}
          >
            <span className="truncate min-w-0">{value}</span>
            <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
          </a>
        ) : (
          <span
            className="font-medium text-gray-900 truncate block min-w-0"
            title={value}
          >
            {value}
          </span>
        )}
      </div>
    </div>
  ),

  default: (value: any) => (
    <div className="h-12 flex items-center justify-start px-2">
      <span className="text-sm text-gray-700 truncate" title={String(value)}>
        {String(value)}
      </span>
    </div>
  ),
};

// Column configuration mapping
const COLUMN_CONFIG: Record<
  string,
  {
    size: number;
    minSize: number;
    maxSize: number;
    renderer: keyof typeof cellRenderers;
  }
> = {
  "#": {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.XSMALL,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_XSMALL,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_XSMALL,
    renderer: "rowNumber",
  },
  ID: {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.MEDIUM,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_MEDIUM,
    renderer: "id",
  },
  Category: {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.MEDIUM,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_LARGE,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_LARGE,
    renderer: "category",
  },
  Mode: {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.SMALL,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_SMALL,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_SMALL,
    renderer: "mode",
  },
  Duration: {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.SMALL,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_LARGE,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_LARGE,
    renderer: "duration",
  },
  Price: {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.MEDIUM,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_LARGE,
    renderer: "price",
  },
  Name: {
    size: TABLE_CONSTANTS.COLUMN_WIDTH.XXLARGE,
    minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_XXLARGE,
    maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_XXLARGE,
    renderer: "name",
  },
};

// Zod schema for course validation
const CourseSchema = z.object({
  ID: z.string().min(1, "ID is required"),
  Name: z.string().min(1, "Name is required"),
  Category: z.string().default(""),
  Duration: z.coerce.number().nonnegative().default(0),
  Mode: z.string().default(""),
  Price: z.coerce.number().nonnegative().default(0),
  STEP_ID: z.string().optional(),
});

const RawCourseSchema = z.record(z.unknown()).transform((data) => {
  // Normalize STEP_ID field variations
  const stepIdVariations = ["STEP ID", "Step ID", "step_id", "STEP_ID"];
  let stepId: string | undefined;

  for (const variation of stepIdVariations) {
    if (data[variation] && typeof data[variation] === "string") {
      stepId = String(data[variation]).trim();
      break;
    }
  }

  // Clean and transform the data
  const cleanData: Record<string, any> = {};

  Object.entries(data).forEach(([key, value]) => {
    const cleanKey = key.trim();
    if (!stepIdVariations.includes(key) || cleanKey === "STEP_ID") {
      cleanData[cleanKey] = typeof value === "string" ? value.trim() : value;
    }
  });

  if (stepId) {
    cleanData.STEP_ID = stepId;
  }

  return cleanData;
});

const loadCoursesFromCSV = async (): Promise<Course[]> => {
  const response = await fetch("/catalog.csv");
  if (!response.ok) {
    throw new Error(`Failed to load catalog.csv: ${response.status}`);
  }
  const text = await response.text();

  return new Promise((resolve, reject) => {
    Papa.parse(text, {
      header: true,
      skipEmptyLines: true,
      dynamicTyping: true,
      trimHeaders: true,
      delimitersToGuess: [",", "\t", "|", ";"],
      transform: (value) => {
        if (typeof value === "string") {
          return value.trim();
        }
        return value;
      },
      complete: (results) => {
        try {
          const courses: Course[] = [];
          const errors: string[] = [];

          for (const [index, row] of (results.data as any[]).entries()) {
            try {
              // First normalize the raw data
              const normalizedData = RawCourseSchema.parse(row);

              // Then validate against the course schema
              const course = CourseSchema.parse(normalizedData);
              courses.push(course);
            } catch (error) {
              if (error instanceof z.ZodError) {
                errors.push(
                  `Row ${index + 1}: ${error.errors.map((e) => e.message).join(", ")}`,
                );
              } else {
                errors.push(`Row ${index + 1}: ${error}`);
              }
            }
          }

          if (courses.length === 0) {
            reject(
              new Error(
                `No valid courses found in catalog.csv. Errors: ${errors.join("; ")}`,
              ),
            );
          } else {
            if (errors.length > 0) {
              console.warn(
                `Some rows were skipped due to validation errors: ${errors.join("; ")}`,
              );
            }
            resolve(courses);
          }
        } catch (error) {
          reject(error);
        }
      },
      error: (error) => {
        reject(new Error(`CSV parsing error: ${error.message}`));
      },
    });
  });
};

const Catalog = forwardRef<CatalogRef, CatalogProps>(
  ({ onCoursesLoad, onScroll }, ref) => {
    const [sorting, setSorting] = useState<SortingState>([]);
    const baseTableRef = React.useRef<BaseTableRef>(null);

    // React Query for data fetching
    const {
      data: courses = [],
      isLoading,
      error,
      refetch,
    } = useQuery({
      queryKey: ["courses"],
      queryFn: loadCoursesFromCSV,
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes
      retry: 2,
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
    });

    // Notify parent when courses load
    React.useEffect(() => {
      if (courses.length > 0 && onCoursesLoad) {
        onCoursesLoad(courses.length, courses);
      }
    }, [courses, onCoursesLoad]);

    useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        baseTableRef.current?.scrollToOffset(offset);
      },
    }));

    const columnHelper = createColumnHelper<Course>();

    // Create cell renderer function
    const createCellRenderer = useCallback((columnKey: string) => {
      return (info: any) => {
        const value = info.getValue();
        const course = info.row.original;
        const rowIndex = info.row.index;

        const config = COLUMN_CONFIG[columnKey];
        const renderer = config?.renderer || "default";
        const rendererFn = cellRenderers[renderer];

        if (renderer === "name") {
          return rendererFn(value, course);
        } else if (renderer === "rowNumber") {
          return rendererFn(value, course, rowIndex);
        } else {
          return rendererFn(value);
        }
      };
    }, []);

    // Generate columns dynamically
    const columns: ColumnDef<Course>[] = React.useMemo(() => {
      if (courses.length === 0) return [];

      const allColumns: ColumnDef<Course>[] = [];

      // Add row number column first (far left) - use TanStack's built-in sorting
      allColumns.push(
        columnHelper.display({
          id: "#",
          header: ({ column }) => (
            <SortableHeader column={column}>
              <span className="text-xs">#</span>
            </SortableHeader>
          ),
          cell: createCellRenderer("#"),
          size: COLUMN_CONFIG["#"].size,
          minSize: COLUMN_CONFIG["#"].minSize,
          maxSize: COLUMN_CONFIG["#"].maxSize,
          enableResizing: true,
          enableSorting: true,
          // Simple sorting by row index - TanStack handles this automatically
          sortingFn: (rowA, rowB) => rowA.index - rowB.index,
        }),
      );

      // Get all course property keys and filter out exceptions
      const sampleCourse = courses[0];
      const allKeys = Object.keys(sampleCourse).filter(
        (key) => !COLUMN_EXCEPTIONS.has(key),
      );

      // Separate ordered and other columns
      const orderedKeys = COLUMN_ORDER.filter((key) => allKeys.includes(key));
      const otherKeys = allKeys.filter((key) => !COLUMN_ORDER.includes(key));
      const finalKeys = [...orderedKeys, ...otherKeys];

      // Create data columns
      finalKeys.forEach((key) => {
        const config = COLUMN_CONFIG[key] || {
          size: TABLE_CONSTANTS.COLUMN_WIDTH.LARGE,
          minSize: TABLE_CONSTANTS.COLUMN_LIMITS.MIN_LARGE,
          maxSize: TABLE_CONSTANTS.COLUMN_LIMITS.MAX_LARGE,
          renderer: "default" as keyof typeof cellRenderers,
        };

        allColumns.push(
          columnHelper.accessor(key as keyof Course, {
            id: key,
            header: ({ column }) => (
              <SortableHeader column={column}>
                <span className="text-xs">{key}</span>
              </SortableHeader>
            ),
            cell: createCellRenderer(key),
            size: config.size,
            minSize: config.minSize,
            maxSize: config.maxSize,
            enableResizing: true,
            enableSorting: true,
          }),
        );
      });

      return allColumns;
    }, [courses, columnHelper, createCellRenderer]);

    const table = useReactTable({
      data: courses,
      columns,
      getCoreRowModel: getCoreRowModel(),
      getSortedRowModel: getSortedRowModel(),
      onSortingChange: setSorting,
      state: {
        sorting,
      },
      columnResizeMode: "onChange" as ColumnResizeMode,
      enableColumnResizing: true,
      enableSorting: true,
    });

    if (isLoading) {
      return (
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-600">Loading course catalog...</p>
          </div>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex items-center justify-center h-full p-4">
          <div className="max-w-md mx-auto text-center">
            <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
                <GraduationCap className="w-8 h-8 text-gray-600" />
              </div>
              <div className="text-red-400 mb-4 text-2xl">⚠️ Error</div>
              <p className="text-gray-600 mb-4">{(error as Error).message}</p>
              <p className="text-gray-500 text-sm mb-6">
                Make sure catalog.csv is in your /public directory
              </p>
              <div className="space-y-3">
                <button
                  onClick={() => refetch()}
                  className="w-full bg-orange-500 text-white hover:bg-orange-600 font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  Retry Loading
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    return (
      <BaseTable
        ref={baseTableRef}
        table={table}
        onScroll={onScroll}
        headerClassName="bg-slate-800"
        rowHeight={48}
      />
    );
  },
);

Catalog.displayName = "Catalog";

export default Catalog;