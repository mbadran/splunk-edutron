import React from "react";
import { useQuery } from "@tanstack/react-query";
import { GraduationCap } from "lucide-react";
import Papa from "papaparse";
import { z } from "zod";
import { useAtom } from "jotai";
import { atom } from "jotai";
import { Course } from "@/types/types";
import { setWorkingAtom } from "@/atoms/globalAtoms";
import { DEFAULT_CATALOG } from "@/utils/constants";

// Shared atoms for catalog state
export const catalogDataAtom = atom<Course[]>([]);
export const catalogLoadingAtom = atom<boolean>(false);
export const catalogErrorAtom = atom<Error | null>(null);

// Zod schema for course validation
const CourseSchema = z.object({
  ID: z.string().min(1, "ID is required"),
  Name: z.string().min(1, "Name is required"),
  Category: z.string().default(""),
  Duration: z.coerce.number().nonnegative().default(0),
  Mode: z.string().default(""),
  Price: z.coerce.number().nonnegative().default(0),
  STEP_ID: z.string().optional(),
});

const RawCourseSchema = z.record(z.unknown()).transform((data) => {
  // Normalize STEP_ID field variations
  const stepIdVariations = ["STEP ID", "Step ID", "step_id", "STEP_ID"];
  let stepId: string | undefined;

  for (const variation of stepIdVariations) {
    if (data[variation] && typeof data[variation] === "string") {
      stepId = String(data[variation]).trim();
      break;
    }
  }

  // Clean and transform the data
  const cleanData: Record<string, any> = {};

  Object.entries(data).forEach(([key, value]) => {
    const cleanKey = key.trim();
    if (!stepIdVariations.includes(key) || cleanKey === "STEP_ID") {
      cleanData[cleanKey] = typeof value === "string" ? value.trim() : value;
    }
  });

  if (stepId) {
    cleanData.STEP_ID = stepId;
  }

  return cleanData;
});

const loadCoursesFromCSV = async (): Promise<Course[]> => {
  const response = await fetch(DEFAULT_CATALOG);
  if (!response.ok) {
    throw new Error(`Failed to load Catalog: ${response.status}`);
  }
  const text = await response.text();

  return new Promise((resolve, reject) => {
    Papa.parse(text, {
      header: true,
      skipEmptyLines: true,
      dynamicTyping: true,
      trimHeaders: true,
      delimitersToGuess: [",", "\t", "|", ";"],
      transform: (value) => {
        if (typeof value === "string") {
          return value.trim();
        }
        return value;
      },
      complete: (results) => {
        try {
          const courses: Course[] = [];
          const errors: string[] = [];

          for (const [index, row] of (results.data as any[]).entries()) {
            try {
              // First normalize the raw data
              const normalizedData = RawCourseSchema.parse(row);

              // Then validate against the course schema
              const course = CourseSchema.parse(normalizedData);
              courses.push(course);
            } catch (error) {
              if (error instanceof z.ZodError) {
                errors.push(
                  `Row ${index + 1}: ${error.errors.map((e) => e.message).join(", ")}`,
                );
              } else {
                errors.push(`Row ${index + 1}: ${error}`);
              }
            }
          }

          if (courses.length === 0) {
            reject(
              new Error(
                `No valid courses found in catalog.csv. Errors: ${errors.join("; ")}`,
              ),
            );
          } else {
            if (errors.length > 0) {
              console.warn(
                `Some rows were skipped due to validation errors: ${errors.join("; ")}`,
              );
            }
            resolve(courses);
          }
        } catch (error) {
          reject(error);
        }
      },
      error: (error) => {
        reject(new Error(`CSV parsing error: ${error.message}`));
      },
    });
  });
};

interface BaseCatalogProps {
  children: (data: {
    courses: Course[];
    isLoading: boolean;
    error: Error | null;
    refetch: () => void;
  }) => React.ReactNode;
}

const BaseCatalog: React.FC<BaseCatalogProps> = ({ children }) => {
  const [, setWorking] = useAtom(setWorkingAtom);

  // React Query for data fetching
  const {
    data: courses = [],
    isLoading,
    error,
    refetch,
  } = useQuery({
    queryKey: ["courses"],
    queryFn: loadCoursesFromCSV,
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000, // 10 minutes
    retry: 2,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  if (isLoading) {
    return (
      <div
        id="catalog-loading"
        className="flex items-center justify-center h-full"
      >
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading course catalog...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div
        id="catalog-error"
        className="flex items-center justify-center h-full p-4"
      >
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
              <GraduationCap className="w-8 h-8 text-gray-600" />
            </div>
            <div className="text-red-400 mb-4 text-2xl">⚠️ Error</div>
            <p className="text-gray-600 mb-4">{(error as Error).message}</p>
            <p className="text-gray-500 text-sm mb-6">
              Make sure catalog.csv is in your /public directory
            </p>
            <div className="space-y-3">
              <button
                id="catalog-retry-button"
                onClick={() => refetch()}
                className="w-full bg-orange-500 text-white hover:bg-orange-600 font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                Retry Loading
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return <>{children({ courses, isLoading, error, refetch })}</>;
};

export default BaseCatalog;
