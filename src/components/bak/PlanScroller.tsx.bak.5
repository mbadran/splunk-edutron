import React from "react";
import { useAtom } from "jotai";
import { atomWithStorage } from "jotai/utils";
import PlanCatalogs from "./PlanCatalogs";
import PlanCore from "./PlanCore";
import { useScrollSync } from "@/hooks/scrollSync";
import { planCoursesAtom } from "./Planner";

// Constants
const RESIZE_BOUNDS = { min: 30, max: 70 };
const DEFAULT_LEFT_WIDTH = 50;

// Jotai atom for resize state
const planScrollerWidthAtom = atomWithStorage(
  "plan-scroller-width",
  DEFAULT_LEFT_WIDTH,
);
const planScrollerResizingAtom = atomWithStorage(
  "plan-scroller-resizing",
  false,
);

const PlanScroller: React.FC = () => {
  // Jotai state for resize functionality
  const [isResizing, setIsResizing] = useAtom(planScrollerResizingAtom);
  const [leftWidth, setLeftWidth] = useAtom(planScrollerWidthAtom);

  // Get courses from state to verify data availability
  const [courses] = useAtom(planCoursesAtom);

  // Scroll synchronization
  const {
    catalogTableRef,
    teamTableRef,
    handleCatalogScroll,
    handleTeamScroll,
  } = useScrollSync();

  // Debug logging to track data flow
  React.useEffect(() => {
    console.log("PlanScroller - courses from state:", courses?.length || 0);
  }, [courses]);

  // Mouse event handlers for resizing
  const handleMouseMove = React.useCallback(
    (e: MouseEvent) => {
      if (!isResizing) return;

      const container = document.getElementById("plan-scroller");
      if (!container) return;

      const containerRect = container.getBoundingClientRect();
      const newLeftWidth =
        ((e.clientX - containerRect.left) / containerRect.width) * 100;

      if (
        newLeftWidth >= RESIZE_BOUNDS.min &&
        newLeftWidth <= RESIZE_BOUNDS.max
      ) {
        setLeftWidth(newLeftWidth);
      }
    },
    [isResizing, setLeftWidth],
  );

  const handleMouseUp = React.useCallback(() => {
    setIsResizing(false);
    document.body.style.cursor = "";
    document.body.style.userSelect = "";
  }, [setIsResizing]);

  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
    document.body.style.cursor = "col-resize";
    document.body.style.userSelect = "none";
  };

  // Global mouse event listeners for resizing
  React.useEffect(() => {
    if (isResizing) {
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);

      return () => {
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
      };
    }
  }, [isResizing, handleMouseMove, handleMouseUp]);

  return (
    <div
      id="plan-scroller"
      className="h-[70vh] training-plan-container flex relative"
    >
      {/* LEFT PANE: Catalogs */}
      <div
        id="plan-catalogs-pane"
        className="h-full overflow-hidden catalog-scroll-container"
        style={{ width: `${leftWidth}%` }}
      >
        <div className="bg-white h-full">
          <PlanCatalogs onScroll={handleCatalogScroll} />
        </div>
      </div>

      {/* RESIZE HANDLE */}
      <div
        id="plan-resize-handle"
        className="bg-gradient-to-b from-orange-500 to-pink-500 cursor-col-resize hover:from-orange-600 hover:to-pink-600 transition-colors duration-150 group relative flex-shrink-0 flex items-center justify-center hover:cursor-grab active:cursor-grabbing"
        style={{ width: "10px" }}
        onMouseDown={handleMouseDown}
      >
        <div
          className="bg-orange-500 rounded-md shadow-lg group-hover:bg-orange-600 transition-colors duration-150 flex flex-col items-center justify-center z-10 border border-orange-400 gap-1"
          style={{ width: "14px", height: "32px" }}
        >
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
        </div>
      </div>

      {/* RIGHT PANE: Core/Teams */}
      <div
        id="plan-teams-pane"
        className="h-full overflow-hidden team-scroll-container"
        style={{ width: `${100 - leftWidth}%` }}
      >
        <div className="bg-white h-full">
          <PlanCore onScroll={handleTeamScroll} />
        </div>
      </div>
    </div>
  );
};

PlanScroller.displayName = "PlanScroller";

export default PlanScroller;
