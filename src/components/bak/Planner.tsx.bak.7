import React from "react";
import { useAtom } from "jotai";
import { atom } from "jotai";
import Header from "./common/Header";
import PlanScroller from "./PlanScroller";
import { Person, Plan } from "@/types/types";
import { DEFAULT_TEAM_NAMES } from "@/utils/constants";
import {
  planStateAtom,
  updatePlanStateAtom,
  planTotalAtom,
  planSelectedCoursesAtom,
  planCostPerMemberAtom,
  plannerCoursesAtom,
} from "@/atoms/globalAtoms";

// Undo/Redo state atoms - session-only persistence
const planHistoryAtom = atom<any[]>([]);
const planHistoryIndexAtom = atom<number>(-1);

interface PlannerProps {
  onBackToHome: () => void;
}

const Planner: React.FC<PlannerProps> = ({ onBackToHome }) => {
  // Jotai state management
  const [planState] = useAtom(planStateAtom);
  const [, updatePlanState] = useAtom(updatePlanStateAtom);
  const [courses] = useAtom(plannerCoursesAtom);
  const [total] = useAtom(planTotalAtom);
  const [selectedCoursesCount] = useAtom(planSelectedCoursesAtom);
  const [costPerMember] = useAtom(planCostPerMemberAtom);
  const [history, setHistory] = useAtom(planHistoryAtom);
  const [historyIndex, setHistoryIndex] = useAtom(planHistoryIndexAtom);

  // Initialize with default team member if empty
  React.useEffect(() => {
    if (planState.teamMembers.length === 0) {
      const defaultMember: Person = {
        id: `member-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        name: DEFAULT_TEAM_NAMES[0],
        email: "",
        role: "",
      };
      updatePlanState({ teamMembers: [defaultMember] });
    }
  }, [planState.teamMembers.length, updatePlanState]);

  // Debug logging to track data flow
  React.useEffect(() => {
    console.log("Planner - courses available:", courses?.length || 0);
    console.log("Planner - team members:", planState.teamMembers?.length || 0);
    console.log("Planner - total cost:", total);
    console.log("Planner - selected courses:", selectedCoursesCount);
  }, [courses, planState.teamMembers, total, selectedCoursesCount]);

  // Handler functions
  const handleUpdateTitle = (newTitle: string) => {
    updatePlanState({ title: newTitle });
    saveToHistory();
  };

  const saveToHistory = () => {
    const currentState = {
      ...planState,
      timestamp: Date.now(),
    };

    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(currentState);

    // Keep only last 50 states
    if (newHistory.length > 50) {
      newHistory.shift();
    } else {
      setHistoryIndex(historyIndex + 1);
    }

    setHistory(newHistory);
  };

  const handleUndo = () => {
    if (historyIndex > 0) {
      const previousState = history[historyIndex - 1];
      const { timestamp, ...stateToRestore } = previousState;
      
      // Update the plan state atom directly
      updatePlanState(stateToRestore);
      setHistoryIndex(historyIndex - 1);
    }
  };

  const handleRedo = () => {
    if (historyIndex < history.length - 1) {
      const nextState = history[historyIndex + 1];
      const { timestamp, ...stateToRestore } = nextState;
      
      // Update the plan state atom directly
      updatePlanState(stateToRestore);
      setHistoryIndex(historyIndex + 1);
    }
  };

  const handleDownload = () => {
    const planExport: Plan = {
      metadata: {
        id: planState.id,
        title: planState.title,
        version: "1.0",
        createdAt: planState.createdAt,
        updatedAt: planState.updatedAt,
        exportedAt: new Date().toISOString(),
      },
      catalogs: planState.catalogs,
      teamMembers: planState.teamMembers,
      selections: planState.selections,
      budget: planState.budget,
      totals: {
        selectedCourses: selectedCoursesCount,
        totalCost: total,
        costPerMember: costPerMember,
      },
      courses: courses || [],
    };

    const dataStr = JSON.stringify(planExport, null, 2);
    const dataUri =
      "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);

    const exportFileDefaultName = `${planState.title.replace(/[^a-z0-9]/gi, "_").toLowerCase()}_plan.json`;

    const linkElement = document.createElement("a");
    linkElement.setAttribute("href", dataUri);
    linkElement.setAttribute("download", exportFileDefaultName);
    linkElement.click();
  };

  const handleBudgetChange = (newBudget: number | null) => {
    updatePlanState({ budget: newBudget });
  };

  // Navigation handler
  const handleNavigate = (route: string) => {
    console.log("Navigate to:", route);
    // TODO: Implement navigation logic when routing is added
  };

  return (
    <div id="planner" className="min-h-screen bg-gray-50 flex flex-col">
      <Header
        onBackToHome={onBackToHome}
        pageTitle={planState.title}
        onUpdateTitle={handleUpdateTitle}
        onUndo={handleUndo}
        onRedo={handleRedo}
        onDownload={handleDownload}
        canUndo={historyIndex > 0}
        canRedo={historyIndex < history.length - 1}
        total={total}
        onBudgetChange={handleBudgetChange}
        currentRoute="/planner"
        onNavigate={handleNavigate}
      />

      <PlanScroller />
    </div>
  );
};

export default Planner;