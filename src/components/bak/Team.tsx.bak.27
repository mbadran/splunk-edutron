import React, {
  useState,
  forwardRef,
  useImperativeHandle,
} from "react";
import { Plus, Edit, Check, X, Trash2 } from "lucide-react";
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  ColumnDef,
} from "@tanstack/react-table";
import BaseTable, { BaseTableRef, SortableHeader } from "./BaseTable";
import TeamInsights from "./TeamInsights";

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface TeamProps {
  courses: Course[];
  courseCount: number;
  teamMembers: string[];
  selections: Record<string, boolean>;
  onTeamMembersChange: (members: string[]) => void;
  onToggleSelection: (courseIndex: number, memberIndex: number) => void;
  isSelected: (courseIndex: number, memberIndex: number) => boolean;
  onScroll?: (scrollOffset: number) => void;
}

interface SelectionCellProps {
  courseIndex: number;
  memberIndex: number;
  isSelected: boolean;
  onToggle: () => void;
  courseName: string;
  memberName: string;
}

interface TeamMemberHeaderProps {
  member: string;
  index: number;
  onEdit: () => void;
  onDelete: () => void;
  isEditing: boolean;
  editValue: string;
  onEditChange: (value: string) => void;
  onSave: () => void;
  onCancel: () => void;
  totalMembers: number;
}

const SelectionCell: React.FC<SelectionCellProps> = ({
  courseIndex,
  memberIndex,
  isSelected,
  onToggle,
  courseName,
  memberName,
}) => {
  const cellClass = isSelected ? "bg-green-200" : "bg-transparent";

  return (
    <div
      className={`h-12 flex items-center justify-center cursor-pointer transition-all duration-200 border-b border-gray-200 ${cellClass} hover:bg-orange-50 px-2`}
    >
      <button
        onClick={onToggle}
        className={`w-full h-full flex items-center justify-center text-lg font-bold transition-colors ${
          isSelected ? "text-orange-600" : "text-gray-400 hover:text-orange-600"
        }`}
        title={`Toggle ${courseName} for ${memberName}`}
        aria-label={`${isSelected ? "Remove" : "Add"} ${courseName} for ${memberName}`}
      >
        {isSelected ? "‚óè" : ""}
      </button>
    </div>
  );
};

const TeamMemberHeader: React.FC<TeamMemberHeaderProps> = ({
  member,
  index,
  onEdit,
  onDelete,
  isEditing,
  editValue,
  onEditChange,
  onSave,
  onCancel,
  totalMembers,
}) => {
  const getColumnGradient = (index: number, total: number) => {
    if (total === 1) return "#374151"; // gray-700
    const ratio = index / (total - 1);
    const baseGray = 55; // Starting from gray-700 (55, 65, 81)
    const maxGray = 107; // Ending at gray-500 (107, 114, 128)
    const grayValue = Math.round(baseGray + (maxGray - baseGray) * ratio);
    return `rgb(${grayValue}, ${grayValue + 10}, ${grayValue + 20})`;
  };

  // Get first name for display
  const displayName = member.split(" ")[0];
  const needsEllipsis = member !== displayName;

  return (
    <div
      className="text-white font-semibold px-2 py-3 border-r border-slate-700 relative h-full"
      style={{
        backgroundColor: getColumnGradient(index, totalMembers),
      }}
    >
      {isEditing ? (
        <div className="flex flex-col items-center justify-center gap-2 w-full h-full">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") onSave();
              if (e.key === "Escape") onCancel();
            }}
            className="w-full h-6 px-1 text-xs text-white bg-transparent rounded border-none outline-none text-center border-b-2 border-dashed border-white/60"
            autoFocus
            maxLength={30}
            onFocus={(e) => e.target.select()}
          />
          <div className="flex gap-2">
            <button
              onClick={onSave}
              className="text-green-300 hover:text-green-100"
              title="Save"
            >
              <Check className="w-3 h-3" />
            </button>
            <button
              onClick={onCancel}
              className="text-red-300 hover:text-red-100"
              title="Cancel"
            >
              <X className="w-3 h-3" />
            </button>
          </div>
        </div>
      ) : (
        <div className="flex items-center justify-between w-full h-full">
          {/* Member name in the center */}
          <div
            className="flex-1 text-center cursor-pointer select-none hover:bg-slate-700/50 rounded px-1 py-1 transition-colors min-w-0"
            onClick={onEdit}
            title={member}
          >
            <span className="text-sm font-semibold truncate block">
              {displayName}
              {needsEllipsis ? "..." : ""}
            </span>
          </div>

          {/* Edit control on the right */}
          <div className="flex flex-shrink-0 gap-1 opacity-75 hover:opacity-100 transition-opacity">
            <button
              onClick={onEdit}
              className="p-1 hover:bg-slate-600 rounded transition-colors"
              title="Edit name"
            >
              <Edit className="w-3 h-3" />
            </button>

            {totalMembers > 1 && (
              <button
                onClick={onDelete}
                className="p-1 hover:bg-slate-600 hover:text-red-300 rounded transition-colors"
                title="Delete member"
              >
                <Trash2 className="w-3 h-3" />
              </button>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

interface TeamRef {
  scrollToOffset: (offset: number) => void;
}

const Team = forwardRef<TeamRef, TeamProps>(
  (
    {
      courses,
      courseCount,
      teamMembers,
      selections,
      onTeamMembersChange,
      onToggleSelection,
      isSelected,
      onScroll,
    },
    ref,
  ) => {
    const CAST_NAMES = [
      "Richard Hendricks",
      "Erlich Bachman",
      "Dinesh Chugtai",
      "Bertram Gilfoyle",
      "Jared Dunn",
      "Monica Hall",
      "Gavin Belson",
      "Nelson Bighetti",
      "Russ Hanneman",
      "Peter Gregory",
      "Laurie Bream",
      "Ed Chen",
      "Hoover Chan",
      "Don Bang",
      "Carla Walton",
      "Dan Melcher",
      "Fiona Wallace",
      "John Stafford",
      "Kara Swisher",
      "Maximo Reyes",
    ];

    const MAX_TEAM_MEMBERS = 20;
    const MEMBER_COLUMN_WIDTH = 128;

    const [editingMember, setEditingMember] = useState<number | null>(null);
    const [editValue, setEditValue] = useState("");
    
    const baseTableRef = React.useRef<BaseTableRef>(null);

    useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        baseTableRef.current?.scrollToOffset(offset);
      },
    }));

    const handleDeleteTeamMember = (index: number) => {
      if (teamMembers.length <= 1) return;

      const updatedMembers = teamMembers.filter((_, i) => i !== index);
      onTeamMembersChange(updatedMembers);

      if (editingMember === index) {
        setEditingMember(null);
        setEditValue("");
      } else if (editingMember !== null && editingMember > index) {
        setEditingMember(editingMember - 1);
      }
    };

    const handleAddTeamMember = () => {
      if (teamMembers.length >= MAX_TEAM_MEMBERS) return;

      const newMemberName =
        CAST_NAMES[teamMembers.length] ||
        `Team Member ${teamMembers.length + 1}`;
      onTeamMembersChange([...teamMembers, newMemberName]);
    };

    const handleUpdateTeamMember = (index: number, newName: string) => {
      const trimmedName = newName.trim();
      if (!trimmedName) return;

      if (
        teamMembers.some(
          (name, i) =>
            i !== index && name.toLowerCase() === trimmedName.toLowerCase(),
        )
      ) {
        return;
      }

      const updatedMembers = [...teamMembers];
      updatedMembers[index] = trimmedName;
      onTeamMembersChange(updatedMembers);
    };

    const startEditing = (index: number) => {
      setEditingMember(index);
      setEditValue(teamMembers[index]);
    };

    const saveEdit = () => {
      if (editValue.trim() && editingMember !== null) {
        handleUpdateTeamMember(editingMember, editValue.trim());
      }
      setEditingMember(null);
      setEditValue("");
    };

    const cancelEdit = () => {
      setEditingMember(null);
      setEditValue("");
    };

    const canAddMember = teamMembers.length < MAX_TEAM_MEMBERS;

    const columnHelper = createColumnHelper<Course>();

    const columns: ColumnDef<Course, any>[] = React.useMemo(() => [
      ...teamMembers.map((member, memberIndex) =>
        columnHelper.display({
          id: `member-${memberIndex}`,
          header: () => (
            <TeamMemberHeader
              member={member}
              index={memberIndex}
              totalMembers={teamMembers.length}
              isEditing={editingMember === memberIndex}
              editValue={editValue}
              onEdit={() => startEditing(memberIndex)}
              onDelete={() => handleDeleteTeamMember(memberIndex)}
              onEditChange={setEditValue}
              onSave={saveEdit}
              onCancel={cancelEdit}
            />
          ),
          cell: ({ row }) => (
            <SelectionCell
              courseIndex={row.index}
              memberIndex={memberIndex}
              isSelected={isSelected(row.index, memberIndex)}
              onToggle={() => onToggleSelection(row.index, memberIndex)}
              courseName={row.original.Name}
              memberName={member}
            />
          ),
          footer: () => {
            const selectedCount = courses.reduce((count, _, courseIndex) => {
              return count + (isSelected(courseIndex, memberIndex) ? 1 : 0);
            }, 0);
            return `${selectedCount} Selected`;
          },
          size: MEMBER_COLUMN_WIDTH,
          minSize: MEMBER_COLUMN_WIDTH,
          maxSize: MEMBER_COLUMN_WIDTH,
          enableResizing: false,
        }),
      ),
      columnHelper.display({
        id: "add-member",
        header: () => (
          <div className="text-white font-semibold px-2 py-3 border-r border-slate-700 bg-gray-600 flex items-center justify-center h-full">
            <button
              onClick={handleAddTeamMember}
              disabled={!canAddMember}
              className={`w-full h-full bg-transparent border-none text-white transition-colors rounded flex items-center justify-center gap-1 font-semibold ${
                canAddMember
                  ? "hover:bg-slate-500 cursor-pointer"
                  : "opacity-50 cursor-not-allowed"
              }`}
              title={
                canAddMember
                  ? "Add team member"
                  : `Maximum ${MAX_TEAM_MEMBERS} members allowed`
              }
            >
              <Plus className="w-5 h-5" />
            </button>
          </div>
        ),
        cell: () => <div className="h-12"></div>,
        footer: () => canAddMember ? "Add More" : "Max Reached",
        size: MEMBER_COLUMN_WIDTH,
        minSize: MEMBER_COLUMN_WIDTH,
        maxSize: MEMBER_COLUMN_WIDTH,
        enableResizing: false,
      }),
    ], [
      teamMembers,
      editingMember,
      editValue,
      canAddMember,
      courses,
      isSelected,
      columnHelper,
    ]);

    const table = useReactTable({
      data: courses,
      columns,
      getCoreRowModel: getCoreRowModel(),
      enableColumnResizing: false,
      enableSorting: false,
    });

    const renderFooter = () => <TeamInsights />;

    return (
      <BaseTable
        ref={baseTableRef}
        table={table}
        onScroll={onScroll}
        headerClassName="bg-slate-800"
        rowHeight={48}
        renderFooter={renderFooter}
      />
    );
  },
);

Team.displayName = "Team";

export default Team;