import React, { useState } from 'react';
import { Plus, Edit, Check, X } from 'lucide-react';
import TeamControls from './TeamControls';
import TeamInsights from './TeamInsights';

interface Course {
  ID: string;
  Name: string;
}

interface SelectionCellProps {
  isSelected: boolean;
  onToggle: () => void;
  courseName: string;
  memberName: string;
  columnIndex: number;
}

interface TeamMemberHeaderProps {
  member: string;
  index: number;
  onEdit: () => void;
  isEditing: boolean;
  editValue: string;
  onEditChange: (value: string) => void;
  onSave: () => void;
  onCancel: () => void;
}

interface TeamProps {
  teamMembers: string[];
  courses: Course[];
  onAddTeamMember: () => void;
  onUpdateTeamMember: (index: number, name: string) => void;
  onToggleSelection: (courseIndex: number, memberIndex: number) => void;
  isSelected: (courseIndex: number, memberIndex: number) => boolean;
}

const SelectionCell = ({ isSelected, onToggle, courseName, memberName, columnIndex }: SelectionCellProps) => {
  const getColumnClass = (index: number) => {
    return index % 2 === 0 
      ? 'bg-gray-100 hover:bg-gray-200' 
      : 'bg-gray-200 hover:bg-gray-300';
  };

  return (
    <td className={`w-32 h-12 text-center cursor-pointer transition-all duration-200 border border-gray-300 ${
      isSelected 
        ? (columnIndex % 2 === 0 ? 'bg-orange-100 border-orange-400' : 'bg-orange-100 border-orange-400')
        : getColumnClass(columnIndex)
    }`}>
      <button
        onClick={onToggle}
        className={`w-full h-full flex items-center justify-center text-lg font-bold transition-colors ${
          isSelected ? 'text-orange-600' : 'text-gray-400 hover:text-orange-600'
        }`}
        title={`Toggle ${courseName} for ${memberName}`}
      >
        {isSelected ? 'âœ“' : ''}
      </button>
    </td>
  );
};

const TeamMemberHeader = ({ member, index, onEdit, isEditing, editValue, onEditChange, onSave, onCancel }: TeamMemberHeaderProps) => {
  const getHeaderClass = (index: number) => {
    return index % 2 === 0 
      ? 'bg-gray-600' 
      : 'bg-gray-700';
  };

  return (
    <th className={`w-32 h-12 text-center sticky top-0 z-10 text-white font-semibold ${getHeaderClass(index)}`}>
      {isEditing ? (
        <div className="flex items-center justify-center gap-1 px-1">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') onSave();
              if (e.key === 'Escape') onCancel();
            }}
            className="w-20 h-6 px-1 text-xs text-gray-800 rounded border-none outline-none text-center"
            autoFocus
          />
          <button onClick={onSave} className="text-green-400 hover:text-green-300">
            <Check className="w-3 h-3" />
          </button>
          <button onClick={onCancel} className="text-red-400 hover:text-red-300">
            <X className="w-3 h-3" />
          </button>
        </div>
      ) : (
        <div className="flex items-center justify-center gap-1">
          <button
            onClick={onEdit}
            className="font-semibold hover:bg-white/20 rounded transition-colors px-1 text-center"
            title="Click to edit name"
          >
            {member}
          </button>
          <button onClick={onEdit} className="text-gray-300 hover:text-white">
            <Edit className="w-3 h-3" />
          </button>
        </div>
      )}
    </th>
  );
};

const Team: React.FC<TeamProps> = ({ teamMembers, courses, onAddTeamMember, onUpdateTeamMember, onToggleSelection, isSelected }) => {
  const [editingMember, setEditingMember] = useState<number | null>(null);
  const [editValue, setEditValue] = useState('');

  const startEditing = (index: number) => {
    setEditingMember(index);
    setEditValue(teamMembers[index]);
  };

  const saveEdit = () => {
    if (editValue.trim() && editingMember !== null) {
      onUpdateTeamMember(editingMember, editValue.trim());
    }
    setEditingMember(null);
    setEditValue('');
  };

  const cancelEdit = () => {
    setEditingMember(null);
    setEditValue('');
  };

  return (
    <div className="flex flex-col h-full">
      <TeamControls />
      <div className="flex-1 overflow-auto">
        <table className="w-full">
          <thead>
            <tr>
              {teamMembers.map((member, index) => (
                <TeamMemberHeader
                  key={index}
                  member={member}
                  index={index}
                  isEditing={editingMember === index}
                  editValue={editValue}
                  onEdit={() => startEditing(index)}
                  onEditChange={setEditValue}
                  onSave={saveEdit}
                  onCancel={cancelEdit}
                />
              ))}
              <th className="w-24 h-12 bg-orange-500 text-white font-semibold sticky top-0 z-10 border-none">
                <button 
                  onClick={onAddTeamMember}
                  className="w-full h-full bg-transparent border-none text-white hover:bg-orange-600 transition-colors rounded flex items-center justify-center gap-1 font-semibold"
                  title="Add team member"
                >
                  <Plus className="w-5 h-5" />
                </button>
              </th>
            </tr>
          </thead>
          <tbody>
            {courses.map((course, courseIndex) => (
              <tr key={course.ID} className="h-12 border-b border-gray-200">
                {teamMembers.map((member, memberIndex) => (
                  <SelectionCell
                    key={memberIndex}
                    isSelected={isSelected(courseIndex, memberIndex)}
                    onToggle={() => onToggleSelection(courseIndex, memberIndex)}
                    courseName={course.Name}
                    memberName={member}
                    columnIndex={memberIndex}
                  />
                ))}
                <td className="w-24 h-12 bg-transparent"></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <TeamInsights />
    </div>
  );
};

export default Team;
