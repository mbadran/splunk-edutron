import React, { useState, useEffect } from 'react';
import { ChevronLeft, Plus, ExternalLink, Users, BookOpen, Clock, DollarSign, Monitor, GraduationCap, Edit, Check, X, Save, Undo, Redo, PenTool } from 'lucide-react';

// Silicon Valley cast member names
const CAST_NAMES = [
  'Richard Hendricks',
  'Erlich Bachman', 
  'Dinesh Chugtai',
  'Bertram Gilfoyle',
  'Jared Dunn',
  'Monica Hall',
  'Gavin Belson',
  'Big Head'
];

const loadCoursesFromCSV = async () => {
  try {
    const response = await fetch('/courses.csv');
    if (!response.ok) {
      throw new Error(`Failed to load courses.csv: ${response.status}`);
    }
    const text = await response.text();
    
    const lines = text.split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
    
    const courses = [];
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      const values = line.split(',').map(v => v.trim());
      if (values.length < headers.length) continue;
      
      const course = {};
      headers.forEach((header, index) => {
        let value = values[index] || '';
        
        if (header === 'Duration' || header === 'Price') {
          value = parseFloat(value) || 0;
        } else if (header === 'STEP ID') {
          course['STEP_ID'] = value;
          return;
        }
        
        course[header] = value;
      });
      
      if (course.ID && course.Name) {
        courses.push(course);
      }
    }
    
    return courses;
  } catch (error) {
    console.error('Error loading courses:', error);
    return [];
  }
};

// Welcome Screen Component
const WelcomeScreen = ({ onCreatePlan, onLoadPlan }) => {
  useEffect(() => {
    document.title = "Splunk EDUTRON — Create, Manage, and Sell Splunk EDU Training Plans";
  }, []);

  return (
    <div 
      className="min-h-screen flex items-center justify-center p-4 relative"
      style={{
        background: 'linear-gradient(135deg, #1e40af 0%, #7c3aed 100%)'
      }}
    >
      <div className="max-w-2xl mx-auto text-center relative z-10">
        <div className="bg-gradient-to-br from-blue-900/90 via-purple-800/90 to-blue-900/90 backdrop-blur-md rounded-3xl p-12 shadow-2xl border border-white/20">
          <div className="mb-8">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
              <GraduationCap className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-4 tracking-tight">
              Splunk <span className="text-orange-300">EDUTRON</span>
            </h1>
            <p className="text-lg text-white/90 font-light italic mb-2">
              <em>Splunk EDU training plans.</em>
            </p>
            <p className="text-sm text-white/80 font-light italic">
              <em>Boil 'em, mash 'em, stick 'em in a stew.</em>
            </p>
          </div>

          <div className="space-y-4 mb-8">
            <button 
              onClick={onCreatePlan}
              className="w-full bg-white text-gray-800 hover:bg-gray-50 font-semibold py-4 px-8 rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg flex items-center justify-center gap-3"
            >
              <PenTool className="w-5 h-5" />
              Create Training Plan
            </button>
            
            <button 
              onClick={onLoadPlan}
              className="w-full bg-transparent border-2 border-white text-white hover:bg-white hover:text-gray-800 font-semibold py-4 px-8 rounded-xl transition-all duration-200 transform hover:scale-105 flex items-center justify-center gap-3"
            >
              <ExternalLink className="w-5 h-5" />
              Load Existing Plan
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-white/80">
            <div className="flex items-center gap-2">
              <Users className="w-4 h-4" />
              <span>Multi-team support</span>
            </div>
            <div className="flex items-center gap-2">
              <Monitor className="w-4 h-4" />
              <span>Interactive planning</span>
            </div>
            <div className="flex items-center gap-2">
              <ExternalLink className="w-4 h-4" />
              <span>Direct course links</span>
            </div>
          </div>
        </div>
      </div>
      
      <footer className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white/60 text-sm">
        v0.0.1 • By <a href="mailto:mohammba&#64;cisco&#46;com?Subject=Splunk%20EDUTRON" className="text-orange-300 hover:text-orange-200">Mo Badran</a>
      </footer>
    </div>
  );
};

// Course Selection Cell Component
const SelectionCell = ({ isSelected, onToggle, courseName, memberName }) => {
  return (
    <td className={`w-32 h-12 text-center cursor-pointer transition-all duration-200 border border-gray-300 ${
      isSelected ? 'bg-orange-100 border-orange-400' : 'bg-white hover:bg-gray-200'
    }`}>
      <button
        onClick={onToggle}
        className={`w-full h-full flex items-center justify-center text-lg font-bold transition-colors ${
          isSelected ? 'text-orange-600' : 'text-gray-400 hover:text-orange-600'
        }`}
        title={`Toggle ${courseName} for ${memberName}`}
      >
        {isSelected ? '✓' : ''}
      </button>
    </td>
  );
};

// Team Member Header Component
const TeamMemberHeader = ({ member, index, onEdit, isEditing, editValue, onEditChange, onSave, onCancel }) => {
  return (
    <th className="w-32 h-12 text-center sticky top-0 z-10 bg-gray-600 text-white font-bold">
      {isEditing ? (
        <div className="flex items-center justify-center gap-1 px-1">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') onSave();
              if (e.key === 'Escape') onCancel();
            }}
            className="w-20 h-6 px-1 text-xs text-gray-800 rounded border-none outline-none text-center"
            autoFocus
          />
          <button onClick={onSave} className="text-green-400 hover:text-green-300">
            <Check className="w-3 h-3" />
          </button>
          <button onClick={onCancel} className="text-red-400 hover:text-red-300">
            <X className="w-3 h-3" />
          </button>
        </div>
      ) : (
        <div className="flex items-center justify-center gap-1">
          <button
            onClick={onEdit}
            className="text-sm font-bold hover:bg-white/20 rounded transition-colors px-1 text-center"
            title="Click to edit name"
          >
            {member}
          </button>
          <button onClick={onEdit} className="text-gray-300 hover:text-white">
            <Edit className="w-3 h-3" />
          </button>
        </div>
      )}
    </th>
  );
};

// Editable Title Component
const EditableTitle = ({ title, onUpdate }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(title);

  const startEditing = () => {
    setIsEditing(true);
    setEditValue(title);
  };

  const saveEdit = () => {
    if (editValue.trim()) {
      onUpdate(editValue.trim());
    }
    setIsEditing(false);
  };

  const cancelEdit = () => {
    setEditValue(title);
    setIsEditing(false);
  };

  if (isEditing) {
    return (
      <div className="flex items-center gap-2">
        <input
          type="text"
          value={editValue}
          onChange={(e) => setEditValue(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter') saveEdit();
            if (e.key === 'Escape') cancelEdit();
          }}
          className="text-2xl font-bold text-gray-900 bg-white rounded px-2 py-1 border-2 border-blue-500 outline-none min-w-0"
          autoFocus
        />
        <button onClick={saveEdit} className="text-green-600 hover:text-green-700">
          <Check className="w-5 h-5" />
        </button>
        <button onClick={cancelEdit} className="text-red-600 hover:text-red-700">
          <X className="w-5 h-5" />
        </button>
      </div>
    );
  }

  return (
    <div className="flex items-center gap-2">
      <button
        onClick={startEditing}
        className="text-2xl font-bold text-white hover:bg-white/20 rounded px-2 py-1 transition-all"
        title="Click to edit title"
      >
        {title}
      </button>
      <button onClick={startEditing} className="text-gray-300 hover:text-white">
        <Edit className="w-4 h-4" />
      </button>
    </div>
  );
};

// Course Grid Component
const CourseGrid = ({ courses, teamMembers, onAddTeamMember, onUpdateTeamMember, onToggleSelection, isSelected }) => {
  const [editingMember, setEditingMember] = useState(null);
  const [editValue, setEditValue] = useState('');

  const startEditing = (index) => {
    setEditingMember(index);
    setEditValue(teamMembers[index]);
  };

  const saveEdit = () => {
    if (editValue.trim()) {
      onUpdateTeamMember(editingMember, editValue.trim());
    }
    setEditingMember(null);
    setEditValue('');
  };

  const cancelEdit = () => {
    setEditingMember(null);
    setEditValue('');
  };

  const generateCourseUrl = (stepId) => {
    if (!stepId) return '#';
    return `https://education.splunk.com/Saba/Web_spf/NA10P2PRD105/guestapp/ledetail/${stepId}?fromAutoSuggest=true`;
  };

  const getCategoryColor = (category) => {
    const colors = {
      'Core': 'bg-orange-500 text-white',
      'Power User': 'bg-blue-500 text-white',
      'Admin': 'bg-green-500 text-white',
      'Security': 'bg-red-500 text-white',
      'ITSI': 'bg-purple-500 text-white'
    };
    return colors[category] || 'bg-gray-500 text-white';
  };

  const getModeColor = (mode) => {
    const colors = {
      'E': 'bg-green-100 text-green-800',
      'EL': 'bg-orange-100 text-orange-800',
      'ILT': 'bg-blue-100 text-blue-800'
    };
    return colors[mode] || 'bg-gray-100 text-gray-800';
  };

  const getModeTooltip = (mode) => {
    const tooltips = {
      'E': 'eLearning (No Labs)',
      'EL': 'eLearning (With Labs)', 
      'ILT': 'Instructor-Led Training'
    };
    return tooltips[mode] || mode;
  };

  return (
    <div className="flex-1 p-6 bg-gray-100 mt-6">
      <p className="text-gray-600 mb-4 italic">Click on the cells below to select courses for each team member.</p>
      
      <div className="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-200">
        <div className="flex max-h-[calc(100vh-300px)]">
          {/* Course Information Section */}
          <div className="flex-shrink-0 w-1/2 min-w-[600px] max-w-[800px] border-r-2 border-gray-300 overflow-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-orange-500 to-pink-500 text-white sticky top-0 z-10">
                  <th className="px-4 py-3 text-left font-semibold w-32">ID</th>
                  <th className="px-4 py-3 text-left font-semibold min-w-[250px]">Course</th>
                  <th className="px-4 py-3 text-left font-semibold min-w-[100px]">Category</th>
                  <th className="px-4 py-3 text-left font-semibold w-20">Duration</th>
                  <th className="px-4 py-3 text-center font-semibold w-16">Mode</th>
                  <th className="px-4 py-3 text-right font-semibold w-20">Price</th>
                </tr>
              </thead>
              <tbody>
                {courses.map((course, index) => (
                  <tr key={course.ID} className={`h-12 border-b border-gray-200 ${
                    index % 2 === 0 ? 'bg-white' : 'bg-gray-50'
                  } hover:bg-orange-50 transition-colors`}>
                    <td className="px-4 py-2">
                      <code className="text-sm font-mono text-gray-700 bg-gray-100 px-2 py-1 rounded">
                        {course.ID}
                      </code>
                    </td>
                    <td className="px-4 py-2">
                      {course.STEP_ID ? (
                        <a 
                          href={generateCourseUrl(course.STEP_ID)}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group"
                        >
                          {course.Name}
                          <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity" />
                        </a>
                      ) : (
                        <span className="font-medium text-gray-900">{course.Name}</span>
                      )}
                    </td>
                    <td className="px-4 py-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(course.Category)}`}>
                        {course.Category}
                      </span>
                    </td>
                    <td className="px-4 py-2 text-left">
                      <div className="flex items-center gap-1" title="Hours">
                        <Clock className="w-3 h-3 text-gray-500" />
                        <span className="text-sm font-medium text-gray-900">{course.Duration}</span>
                      </div>
                    </td>
                    <td className="px-4 py-2 text-center">
                      <span 
                        className={`px-2 py-1 rounded text-xs font-medium ${getModeColor(course.Mode)} cursor-help`}
                        title={getModeTooltip(course.Mode)}
                      >
                        {course.Mode}
                      </span>
                    </td>
                    <td className="px-4 py-2 text-right">
                      <div className="flex items-center justify-end gap-1">
                        {course.Price === 0 ? (
                          <span className="text-green-600 font-normal text-sm bg-green-50 px-2 py-1 rounded">Free</span>
                        ) : (
                          <>
                            <DollarSign className="w-3 h-3 text-gray-500" />
                            <span className="font-semibold text-sm text-gray-900">{course.Price.toLocaleString()}</span>
                          </>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Team Members Section */}
          <div className="flex-1 overflow-auto">
            <table className="w-full">
              <thead>
                <tr>
                  {teamMembers.map((member, index) => (
                    <TeamMemberHeader
                      key={index}
                      member={member}
                      index={index}
                      isEditing={editingMember === index}
                      editValue={editValue}
                      onEdit={() => startEditing(index)}
                      onEditChange={setEditValue}
                      onSave={saveEdit}
                      onCancel={cancelEdit}
                    />
                  ))}
                  <th className="w-24 h-12 bg-orange-500 text-white font-semibold sticky top-0 z-10 border-none">
                    <button 
                      onClick={onAddTeamMember}
                      className="w-full h-full bg-transparent border-none text-white hover:bg-orange-600 transition-colors rounded flex items-center justify-center gap-1"
                      title="Add team member"
                    >
                      <Plus className="w-5 h-5" />
                    </button>
                  </th>
                </tr>
              </thead>
              <tbody>
                {courses.map((course, courseIndex) => (
                  <tr key={course.ID} className="h-12 border-b border-gray-200">
                    {teamMembers.map((member, memberIndex) => (
                      <SelectionCell
                        key={memberIndex}
                        isSelected={isSelected(courseIndex, memberIndex)}
                        onToggle={() => onToggleSelection(courseIndex, memberIndex)}
                        courseName={course.Name}
                        memberName={member}
                      />
                    ))}
                    <td className="w-24 h-12 bg-transparent"></td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

// Plan Builder Component
const PlanBuilder = ({ onBackToWelcome, courses }) => {
  const [teamMembers, setTeamMembers] = useState([CAST_NAMES[0]]);
  const [selections, setSelections] = useState({});
  const [planTitle, setPlanTitle] = useState('Pied Piper / Splunk Training Plan');
  const [history, setHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);

  useEffect(() => {
    document.title = "Splunk EDUTRON — Create Training Plan";
    window.history.replaceState(null, '', '/#create');
  }, []);

  const saveState = () => {
    const state = {
      teamMembers: [...teamMembers],
      selections: {...selections},
      planTitle
    };
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(state);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  const handleUndo = () => {
    if (historyIndex > 0) {
      const prevState = history[historyIndex - 1];
      setTeamMembers(prevState.teamMembers);
      setSelections(prevState.selections);
      setPlanTitle(prevState.planTitle);
      setHistoryIndex(historyIndex - 1);
    }
  };

  const handleRedo = () => {
    if (historyIndex < history.length - 1) {
      const nextState = history[historyIndex + 1];
      setTeamMembers(nextState.teamMembers);
      setSelections(nextState.selections);
      setPlanTitle(nextState.planTitle);
      setHistoryIndex(historyIndex + 1);
    }
  };

  const handleAddTeamMember = () => {
    saveState();
    const newMemberName = CAST_NAMES[teamMembers.length] || `Team Member ${teamMembers.length + 1}`;
    setTeamMembers([...teamMembers, newMemberName]);
  };

  const handleUpdateTeamMember = (index, newName) => {
    saveState();
    const updatedMembers = [...teamMembers];
    updatedMembers[index] = newName;
    setTeamMembers(updatedMembers);
  };

  const handleToggleSelection = (courseIndex, memberIndex) => {
    saveState();
    const key = `${courseIndex}-${memberIndex}`;
    setSelections(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const handleUpdateTitle = (newTitle) => {
    saveState();
    setPlanTitle(newTitle);
  };

  const isSelected = (courseIndex, memberIndex) => {
    const key = `${courseIndex}-${memberIndex}`;
    return selections[key] || false;
  };

  const getSelectedCount = () => {
    return Object.values(selections).filter(Boolean).length;
  };

  const handleSave = () => {
    alert('Save functionality coming soon! This will provide a download option.');
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      {/* Enhanced Header */}
      <div className="bg-gradient-to-r from-gray-700 to-gray-600 shadow-lg border-b-2 border-orange-500 sticky top-0 z-20">
        <div className="px-6 py-4 flex items-center gap-4">
          <button 
            onClick={onBackToWelcome}
            className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-orange-500 to-pink-500 text-white rounded-lg hover:from-orange-600 hover:to-pink-600 transition-all font-medium shadow-lg"
          >
            <ChevronLeft className="w-4 h-4" />
            Splunk EDUTRON
          </button>
          
          <div className="flex-1 min-w-0">
            <EditableTitle title={planTitle} onUpdate={handleUpdateTitle} />
          </div>

          <div className="flex items-center gap-4">
            <button
              onClick={handleUndo}
              disabled={historyIndex <= 0}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              <Undo className="w-4 h-4" />
              Undo
            </button>
            
            <button
              onClick={handleRedo}
              disabled={historyIndex >= history.length - 1}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              <Redo className="w-4 h-4" />
              Redo
            </button>

            <button
              onClick={handleSave}
              className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium shadow-lg"
            >
              <Save className="w-4 h-4" />
              Save Training Plan
            </button>
          </div>

          <div className="flex items-center gap-4 text-sm text-white">
            <div className="flex items-center gap-1">
              <Users className="w-4 h-4" />
              <span>{teamMembers.length} members</span>
            </div>
            <div className="flex items-center gap-1">
              <BookOpen className="w-4 h-4" />
              <span>{courses.length} courses</span>
            </div>
            <div className="flex items-center gap-1">
              <Check className="w-4 h-4" />
              <span>{getSelectedCount()} selected</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main Grid */}
      <CourseGrid
        courses={courses}
        teamMembers={teamMembers}
        onAddTeamMember={handleAddTeamMember}
        onUpdateTeamMember={handleUpdateTeamMember}
        onToggleSelection={handleToggleSelection}
        isSelected={isSelected}
      />

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 py-3 text-center text-gray-500 text-sm">
        v0.0.1
      </footer>
    </div>
  );
};

// Main App Component
const SplunkEdutron = () => {
  const [currentScreen, setCurrentScreen] = useState('welcome');
  const [courses, setCourses] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleCreatePlan = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const loadedCourses = await loadCoursesFromCSV();
      if (loadedCourses.length === 0) {
        throw new Error('No courses found in courses.csv');
      }
      setCourses(loadedCourses);
      setCurrentScreen('create');
    } catch (err) {
      setError(`Failed to load courses: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleBackToWelcome = () => {
    setCurrentScreen('welcome');
    setCourses([]);
    setError(null);
    window.history.replaceState(null, '', '/');
  };

  const handleLoadPlan = () => {
    alert('Load functionality coming soon!');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-800 via-slate-700 to-blue-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-white/30 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white">Loading courses...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-800 via-slate-700 to-blue-900 flex items-center justify-center p-4">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
            <div className="text-red-400 mb-4">⚠️ Error</div>
            <p className="text-white mb-4">{error}</p>
            <p className="text-white/70 text-sm mb-6">
              Make sure courses.csv is in your /public directory
            </p>
            <button 
              onClick={handleBackToWelcome}
              className="bg-white text-gray-800 hover:bg-gray-50 font-semibold py-2 px-6 rounded-lg transition-colors"
            >
              Back to Home
            </button>
          </div>
        </div>
        <footer className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white/60 text-sm">
          v0.0.1 • By <a href="mailto:mohammba&#64;cisco&#46;com?Subject=Splunk%20EDUTRON" className="text-orange-300 hover:text-orange-200">Mo Badran</a>
        </footer>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      {currentScreen === 'welcome' && (
        <WelcomeScreen 
          onCreatePlan={handleCreatePlan}
          onLoadPlan={handleLoadPlan}
        />
      )}
      
      {currentScreen === 'create' && (
        <PlanBuilder 
          onBackToWelcome={handleBackToWelcome}
          courses={courses}
        />
      )}
    </div>
  );
};

export default SplunkEdutron;
