import React, { useEffect } from "react";
import { useAtom } from "jotai";
import { atom } from "jotai";
import { Team, TeamMember } from "@/types/types";
import { setStatusAtom } from "@/atoms/globalAtoms";
import {
  loadTeamMembersFromStorage,
  saveTeamMembersToStorage,
} from "@/utils/teamLoader";

// Shared atoms for team state
export const teamDataAtom = atom<TeamMember[]>([]);
export const teamLoadingAtom = atom<boolean>(false);
export const teamErrorAtom = atom<Error | null>(null);

interface TeamBaseProps {
  children: (data: {
    teamMembers: TeamMember[];
    isLoading: boolean;
    error: Error | null;
    refetch: () => void;
    addMember: (name: string) => void;
    updateMember: (id: string, updates: Partial<TeamMember>) => void;
    deleteMember: (id: string) => void;
  }) => React.ReactNode;
}

const TeamBase: React.FC<TeamBaseProps> = ({ children }) => {
  const [teamMembers, setTeamMembers] = useAtom(teamDataAtom);
  const [isLoading, setIsLoading] = useAtom(teamLoadingAtom);
  const [error, setError] = useAtom(teamErrorAtom);
  const [, setWorking] = useAtom(setStatusAtom);

  const loadTeamMembers = async () => {
    if (isLoading) return;

    setIsLoading(true);
    setError(null);
    setWorking({ isWorking: true, message: "Loading team members" });

    try {
      const loadedMembers = await loadTeamMembersFromStorage();

      // Debug log to see what data is loaded
      if (loadedMembers.length > 0) {
        console.log("Loaded team members:", loadedMembers);
      }

      setTeamMembers(loadedMembers);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err : new Error("Unknown error occurred");
      setError(errorMessage);
      setTeamMembers([]);
      console.error("Error loading team members:", errorMessage);
    } finally {
      setIsLoading(false);
      setWorking({ isWorking: false, message: "" });
    }
  };

  const addMember = async (name: string) => {
    if (!name.trim()) return;

    setWorking({ isWorking: true, message: "Adding team member" });

    try {
      const newMember: TeamMember = {
        id: `member-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        name: name.trim(),
        email: "",
        role: "",
      };

      const updatedMembers = [...teamMembers, newMember];
      setTeamMembers(updatedMembers);
      await saveTeamMembersToStorage(updatedMembers);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err : new Error("Failed to add team member");
      setError(errorMessage);
      console.error("Error adding team member:", errorMessage);
    } finally {
      setWorking({ isWorking: false, message: "" });
    }
  };

  const updateMember = async (id: string, updates: Partial<TeamMember>) => {
    setWorking({ isWorking: true, message: "Updating team member" });

    try {
      const updatedMembers = teamMembers.map((member) =>
        member.id === id ? { ...member, ...updates } : member,
      );

      setTeamMembers(updatedMembers);
      await saveTeamMembersToStorage(updatedMembers);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err : new Error("Failed to update team member");
      setError(errorMessage);
      console.error("Error updating team member:", errorMessage);
    } finally {
      setWorking({ isWorking: false, message: "" });
    }
  };

  const deleteMember = async (id: string) => {
    setWorking({ isWorking: true, message: "Deleting team member" });

    try {
      const updatedMembers = teamMembers.filter((member) => member.id !== id);
      setTeamMembers(updatedMembers);
      await saveTeamMembersToStorage(updatedMembers);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err : new Error("Failed to delete team member");
      setError(errorMessage);
      console.error("Error deleting team member:", errorMessage);
    } finally {
      setWorking({ isWorking: false, message: "" });
    }
  };

  const refetch = () => {
    loadTeamMembers();
  };

  // Load team members on mount if not already loaded
  useEffect(() => {
    if (teamMembers.length === 0 && !isLoading && !error) {
      loadTeamMembers();
    }
  }, []);

  // Show loading state
  if (isLoading) {
    return (
      <div
        id="team-loading"
        className="h-full flex items-center justify-center"
      >
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-slate-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading team members...</p>
        </div>
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div id="team-error" className="h-full flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-red-600 mb-4">
            <svg
              className="w-12 h-12 mx-auto"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Failed to Load Team Members
          </h3>
          <p className="text-gray-600 mb-4">{error.message}</p>
          <button
            onClick={refetch}
            className="bg-slate-600 hover:bg-slate-700 text-white px-4 py-2 rounded transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <>
      {children({
        teamMembers,
        isLoading,
        error,
        refetch,
        addMember,
        updateMember,
        deleteMember,
      })}
    </>
  );
};

export default TeamBase;
