import React from "react";
import { Undo, Redo, RotateCcw } from "lucide-react";
import { useAtom } from "jotai";
import { atomWithStorage } from "jotai/utils";
import {
  setStatusAtom,
  canUndoAtom,
  canRedoAtom,
  undoAtom,
  redoAtom,
} from "@/atoms/globalAtoms";
import { executeActionAtom } from "@/atoms/history/actionExecutor";
import { generateActionId } from "@/atoms/history/historyAtom";

// Table state atoms from CatalogTable.tsx
const tableSortingAtom = atomWithStorage("catalog-table-sorting", []);
const tableFiltersAtom = atomWithStorage("catalog-table-filters", []);
const tableColumnOrderAtom = atomWithStorage("catalog-table-column-order", []);

interface CatalogActionsProps {
  onUndo: () => void;
  onRedo: () => void;
  canUndo: boolean;
  canRedo: boolean;
}

const CatalogActions = ({
  onUndo,
  onRedo,
  canUndo,
  canRedo,
}: CatalogActionsProps) => {
  const [, setStatus] = useAtom(setStatusAtom);
  const [, executeAction] = useAtom(executeActionAtom);
  const [tableSorting, setTableSorting] = useAtom(tableSortingAtom);
  const [tableFilters, setTableFilters] = useAtom(tableFiltersAtom);
  const [tableColumnOrder, setTableColumnOrder] = useAtom(tableColumnOrderAtom);

  const handleReset = () => {
    // Check if there are any table settings to reset
    const hasSettings = 
      tableSorting.length > 0 || 
      tableFilters.length > 0 || 
      tableColumnOrder.length > 0;

    if (!hasSettings) {
      setStatus({ isWorking: false, message: "No table settings to reset" });
      setTimeout(() => setStatus({ isWorking: false, message: "" }), 2000);
      return;
    }

    setStatus({ isWorking: true, message: "Resetting table settings..." });

    // Create reset action for history tracking
    const resetAction = {
      type: "RESET_TABLE_SETTINGS" as const,
      timestamp: new Date().toISOString(),
      id: generateActionId(),
      payload: {
        tableId: "catalog",
        oldSorting: [...tableSorting],
        oldFilters: [...tableFilters],
        oldOrder: [...tableColumnOrder],
      },
    };

    // Execute the reset action (will be tracked in history)
    executeAction(resetAction);

    // Clear all table settings
    setTableSorting([]);
    setTableFilters([]);
    setTableColumnOrder([]);

    setTimeout(() => {
      setStatus({ isWorking: false, message: "Table settings reset!" });
      setTimeout(() => {
        setStatus({ isWorking: false, message: "" });
      }, 1500);
    }, 500);
  };

  return (
    <div className="flex items-start justify-center gap-1 sm:gap-2 lg:gap-3 flex-wrap pl-3">
      <button
        onClick={onUndo}
        disabled={!canUndo}
        title="Undo"
        className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors"
      >
        <Undo className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
      </button>

      <button
        onClick={onRedo}
        disabled={!canRedo}
        title="Redo"
        className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors"
      >
        <Redo className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
      </button>

      {/* Divider */}
      <div className="w-2 sm:w-4 lg:w-6"></div>

      <button
        onClick={handleReset}
        title="Reset Table Settings"
        className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 transition-colors"
        aria-label="Reset Table Settings"
      >
        <RotateCcw className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
      </button>
    </div>
  );
};

export default CatalogActions;