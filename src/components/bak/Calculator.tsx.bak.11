import React, { useState } from 'react';
import { Copy, Edit, DollarSign, X } from 'lucide-react';

interface CalculatorProps {
  total?: number;
  onBudgetChange?: (budget: number | null) => void;
}

const Calculator = ({ total = 0, onBudgetChange }: CalculatorProps) => {
  const [budget, setBudget] = useState<number | null>(null);
  const [isEditingBudget, setIsEditingBudget] = useState(false);
  const [budgetInput, setBudgetInput] = useState('0');
  const [isCreditsMode, setIsCreditsMode] = useState(false);

  const handleSetBudget = () => {
    setIsEditingBudget(true);
    setBudgetInput('0');
  };

  const handleBudgetSubmit = () => {
    const value = parseFloat(budgetInput) || 0;
    if (value === 0) {
      setBudget(null);
      onBudgetChange?.(null);
    } else {
      setBudget(value);
      onBudgetChange?.(value);
    }
    setIsEditingBudget(false);
  };

  const handleBudgetKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleBudgetSubmit();
    }
    if (e.key === 'Escape') {
      setIsEditingBudget(false);
      setBudgetInput(budget?.toString() || '0');
    }
  };

  const handleEditBudget = () => {
    setIsEditingBudget(true);
    setBudgetInput(budget?.toString() || '0');
  };

  const handleDeleteBudget = () => {
    setBudget(null);
    setIsEditingBudget(false);
    onBudgetChange?.(null);
  };

  const handleCopy = (value: string) => {
    navigator.clipboard.writeText(value);
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const displayTotal = isCreditsMode ? total / 10 : total;
  const displayBudget = budget && isCreditsMode ? budget / 10 : budget;
  const difference = budget ? budget - total : 0;
  const displayDifference = isCreditsMode ? difference / 10 : difference;

  const currencySymbol = isCreditsMode ? '' : '$';
  const currencyUnit = '';

  const shouldShowBudgetButton = !isEditingBudget && (budget === null || budget === 0);

  return (
    <div className="flex w-full min-w-0">
      {/* Main content */}
      <div className="flex flex-col gap-2 flex-1">
        {/* Budget Row */}
        <div className="flex items-center">
          {shouldShowBudgetButton ? (
            <button
              onClick={handleSetBudget}
              className="bg-gradient-to-r from-orange-500 to-pink-500 text-white rounded-md hover:from-orange-600 hover:to-pink-600 transition-colors font-bold text-sm px-3 py-2 whitespace-nowrap transform-none min-w-[280px]"
            >
              Set Budget
            </button>
          ) : (
            <div className="relative">
              {isEditingBudget ? (
                <>
                  <input
                    type="number"
                    value={budgetInput}
                    onChange={(e) => setBudgetInput(e.target.value)}
                    onBlur={handleBudgetSubmit}
                    onKeyDown={handleBudgetKeyPress}
                    className="px-3 py-1.5 border-2 border-orange-500 rounded-md focus:outline-none focus:border-orange-600 bg-transparent text-white text-sm font-bold w-[200px]"
                    placeholder="Enter budget"
                    autoFocus
                  />
                  {/* Edit controls positioned within total field width */}
                  <div className="absolute top-0 right-0 translate-x-full ml-2 flex items-center h-full">
                    <div className="flex items-center gap-1 w-[68px] justify-end">
                      <button
                        onClick={handleEditBudget}
                        className="p-1.5 text-gray-300 hover:text-white transition-colors flex-shrink-0"
                        title="Edit budget"
                      >
                        <Edit className="w-3.5 h-3.5" />
                      </button>
                      <button
                        onClick={handleDeleteBudget}
                        className="p-1.5 text-gray-300 hover:text-red-400 transition-colors flex-shrink-0"
                        title="Delete budget"
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <button
                    onClick={handleEditBudget}
                    className="px-3 py-1.5 border-2 border-orange-500 rounded-md font-bold text-left text-white bg-transparent hover:bg-white/10 transition-colors text-sm w-[200px]"
                  >
                    {currencySymbol}{displayBudget ? formatCurrency(displayBudget) : '0'}{currencyUnit}
                    <span className="text-xs text-gray-300 ml-1 font-normal">Budget</span>
                  </button>
                  {/* Edit controls positioned within total field width */}
                  <div className="absolute top-0 right-0 translate-x-full ml-2 flex items-center h-full">
                    <div className="flex items-center gap-1 w-[68px] justify-end">
                      <button
                        onClick={handleEditBudget}
                        className="p-1.5 text-gray-300 hover:text-white transition-colors flex-shrink-0"
                        title="Edit budget"
                      >
                        <Edit className="w-3.5 h-3.5" />
                      </button>
                      <button
                        onClick={handleDeleteBudget}
                        className="p-1.5 text-gray-300 hover:text-red-400 transition-colors flex-shrink-0"
                        title="Delete budget"
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          )}
        </div>

        {/* Total Row - 10% bigger with embedded toggle */}
        <div className="flex items-center">
          <div className="relative">
            <div className="px-3 py-2.5 border-4 border-white rounded-md font-bold text-white bg-transparent text-base flex items-center justify-between min-w-[280px]">
              <div className="flex-1">
                <span className="text-yellow-400">{currencySymbol}{formatCurrency(displayTotal)}{currencyUnit}</span>
                <span className="text-sm text-gray-300 ml-1 font-normal">Total</span>
              </div>
              
              <div className="w-4"></div>
              
              {/* Embedded Currency Toggle - TUs first, with rounded oval indicator */}
              <div className="relative group">
                <button
                  onClick={() => setIsCreditsMode(!isCreditsMode)}
                  className="relative flex items-center border-2 border-orange-500 rounded-full overflow-hidden hover:border-orange-600 transition-colors text-xs font-bold bg-transparent"
                  title={isCreditsMode ? 'Switch to USD' : 'Switch to Training Units (Credits)'}
                >
                  {/* Sliding oval background - full height seamless */}
                  <div className={`absolute top-0 bottom-0 bg-gradient-to-r from-orange-500 to-pink-500 rounded-full transition-transform duration-200 ${
                    isCreditsMode ? 'translate-x-0' : 'translate-x-full'
                  } w-1/2`}></div>
                  
                  {/* Button content */}
                  <div className="relative z-10 px-2 py-1 text-white transition-all duration-200">
                    TUs
                  </div>
                  <div className="relative z-10 px-2 py-1 text-white transition-all duration-200">
                    USD
                  </div>
                </button>
                
                {/* Tooltip */}
                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-10">
                  {isCreditsMode ? 'Switch to USD' : 'Switch to Training Units (Credits)'}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Difference Row (only shown when budget is set) */}
        {budget !== null && budget !== 0 && (
          <div className="flex items-center">
            <div className="relative">
              <div className={`px-3 py-1.5 border-2 rounded-md font-bold text-white bg-transparent text-sm w-[200px] ${
                difference >= 0 ? 'border-green-500' : 'border-red-500'
              }`}>
                {difference >= 0 ? '' : '-'}{currencySymbol}{formatCurrency(Math.abs(displayDifference))}{currencyUnit}
                <span className="text-xs text-gray-300 ml-1 font-normal">Difference</span>
              </div>
              {/* Space to match total field width */}
              <div className="absolute top-0 right-0 translate-x-full">
                <div className="w-4"></div>
                <div className="w-[76px]"></div> {/* Space to match toggle */}
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Copy buttons section - right edge of page */}
      <div className="flex flex-col gap-2 ml-8">
        {/* Budget copy button - only show when budget is set and not editing */}
        <div className="flex items-center h-[42px]">
          {!shouldShowBudgetButton && !isEditingBudget && (
            <button
              onClick={() => handleCopy(budget?.toString() || '0')}
              className="p-1.5 text-gray-300 hover:text-white transition-colors flex-shrink-0"
              title="Copy budget"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>
        
        {/* Total copy button - only show when total > 0 */}
        <div className="flex items-center h-[50px]">
          {total > 0 && (
            <button
              onClick={() => handleCopy(total.toString())}
              className="p-2 text-gray-300 hover:text-white transition-colors flex-shrink-0"
              title="Copy total"
            >
              <Copy className="w-4 h-4" />
            </button>
          )}
        </div>
        
        {/* Difference copy button - only show when budget is set */}
        {budget !== null && budget !== 0 && (
          <div className="flex items-center h-[42px]">
            <button
              onClick={() => handleCopy(difference.toString())}
              className="p-1.5 text-gray-300 hover:text-white transition-colors flex-shrink-0"
              title="Copy difference"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Calculator;