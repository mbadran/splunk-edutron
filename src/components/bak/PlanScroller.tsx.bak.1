import React, { useState, useCallback, useRef } from "react";
import PlanCatalogs from "./PlanCatalogs";
import { useScrollSync } from "@/hooks/scrollSync";
import { Course } from "@/types/types";

// Constants
const RESIZE_BOUNDS = { min: 30, max: 70 };
const DEFAULT_LEFT_WIDTH = 50;

interface PlanScrollerProps {
  courses: Course[];
  teamMembers: string[];
  selections: Record<string, boolean>;
  onTeamMembersChange: (members: string[]) => void;
  onSelectionsChange: (selections: Record<string, boolean>) => void;
}

const PlanScroller: React.FC<PlanScrollerProps> = ({
  courses,
  teamMembers,
  selections,
  onTeamMembersChange,
  onSelectionsChange,
}) => {
  const [isResizing, setIsResizing] = useState(false);
  const [leftWidth, setLeftWidth] = useState(DEFAULT_LEFT_WIDTH);
  const containerRef = useRef<HTMLDivElement>(null);

  const {
    catalogTableRef,
    teamTableRef,
    handleCatalogScroll,
    handleTeamScroll,
  } = useScrollSync();

  // Improved resize handling
  const handleMouseMove = useCallback(
    (e: MouseEvent) => {
      if (!isResizing || !containerRef.current) return;

      const containerRect = containerRef.current.getBoundingClientRect();
      const newLeftWidth =
        ((e.clientX - containerRect.left) / containerRect.width) * 100;

      if (
        newLeftWidth >= RESIZE_BOUNDS.min &&
        newLeftWidth <= RESIZE_BOUNDS.max
      ) {
        setLeftWidth(newLeftWidth);
      }
    },
    [isResizing],
  );

  const handleMouseUp = useCallback(() => {
    setIsResizing(false);
    document.body.style.cursor = "";
    document.body.style.userSelect = "";
  }, []);

  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
    document.body.style.cursor = "col-resize";
    document.body.style.userSelect = "none";
  }, []);

  return (
    <div
      id="plan-scroller"
      ref={containerRef}
      className="h-[70vh] training-plan-container flex relative"
    >
      {/* LEFT PANE: Catalogs */}
      <div
        id="plan-catalogs-pane"
        className="h-full overflow-hidden catalog-scroll-container"
        style={{ width: `${leftWidth}%` }}
      >
        <div className="bg-white h-full">
          <PlanCatalogs onScroll={handleCatalogScroll} />
        </div>
      </div>

      {/* RESIZE HANDLE */}
      <div
        id="plan-resize-handle"
        className="bg-gradient-to-b from-orange-500 to-pink-500 cursor-col-resize hover:from-orange-600 hover:to-pink-600 transition-colors duration-150 group relative flex-shrink-0 flex items-center justify-center hover:cursor-grab active:cursor-grabbing"
        style={{ width: "10px" }}
        onMouseDown={handleMouseDown}
      >
        <div
          className="bg-orange-500 rounded-md shadow-lg group-hover:bg-orange-600 transition-colors duration-150 flex flex-col items-center justify-center z-10 border border-orange-400 gap-1"
          style={{ width: "14px", height: "32px" }}
        >
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
          <div className="w-1 h-1 bg-amber-800 rounded-full"></div>
        </div>
      </div>

      {/* RIGHT PANE: Teams */}
      <div
        id="plan-teams-pane"
        className="h-full overflow-hidden team-scroll-container"
        style={{ width: `${100 - leftWidth}%` }}
      >
        <div className="bg-white h-full">
          <div className="flex items-center justify-center h-full bg-blue-50 border-2 border-blue-300">
            <div className="text-center p-8">
              <h3 className="text-lg font-semibold text-blue-800 mb-2">
                Team Component Disabled
              </h3>
              <p className="text-blue-600">
                Component temporarily disabled for debugging infinite renders
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

PlanScroller.displayName = "PlanScroller";

export default PlanScroller;
