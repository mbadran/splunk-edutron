import React, { useRef, useEffect, useState, forwardRef, useImperativeHandle, useCallback, useMemo } from "react";
import {
  Table,
  flexRender,
  ColumnResizeMode,
  Column,
} from "@tanstack/react-table";
import { GripVertical, ArrowUpDown, ArrowUp, ArrowDown } from "lucide-react";

// Constants - Now properly exported
export const TABLE_CONSTANTS = {
  CONTAINER_HEIGHT: 400,
  VIEWPORT_HEIGHT_RATIO: 0.7,
  HEADER_OFFSET: 48,
  ROW_HEIGHT: 48,
  COLUMN_WIDTH: {
    SMALL: 80,
    MEDIUM: 120,
    LARGE: 150,
    XLARGE: 200,
    XXLARGE: 350,
  },
  COLUMN_LIMITS: {
    MIN_SMALL: 60,
    MIN_MEDIUM: 80,
    MIN_LARGE: 100,
    MIN_XLARGE: 150,
    MIN_XXLARGE: 200,
    MAX_SMALL: 100,
    MAX_MEDIUM: 150,
    MAX_LARGE: 200,
    MAX_XLARGE: 300,
    MAX_XXLARGE: 500,
  },
  SCROLL_THROTTLE_MS: 16, // ~60fps
};

export interface BaseTableRef {
  scrollToOffset: (offset: number) => void;
}

interface BaseTableProps<TData> {
  table: Table<TData>;
  onScroll?: (scrollTop: number) => void;
  headerClassName?: string;
  containerClassName?: string;
  rowHeight?: number;
  renderFooter?: () => React.ReactNode;
  columnResizeMode?: ColumnResizeMode;
  emptyStateMessage?: string;
  loadingState?: boolean;
}

export const SortableHeader = <TData,>({
  column,
  children,
  showDragHandle = false,
}: {
  column: Column<TData, unknown>;
  children: React.ReactNode;
  showDragHandle?: boolean;
}) => {
  const isSorted = column.getIsSorted();
  const canSort = column.getCanSort();

  const handleSort = useCallback(() => {
    if (canSort) {
      column.getToggleSortingHandler()?.();
    }
  }, [canSort, column]);

  const sortIcon = useMemo(() => {
    if (isSorted === "asc") return <ArrowUp className="w-3 h-3" />;
    if (isSorted === "desc") return <ArrowDown className="w-3 h-3" />;
    return <ArrowUpDown className="w-3 h-3 opacity-50" />;
  }, [isSorted]);

  return (
    <div className="flex items-center gap-2 w-full">
      {showDragHandle && (
        <div
          className="cursor-grab hover:cursor-grab active:cursor-grabbing p-1 hover:bg-slate-600 rounded transition-colors opacity-50 hover:opacity-100"
          title="Drag to reorder column"
          role="button"
          tabIndex={0}
          aria-label="Drag to reorder column"
        >
          <GripVertical className="w-3 h-3" />
        </div>
      )}
      
      <div
        className={`flex items-center gap-1 px-2 py-1 rounded transition-colors flex-1 min-w-0 ${
          canSort ? 'cursor-pointer select-none hover:bg-slate-700' : ''
        }`}
        onClick={canSort ? handleSort : undefined}
        role={canSort ? "button" : undefined}
        tabIndex={canSort ? 0 : undefined}
        aria-label={canSort ? `Sort by ${children}` : undefined}
        aria-sort={
          isSorted === "asc" ? "ascending" :
          isSorted === "desc" ? "descending" : 
          canSort ? "none" : undefined
        }
        onKeyDown={(e) => {
          if (canSort && (e.key === 'Enter' || e.key === ' ')) {
            e.preventDefault();
            handleSort();
          }
        }}
      >
        <span className="truncate">{children}</span>
        {canSort && (
          <div className="w-4 h-4 flex items-center justify-center flex-shrink-0">
            {sortIcon}
          </div>
        )}
      </div>
    </div>
  );
};

// Throttle function to improve scroll performance
const throttle = (func: Function, delay: number) => {
  let timeoutId: NodeJS.Timeout | null = null;
  let lastExecTime = 0;
  
  return (...args: any[]) => {
    const currentTime = Date.now();
    
    if (currentTime - lastExecTime > delay) {
      func(...args);
      lastExecTime = currentTime;
    } else {
      if (timeoutId) clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        func(...args);
        lastExecTime = Date.now();
      }, delay - (currentTime - lastExecTime));
    }
  };
};

const BaseTable = forwardRef<BaseTableRef, BaseTableProps<any>>(
  ({ 
    table, 
    onScroll, 
    headerClassName = "bg-slate-800", 
    containerClassName = "",
    rowHeight = TABLE_CONSTANTS.ROW_HEIGHT,
    renderFooter,
    columnResizeMode = "onChange",
    emptyStateMessage = "No data available",
    loadingState = false
  }, ref) => {
    const [containerHeight, setContainerHeight] = useState(TABLE_CONSTANTS.CONTAINER_HEIGHT);
    const parentRef = useRef<HTMLDivElement>(null);
    const lastScrollTop = useRef(0);

    // Memoize throttled scroll handler
    const throttledOnScroll = useMemo(() => {
      if (!onScroll) return undefined;
      
      return throttle((scrollTop: number) => {
        if (scrollTop !== lastScrollTop.current) {
          onScroll(scrollTop);
          lastScrollTop.current = scrollTop;
        }
      }, TABLE_CONSTANTS.SCROLL_THROTTLE_MS);
    }, [onScroll]);

    // Update container height on mount and resize
    useEffect(() => {
      const updateHeight = () => {
        if (typeof window !== "undefined") {
          const newHeight = Math.max(
            TABLE_CONSTANTS.CONTAINER_HEIGHT, 
            window.innerHeight * TABLE_CONSTANTS.VIEWPORT_HEIGHT_RATIO - TABLE_CONSTANTS.HEADER_OFFSET
          );
          setContainerHeight(newHeight);
        }
      };

      updateHeight();

      if (typeof window !== "undefined") {
        window.addEventListener("resize", updateHeight);
        return () => window.removeEventListener("resize", updateHeight);
      }
    }, []);

    useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        if (parentRef.current) {
          parentRef.current.scrollTop = offset;
        }
      },
    }), []);

    // Handle scroll events with throttling
    useEffect(() => {
      if (!throttledOnScroll) return;

      const handleScroll = () => {
        if (parentRef.current) {
          throttledOnScroll(parentRef.current.scrollTop);
        }
      };

      const element = parentRef.current;
      if (element) {
        element.addEventListener("scroll", handleScroll, { passive: true });
        return () => element.removeEventListener("scroll", handleScroll);
      }
    }, [throttledOnScroll]);

    // Memoize expensive calculations
    const { rows, headerGroups, footerGroups, totalWidth } = useMemo(() => {
      const rowModel = table.getRowModel();
      const headers = table.getHeaderGroups();
      const footers = table.getFooterGroups();
      
      // Calculate total table width for horizontal scrolling
      const width = table.getAllColumns().reduce((acc, column) => {
        return acc + (column.getSize() || TABLE_CONSTANTS.COLUMN_WIDTH.LARGE);
      }, 0);

      return {
        rows: rowModel.rows,
        headerGroups: headers,
        footerGroups: footers,
        totalWidth: width
      };
    }, [table]);

    const renderEmptyState = () => (
      <div className="flex items-center justify-center h-32 text-gray-500">
        <p>{emptyStateMessage}</p>
      </div>
    );

    const renderLoadingState = () => (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-600"></div>
      </div>
    );

    return (
      <div className={`flex flex-col h-full ${containerClassName}`}>
        <div className="flex-1 overflow-hidden">
          <div className="h-full flex flex-col">
            {/* Fixed Header */}
            <div 
              className={`sticky top-0 z-10 border-b border-gray-200 ${headerClassName}`}
              style={{ minWidth: totalWidth }}
            >
              {headerGroups.map((headerGroup) => (
                <div key={headerGroup.id} className="flex">
                  {headerGroup.headers.map((header) => (
                    <div
                      key={header.id}
                      className="text-white font-semibold px-2 py-3 border-r border-slate-700 relative"
                      style={{
                        width: header.getSize(),
                        minWidth: header.getSize(),
                      }}
                    >
                      {header.isPlaceholder ? null : (
                        <>
                          {flexRender(
                            header.column.columnDef.header,
                            header.getContext(),
                          )}
                          {/* Column Resizer */}
                          {header.column.getCanResize() && (
                            <div
                              className="absolute right-0 top-0 h-full w-1 bg-slate-600 cursor-col-resize hover:bg-slate-500 opacity-0 hover:opacity-100 transition-opacity"
                              onMouseDown={header.getResizeHandler()}
                              onTouchStart={header.getResizeHandler()}
                              role="separator"
                              aria-label={`Resize column ${header.column.id}`}
                              tabIndex={0}
                              onKeyDown={(e) => {
                                if (e.key === 'Enter' || e.key === ' ') {
                                  e.preventDefault();
                                  // Focus on resize handle for keyboard users
                                  (e.target as HTMLElement).focus();
                                }
                              }}
                            />
                          )}
                        </>
                      )}
                    </div>
                  ))}
                </div>
              ))}
            </div>

            {/* Scrollable Body */}
            <div className="flex-1">
              <div
                ref={parentRef}
                className="overflow-auto pb-4"
                style={{ height: containerHeight }}
                role="grid"
                aria-label="Data table"
              >
                <div className="w-full" style={{ minWidth: totalWidth }}>
                  {loadingState ? (
                    renderLoadingState()
                  ) : rows.length === 0 ? (
                    renderEmptyState()
                  ) : (
                    rows.map((row, index) => {
                      const rowClass = index % 2 === 0 ? "bg-white" : "bg-gray-50";

                      return (
                        <div
                          key={row.id}
                          className={`flex border-b border-gray-200 hover:bg-orange-50 transition-colors ${rowClass}`}
                          style={{ height: rowHeight }}
                          role="row"
                          aria-rowindex={index + 1}
                        >
                          {row.getVisibleCells().map((cell, cellIndex) => (
                            <div
                              key={cell.id}
                              style={{
                                width: cell.column.getSize(),
                                minWidth: cell.column.getSize(),
                              }}
                              role="gridcell"
                              aria-colindex={cellIndex + 1}
                            >
                              {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext(),
                              )}
                            </div>
                          ))}
                        </div>
                      );
                    })
                  )}
                </div>
              </div>
            </div>

            {/* Custom Footer */}
            {renderFooter && (
              <div className="border-t border-gray-200 bg-gray-50">
                {renderFooter()}
              </div>
            )}
            
            {/* TanStack Table Footer */}
            {footerGroups.length > 0 && (
              <div 
                className="border-t border-gray-200 bg-gray-50"
                style={{ minWidth: totalWidth }}
              >
                {footerGroups.map((footerGroup) => (
                  <div key={footerGroup.id} className="flex">
                    {footerGroup.headers.map((header) => (
                      <div
                        key={header.id}
                        className="px-2 py-2 text-sm font-medium text-gray-700 border-r border-gray-200"
                        style={{
                          width: header.getSize(),
                          minWidth: header.getSize(),
                        }}
                      >
                        {header.isPlaceholder ? null : (
                          flexRender(
                            header.column.columnDef.footer,
                            header.getContext(),
                          )
                        )}
                      </div>
                    ))}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
);

BaseTable.displayName = "BaseTable";

export default BaseTable;