import React, { useState } from "react";
import { Undo, Redo, Download, Upload, RotateCcw, Plus, Code, FileSpreadsheet, FileText, DollarSign } from "lucide-react";
import { useAtom } from "jotai";
import { setStatusAtom, planStateAtom } from "@/atoms/globalAtoms";
import { ExportModal } from "./common/ExportModal";

interface PlanActionsProps {
  onUndo: () => void;
  onRedo: () => void;
  onExportJSON: () => void;
  canUndo: boolean;
  canRedo: boolean;
}

const PlanActions = ({
  onUndo,
  onRedo,
  onExportJSON,
  canUndo,
  canRedo,
}: PlanActionsProps) => {
  const [showExportModal, setShowExportModal] = useState(false);
  const [, setStatus] = useAtom(setStatusAtom);
  const [planState, setPlanState] = useAtom(planStateAtom);

  const handleReset = () => {
    setStatus({ isWorking: true, message: "Resetting plan selections..." });
    
    // Clear all selections but keep team members and other plan data
    const resetState = {
      ...planState,
      selections: {},
      updatedAt: new Date().toISOString(),
    };
    
    setPlanState(resetState);
    
    setTimeout(() => {
      setStatus({ isWorking: false, message: "Plan selections cleared!" });
      setTimeout(() => setStatus({ isWorking: false, message: "" }), 1500);
    }, 500);
  };

  const handleNew = () => {
    setStatus({ isWorking: false, message: "Coming soon..." });
    setTimeout(() => setStatus({ isWorking: false, message: "" }), 2000);
  };

  const handleUpload = () => {
    setStatus({ isWorking: false, message: "Coming soon..." });
    setTimeout(() => setStatus({ isWorking: false, message: "" }), 2000);
  };

  const handleDownload = () => {
    setShowExportModal(true);
  };

  const handleExportJSON = () => {
    setShowExportModal(false);
    onExportJSON();
  };

  const handleExportCSV = () => {
    setStatus({ isWorking: false, message: "Coming soon..." });
    setTimeout(() => setStatus({ isWorking: false, message: "" }), 2000);
  };

  const handleExportPDF = () => {
    setStatus({ isWorking: false, message: "Coming soon..." });
    setTimeout(() => setStatus({ isWorking: false, message: "" }), 2000);
  };

  const handleExportSales = () => {
    setStatus({ isWorking: false, message: "Coming soon..." });
    setTimeout(() => setStatus({ isWorking: false, message: "" }), 2000);
  };

  const renderExportOptions = () => (
    <div className="grid grid-cols-2 gap-4">
      {/* JSON Export - Default/Functional */}
      <button
        onClick={handleExportJSON}
        className="flex flex-col items-center justify-center p-6 bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 text-white rounded-lg transition-colors font-bold shadow-lg"
        title="Export plan as JSON file (recommended)"
      >
        <Code className="w-8 h-8 mb-2" />
        <span className="text-sm">JSON</span>
        <span className="text-xs opacity-90 mt-1">(Default)</span>
      </button>

      {/* CSV Export - Disabled */}
      <button
        disabled
        className="flex flex-col items-center justify-center p-6 bg-gray-200 text-gray-400 rounded-lg cursor-not-allowed font-bold"
        title="CSV Export - Coming soon!"
      >
        <FileSpreadsheet className="w-8 h-8 mb-2" />
        <span className="text-sm">CSV</span>
        <span className="text-xs opacity-75 mt-1">Coming soon</span>
      </button>

      {/* PDF Export - Disabled */}
      <button
        disabled
        className="flex flex-col items-center justify-center p-6 bg-gray-200 text-gray-400 rounded-lg cursor-not-allowed font-bold"
        title="PDF Export - Coming soon!"
      >
        <FileText className="w-8 h-8 mb-2" />
        <span className="text-sm">PDF</span>
        <span className="text-xs opacity-75 mt-1">Coming soon</span>
      </button>

      {/* Sales Quote - Disabled */}
      <button
        disabled
        className="flex flex-col items-center justify-center p-6 bg-gray-200 text-gray-400 rounded-lg cursor-not-allowed font-bold"
        title="Sales Quote - Coming soon!"
      >
        <DollarSign className="w-8 h-8 mb-2" />
        <span className="text-sm">Sales</span>
        <span className="text-xs opacity-75 mt-1">Coming soon</span>
      </button>
    </div>
  );

  return (
    <>
      <div className="flex items-start justify-center gap-1 sm:gap-2 lg:gap-3 flex-wrap pl-3">
        <button
          onClick={onUndo}
          disabled={!canUndo}
          title="Undo"
          className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          <Undo className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
        </button>

        <button
          onClick={onRedo}
          disabled={!canRedo}
          title="Redo"
          className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          <Redo className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
        </button>

        {/* Divider */}
        <div className="w-2 sm:w-4 lg:w-6 hidden sm:block"></div>

        <button
          onClick={handleReset}
          title="Reset Plan Selections"
          className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 transition-colors"
          aria-label="Reset Plan Selections"
        >
          <RotateCcw className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
        </button>

        <button
          onClick={handleNew}
          title="New Plan"
          className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 transition-colors"
        >
          <Plus className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
        </button>

        {/* Divider */}
        <div className="w-2 sm:w-4 lg:w-6 hidden sm:block"></div>

        <button
          onClick={handleDownload}
          title="Download Plan"
          className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 transition-colors"
        >
          <Download className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
        </button>

        <button
          onClick={handleUpload}
          title="Upload Plan"
          className="flex items-center justify-center p-2 sm:p-2.5 bg-slate-300 text-slate-700 rounded-md hover:bg-slate-400 transition-colors"
        >
          <Upload className="w-3 h-3 sm:w-3.5 sm:h-3.5" />
        </button>
      </div>

      <ExportModal
        isOpen={showExportModal}
        onClose={() => setShowExportModal(false)}
        title="Export Training Plan"
        description="Choose your preferred export format:"
      >
        {renderExportOptions()}
      </ExportModal>
    </>
  );
};

export default PlanActions;