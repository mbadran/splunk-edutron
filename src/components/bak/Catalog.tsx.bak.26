import React, { useState, useEffect, useCallback, forwardRef, useImperativeHandle, useRef } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Clock, DollarSign, ExternalLink, GraduationCap, ArrowUpDown, ArrowUp, ArrowDown, GripVertical } from 'lucide-react';
import Papa from 'papaparse';
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  flexRender,
  ColumnDef,
  getSortedRowModel,
  SortingState,
  ColumnResizeMode,
  ColumnOrderState,
} from '@tanstack/react-table';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface CatalogProps {
  onCoursesLoad?: (count: number, courses: Course[]) => void;
  onScroll?: (scrollTop: number) => void;
}

interface CatalogRef {
  scrollToOffset: (offset: number) => void;
}

const loadCoursesFromCSV = async (): Promise<Course[]> => {
  const response = await fetch('/catalog.csv');
  if (!response.ok) {
    throw new Error(`Failed to load catalog.csv: ${response.status}`);
  }
  const text = await response.text();
  
  return new Promise((resolve, reject) => {
    Papa.parse(text, {
      header: true,
      skipEmptyLines: true,
      dynamicTyping: true,
      trimHeaders: true,
      delimitersToGuess: [',', '\t', '|', ';'],
      transform: (value, header) => {
        if (typeof value === 'string') {
          return value.trim();
        }
        return value;
      },
      complete: (results) => {
        try {
          const courses: Course[] = [];
          
          for (const row of results.data as any[]) {
            // Handle STEP ID column name variations
            if (row['STEP ID']) {
              row.STEP_ID = row['STEP ID'];
              delete row['STEP ID'];
            }
            if (row['Step ID']) {
              row.STEP_ID = row['Step ID'];
              delete row['Step ID'];
            }
            if (row['step_id']) {
              row.STEP_ID = row['step_id'];
              delete row['step_id'];
            }
            
            // Only include rows with required fields
            if (row.ID && row.Name) {
              const course: Course = {
                ID: String(row.ID || '').trim(),
                Name: String(row.Name || '').trim(),
                Category: String(row.Category || '').trim(),
                Duration: Number(row.Duration) || 0,
                Mode: String(row.Mode || '').trim(),
                Price: Number(row.Price) || 0,
                STEP_ID: row.STEP_ID ? String(row.STEP_ID).trim() : undefined
              };
              
              courses.push(course);
            }
          }
          
          if (courses.length === 0) {
            reject(new Error('No valid courses found in catalog.csv'));
          } else {
            resolve(courses);
          }
        } catch (error) {
          reject(error);
        }
      },
      error: (error) => {
        reject(new Error(`CSV parsing error: ${error.message}`));
      }
    });
  });
};

const Catalog = forwardRef<CatalogRef, CatalogProps>(({ onCoursesLoad, onScroll }, ref) => {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnOrder, setColumnOrder] = useState<ColumnOrderState>([
    'ID', 'Category', 'Mode', 'Duration', 'Price', 'Name'
  ]);
  const [containerHeight, setContainerHeight] = useState(400);

  const parentRef = useRef<HTMLDivElement>(null);
  const ROW_HEIGHT = 48;

  // React Query for data fetching
  const {
    data: courses = [],
    isLoading,
    error,
    refetch
  } = useQuery({
    queryKey: ['courses'],
    queryFn: loadCoursesFromCSV,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
    retry: 2,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  // Notify parent when courses load (memoized to prevent unnecessary calls)
  useEffect(() => {
    if (courses.length > 0 && onCoursesLoad) {
      onCoursesLoad(courses.length, courses);
    }
  }, [courses, onCoursesLoad]);

  // Update container height on mount and resize
  useEffect(() => {
    const updateHeight = () => {
      if (typeof window !== 'undefined') {
        const newHeight = Math.max(400, window.innerHeight * 0.7 - 48);
        setContainerHeight(newHeight);
      }
    };

    updateHeight();
    
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', updateHeight);
      return () => window.removeEventListener('resize', updateHeight);
    }
  }, []);

  useImperativeHandle(ref, () => ({
    scrollToOffset: (offset: number) => {
      if (parentRef.current) {
        parentRef.current.scrollTop = offset;
      }
    }
  }));

  // Handle scroll events
  useEffect(() => {
    const handleScroll = () => {
      if (onScroll && parentRef.current) {
        onScroll(parentRef.current.scrollTop);
      }
    };

    const element = parentRef.current;
    if (element) {
      element.addEventListener('scroll', handleScroll);
      return () => element.removeEventListener('scroll', handleScroll);
    }
  }, [onScroll]);

  const columnHelper = createColumnHelper<Course>();

  const generateCourseUrl = useCallback((stepId: string): string => {
    if (!stepId) return '#';
    return `https://education.splunk.com/Saba/Web_spf/NA10P2PRD105/guestapp/ledetail/${stepId}?utm_source=splunk-edutron`;
  }, []);

  const getCategoryColor = useCallback((category: string): string => {
    const colors: Record<string, string> = {
      'Core': 'bg-orange-500 text-white',
      'Power User': 'bg-blue-500 text-white',
      'Admin': 'bg-green-500 text-white',
      'Security': 'bg-red-500 text-white',
      'ITSI': 'bg-purple-500 text-white',
      'Platform': 'bg-indigo-500 text-white',
      'Observability': 'bg-teal-500 text-white',
      'Cloud': 'bg-cyan-500 text-white'
    };
    return colors[category] || 'bg-gray-500 text-white';
  }, []);

  const getModeColor = useCallback((mode: string): string => {
    const colors: Record<string, string> = {
      'E': 'bg-blue-100 text-blue-800',
      'EL': 'bg-purple-100 text-purple-800',
      'ILT': 'bg-green-100 text-green-800'
    };
    return colors[mode] || 'bg-gray-100 text-gray-800';
  }, []);

  const getModeTooltip = useCallback((mode: string): string => {
    const tooltips: Record<string, string> = {
      'E': 'eLearning (No Labs)',
      'EL': 'eLearning (With Labs)', 
      'ILT': 'Instructor-Led Training'
    };
    return tooltips[mode] || mode;
  }, []);

  const formatPrice = useCallback((price: number): string => {
    return price.toLocaleString('en-US');
  }, []);

  const SortableHeader = ({ column, children }: { column: any, children: React.ReactNode }) => {
    const isSorted = column.getIsSorted();
    
    return (
      <div 
        className="flex items-center gap-2 cursor-pointer select-none hover:bg-slate-700 px-2 py-1 rounded transition-colors"
        onClick={column.getToggleSortingHandler()}
      >
        <span className="flex-1">{children}</span>
        <div className="w-4 h-4 flex items-center justify-center">
          {isSorted === 'asc' && <ArrowUp className="w-3 h-3" />}
          {isSorted === 'desc' && <ArrowDown className="w-3 h-3" />}
          {!isSorted && <ArrowUpDown className="w-3 h-3 opacity-50" />}
        </div>
        <GripVertical className="w-3 h-3 opacity-50" />
      </div>
    );
  };

  const columns: ColumnDef<Course>[] = React.useMemo(() => [
    columnHelper.accessor('ID', {
      id: 'ID',
      header: ({ column }) => (
        <SortableHeader column={column}>ID</SortableHeader>
      ),
      cell: info => (
        <div className="h-12 flex items-center justify-start px-2">
          <code className="text-sm font-mono text-gray-700 bg-gray-200 px-2 py-1 rounded whitespace-nowrap">
            {info.getValue()}
          </code>
        </div>
      ),
      size: 120,
      minSize: 80,
      maxSize: 200,
      enableResizing: true,
    }),
    columnHelper.accessor('Category', {
      id: 'Category',
      header: ({ column }) => (
        <SortableHeader column={column}>Category</SortableHeader>
      ),
      cell: info => (
        <div className="h-12 flex items-center justify-start px-2">
          <span className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${getCategoryColor(info.getValue())}`}>
            {info.getValue()}
          </span>
        </div>
      ),
      size: 120,
      minSize: 100,
      maxSize: 150,
      enableResizing: true,
    }),
    columnHelper.accessor('Mode', {
      id: 'Mode',
      header: ({ column }) => (
        <SortableHeader column={column}>Mode</SortableHeader>
      ),
      cell: info => (
        <div className="h-12 flex items-center justify-start px-2">
          <span 
            className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${getModeColor(info.getValue())}`}
            title={getModeTooltip(info.getValue())}
          >
            {info.getValue()}
          </span>
        </div>
      ),
      size: 80,
      minSize: 60,
      maxSize: 100,
      enableResizing: true,
    }),
    columnHelper.accessor('Duration', {
      id: 'Duration',
      header: ({ column }) => (
        <SortableHeader column={column}>Duration</SortableHeader>
      ),
      cell: info => (
        <div className="h-12 flex items-center justify-start px-2">
          <div className="relative bg-yellow-100 px-2 py-1 rounded inline-block">
            <Clock className="absolute left-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-600 opacity-80" />
            <span className="text-sm font-medium text-gray-700 pl-4">
              {info.getValue()}h
            </span>
          </div>
        </div>
      ),
      size: 120,
      minSize: 100,
      maxSize: 150,
      enableResizing: true,
    }),
    columnHelper.accessor('Price', {
      id: 'Price',
      header: ({ column }) => (
        <SortableHeader column={column}>Price</SortableHeader>
      ),
      cell: info => (
        <div className="h-12 flex items-center justify-start px-2">
          {info.getValue() === 0 ? (
            <span className="text-gray-700 font-medium text-sm bg-green-200 px-2 py-1 rounded whitespace-nowrap">
              Free
            </span>
          ) : (
            <div className="flex items-center text-gray-700 bg-pink-200 px-2 py-1 rounded">
              <DollarSign className="w-3 h-3 mr-1" />
              <span className="font-medium text-sm font-mono">
                {formatPrice(info.getValue())}
              </span>
            </div>
          )}
        </div>
      ),
      size: 100,
      minSize: 80,
      maxSize: 150,
      enableResizing: true,
    }),
    columnHelper.accessor('Name', {
      id: 'Name',
      header: ({ column }) => (
        <SortableHeader column={column}>Course</SortableHeader>
      ),
      cell: info => {
        const course = info.row.original;
        return (
          <div className="h-12 flex items-center justify-start px-2">
            <div className="whitespace-nowrap overflow-hidden min-w-0">
              {course.STEP_ID ? (
                <a 
                  href={generateCourseUrl(course.STEP_ID)}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0"
                  title={course.Name}
                >
                  <span className="truncate min-w-0">{course.Name}</span>
                  <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
                </a>
              ) : (
                <span className="font-medium text-gray-900 truncate block min-w-0" title={course.Name}>
                  {course.Name}
                </span>
              )}
            </div>
          </div>
        );
      },
      size: 350,
      minSize: 200,
      maxSize: 500,
      enableResizing: true,
    }),
  ], [columnHelper, getCategoryColor, getModeColor, getModeTooltip, formatPrice, generateCourseUrl]);

  const table = useReactTable({
    data: courses,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onSortingChange: setSorting,
    onColumnOrderChange: setColumnOrder,
    state: {
      sorting,
      columnOrder,
    },
    columnResizeMode: 'onChange' as ColumnResizeMode,
    enableColumnResizing: true,
    enableSorting: true,
  });

  const { rows } = table.getRowModel();

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading course catalog...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-full p-4">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
              <GraduationCap className="w-8 h-8 text-gray-600" />
            </div>
            <div className="text-red-400 mb-4 text-2xl">⚠️ Error</div>
            <p className="text-gray-600 mb-4">{(error as Error).message}</p>
            <p className="text-gray-500 text-sm mb-6">
              Make sure catalog.csv is in your /public directory
            </p>
            <div className="space-y-3">
              <button 
                onClick={() => refetch()}
                className="w-full bg-orange-500 text-white hover:bg-orange-600 font-semibold py-3 px-6 rounded-lg transition-colors"
              >
                Retry Loading
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-hidden">
        <div className="h-full flex flex-col">
          {/* Fixed Header - matches Team component structure */}
          <div className="flex sticky top-0 z-10 border-b border-gray-200 bg-slate-800">
            {table.getHeaderGroups().map(headerGroup => (
              <React.Fragment key={headerGroup.id}>
                {headerGroup.headers.map(header => (
                  <div 
                    key={header.id} 
                    className="text-white font-semibold px-2 py-3 border-r border-slate-700 relative"
                    style={{ 
                      width: header.getSize(),
                      minWidth: header.getSize(),
                    }}
                  >
                    {flexRender(header.column.columnDef.header, header.getContext())}
                    {/* Column Resizer */}
                    {header.column.getCanResize() && (
                      <div
                        className="absolute right-0 top-0 h-full w-1 bg-slate-600 cursor-col-resize hover:bg-slate-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={header.getResizeHandler()}
                        onTouchStart={header.getResizeHandler()}
                      />
                    )}
                  </div>
                ))}
              </React.Fragment>
            ))}
          </div>
          
          {/* Scrollable Body - matches Team component structure */}
          <div className="flex-1">
            <div
              ref={parentRef}
              className="catalog-scroll-container overflow-auto"
              style={{ height: containerHeight }}
            >
              <div className="w-full">
                {rows.map((row, index) => {
                  const rowClass = index % 2 === 0 ? 'bg-white' : 'bg-gray-50';
                  
                  return (
                    <div
                      key={row.id}
                      className={`flex border-b border-gray-200 hover:bg-orange-50 transition-colors ${rowClass}`}
                      style={{ height: ROW_HEIGHT }}
                    >
                      {row.getVisibleCells().map(cell => (
                        <div 
                          key={cell.id} 
                          style={{ 
                            width: cell.column.getSize(),
                            minWidth: cell.column.getSize(),
                          }}
                        >
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </div>
                      ))}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
});

Catalog.displayName = 'Catalog';

export default Catalog;