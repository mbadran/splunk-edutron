import React, { useState } from 'react';
import { Copy, Edit, Trash2, Check, X } from 'lucide-react';

interface CalculatorProps {
  total?: number;
  onBudgetChange?: (budget: number | null) => void;
}

const Calculator = ({ 
  total = 0, 
  onBudgetChange 
}: CalculatorProps) => {
  const [budget, setBudget] = useState<number | null>(null);
  const [isEditingBudget, setIsEditingBudget] = useState(false);
  const [budgetInput, setBudgetInput] = useState('');
  const [isCreditsMode, setIsCreditsMode] = useState(true); // Changed to start with TUs

  const handleSetBudget = () => {
    setIsEditingBudget(true);
    setBudgetInput('');
  };

  const handleBudgetSubmit = () => {
    const value = parseFloat(budgetInput) || 0;
    if (value === 0) {
      setBudget(null);
      onBudgetChange?.(null);
    } else {
      // Store budget in USD as base unit
      // If user entered in TU mode, convert TUs to USD (1 TU = $10)
      const budgetValue = isCreditsMode ? value * 10 : value;
      setBudget(budgetValue);
      onBudgetChange?.(budgetValue);
    }
    setIsEditingBudget(false);
  };

  const handleBudgetKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleBudgetSubmit();
    }
    if (e.key === 'Escape') {
      setIsEditingBudget(false);
      // Convert stored USD to display value based on current mode
      const displayValue = budget && isCreditsMode ? budget / 10 : budget;
      setBudgetInput(displayValue?.toString() || '');
    }
  };

  const handleEditBudget = () => {
    setIsEditingBudget(true);
    // Convert stored USD to display value based on current mode
    const displayValue = budget && isCreditsMode ? budget / 10 : budget;
    setBudgetInput(displayValue?.toString() || '');
  };

  const handleDeleteBudget = () => {
    setBudget(null);
    setIsEditingBudget(false);
    onBudgetChange?.(null);
  };

  const handleCopy = (value: string) => {
    navigator.clipboard.writeText(value);
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  // Convert stored USD values to display values based on current mode
  // Total and budget are stored in USD, convert to TUs for display (1 TU = $10)
  const displayTotal = isCreditsMode ? total / 10 : total;
  const displayBudget = budget && isCreditsMode ? budget / 10 : budget;
  const difference = budget ? budget - total : 0; // Calculate difference in USD
  const displayDifference = isCreditsMode ? difference / 10 : difference; // Convert to display units

  const shouldShowBudgetButton = !isEditingBudget && (budget === null || budget === 0);

  return (
    <div className="flex w-full min-w-0">
      {/* Main content */}
      <div className="flex flex-col gap-2 flex-1">
        {/* Budget Row */}
        <div className="flex items-center">
          {shouldShowBudgetButton ? (
            <div className="relative group">
              <button
                onClick={handleSetBudget}
                className="bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 text-white rounded-md text-sm px-3 py-2 whitespace-nowrap min-w-[240px] sm:min-w-[280px] font-bold"
                style={{ transition: 'background-color 0.2s' }}
                title="Set a budget to track your spending"
              >
                Set Budget
              </button>
            </div>
          ) : (
            <div className="relative">
              {isEditingBudget ? (
                <>
                  <div className="flex items-center">
                    <div className="px-3 py-1.5 border-2 border-orange-500 rounded-md focus-within:border-orange-600 bg-transparent text-white text-sm font-bold w-[180px] sm:w-[200px] flex items-center">
                      <span className="inline-block w-3 text-left">{isCreditsMode ? '' : '$'}</span>
                      <span className="flex-1">
                        <input
                          type="number"
                          value={budgetInput}
                          onChange={(e) => setBudgetInput(e.target.value)}
                          onBlur={handleBudgetSubmit}
                          onKeyDown={handleBudgetKeyPress}
                          className="w-full bg-transparent focus:outline-none font-bold"
                          autoFocus
                          onFocus={(e) => e.target.select()}
                        />
                      </span>
                    </div>
                  </div>
                  {/* Edit controls positioned within total field width */}
                  <div className="absolute top-0 right-0 translate-x-full ml-2 flex items-center h-full">
                    <div className="flex items-center gap-1 w-[68px] justify-end">
                      <button
                        onClick={handleBudgetSubmit}
                        className="p-1.5 text-green-400 hover:text-green-300 flex-shrink-0"
                        style={{ transition: 'color 0.2s' }}
                        title="Save changes"
                      >
                        <Check className="w-3.5 h-3.5" />
                      </button>
                      <button
                        onClick={() => setIsEditingBudget(false)}
                        className="p-1.5 text-red-400 hover:text-red-300 flex-shrink-0"
                        style={{ transition: 'color 0.2s' }}
                        title="Cancel editing"
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="relative group">
                    <button
                      onClick={handleEditBudget}
                      className="px-3 py-1.5 border-2 border-orange-500 rounded-md text-left text-white bg-transparent hover:bg-white/10 text-sm w-[180px] sm:w-[200px] font-bold flex items-center"
                      style={{ transition: 'background-color 0.2s' }}
                      title="Edit budget"
                    >
                      <span className="inline-block w-3 text-left">{isCreditsMode ? '' : '$'}</span>
                      <span className="flex-1">
                        {displayBudget ? formatCurrency(displayBudget) : '0'}
                      </span>
                      <span className="text-xs text-gray-300 ml-1 font-bold">Budget</span>
                    </button>
                  </div>
                  
                  {/* Edit controls positioned within total field width */}
                  <div className="absolute top-0 right-0 translate-x-full ml-2 flex items-center h-full">
                    <div className="flex items-center gap-1 w-[68px] justify-end">
                      <button
                        onClick={handleEditBudget}
                        className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
                        style={{ transition: 'color 0.2s' }}
                        title="Edit budget"
                      >
                        <Edit className="w-3.5 h-3.5" />
                      </button>
                      <button
                        onClick={handleDeleteBudget}
                        className="p-1.5 text-gray-300 hover:text-red-400 flex-shrink-0"
                        style={{ transition: 'color 0.2s' }}
                        title="Delete budget"
                      >
                        <Trash2 className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          )}
        </div>

        {/* Total Row - 10% bigger with embedded toggle */}
        <div className="flex items-center">
          <div className="relative">
            <div className="px-3 py-2.5 border-4 border-white rounded-md text-white bg-transparent text-lg flex items-center justify-between min-w-[240px] sm:min-w-[280px] font-bold">
              <div className="flex items-center flex-1">
                <span className="text-orange-400 flex items-center">
                  <span className="inline-block w-3 text-left">{isCreditsMode ? '' : '$'}</span>
                  <span className="flex-1">
                    {formatCurrency(displayTotal)}
                  </span>
                </span>
                <span className="text-sm text-gray-300 ml-1 font-bold">Total</span>
              </div>
              
              <div className="w-4"></div>
              
              {/* Embedded Currency Toggle - TUs first, with rounded oval indicator */}
              <div className="relative group">
                <button
                  onClick={() => setIsCreditsMode(!isCreditsMode)}
                  className="relative flex items-center bg-gradient-to-r from-orange-500 to-pink-500 rounded-full overflow-hidden hover:from-orange-600 hover:to-pink-600 text-xs p-0"
                  style={{ transition: 'background-color 0.2s' }}
                  title={isCreditsMode ? 'Toggle to USD' : 'Toggle to Training Units (Credits)'}
                >
                  {/* Selected option background - white oval */}
                  <div className={`absolute top-0 bottom-0 bg-white rounded-full transition-transform duration-200 ${
                    isCreditsMode ? 'translate-x-0' : 'translate-x-full'
                  } w-1/2 m-0.5`}></div>
                  
                  {/* Button content */}
                  <div className={`relative z-10 px-2 py-1 font-bold ${
                    isCreditsMode ? 'text-black' : 'text-white'
                  }`}
                  style={{ transition: 'color 0.2s' }}>
                    TUs
                  </div>
                  <div className={`relative z-10 px-2 py-1 font-bold ${
                    !isCreditsMode ? 'text-black' : 'text-white'
                  }`}
                  style={{ transition: 'color 0.2s' }}>
                    USD
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Difference Row (only shown when budget is set) */}
        {budget !== null && budget !== 0 && (
          <div className="flex items-center">
            <div className="relative">
              <div className={`px-3 py-1.5 border-2 rounded-md text-white bg-transparent text-sm w-[180px] sm:w-[200px] font-bold flex items-center ${
                difference >= 0 ? 'border-green-500' : 'border-red-500'
              }`}>
                <span className={`flex items-center flex-1 ${difference >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {difference < 0 && <span className="mr-1">-</span>}
                  <span className="inline-block w-3 text-left">{isCreditsMode ? '' : '$'}</span>
                  <span className="flex-1">
                    {formatCurrency(Math.abs(displayDifference))}
                  </span>
                </span>
                <span className="text-xs text-gray-300 ml-1 font-bold">Difference</span>
              </div>
              {/* Space to match total field width */}
              <div className="absolute top-0 right-0 translate-x-full">
                <div className="w-4"></div>
                <div className="w-[76px]"></div> {/* Space to match toggle */}
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Copy buttons section - right edge of page */}
      <div className="flex flex-col gap-2 ml-4 sm:ml-8 w-[44px]">
        {/* Budget copy button - always reserve space, show when budget is set and not editing */}
        <div className="flex items-center h-[42px] justify-center">
          {!shouldShowBudgetButton && !isEditingBudget && (
            <button
              onClick={() => handleCopy((displayBudget || 0).toString())}
              className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
              style={{ transition: 'color 0.2s' }}
              title="Copy budget"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>
        
        {/* Total copy button - always reserve space, show when total > 0 */}
        <div className="flex items-center h-[50px] justify-center">
          {total > 0 && (
            <button
              onClick={() => handleCopy(displayTotal.toString())}
              className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
              style={{ transition: 'color 0.2s' }}
              title="Copy total"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>
        
        {/* Difference copy button - always reserve space, show when budget is set */}
        <div className="flex items-center h-[42px] justify-center">
          {budget !== null && budget !== 0 && (
            <button
              onClick={() => handleCopy(displayDifference.toString())}
              className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
              style={{ transition: 'color 0.2s' }}
              title="Copy difference"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default Calculator;