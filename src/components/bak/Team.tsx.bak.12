import React, { useState, useEffect } from 'react';
import { Plus, Edit, Check, X } from 'lucide-react';
import TeamInsights from './TeamInsights';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface SelectionCellProps {
  isSelected: boolean;
  onToggle: () => void;
  courseName: string;
  memberName: string;
  rowIndex: number;
}

interface TeamMemberHeaderProps {
  member: string;
  index: number;
  onEdit: () => void;
  isEditing: boolean;
  editValue: string;
  onEditChange: (value: string) => void;
  onSave: () => void;
  onCancel: () => void;
  totalMembers: number;
}

interface TeamProps {
  courses: Course[];
  onScroll?: (scrollTop: number) => void;
  scrollTop?: number;
}

const SelectionCell = ({ isSelected, onToggle, courseName, memberName, rowIndex }: SelectionCellProps) => {
  return (
    <td className={`w-32 h-12 text-center cursor-pointer transition-all duration-200 border-b border-gray-200 ${
      rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'
    } hover:bg-orange-50 ${isSelected ? 'bg-yellow-100' : ''}`}>
      <button
        onClick={onToggle}
        className={`w-full h-full flex items-center justify-center text-lg font-bold transition-colors ${
          isSelected ? 'text-orange-600' : 'text-gray-400 hover:text-orange-600'
        }`}
        title={`Toggle ${courseName} for ${memberName}`}
        aria-label={`${isSelected ? 'Remove' : 'Add'} ${courseName} for ${memberName}`}
      >
        {isSelected ? 'âœ“' : ''}
      </button>
    </td>
  );
};

const TeamMemberHeader = ({ member, index, onEdit, isEditing, editValue, onEditChange, onSave, onCancel, totalMembers }: TeamMemberHeaderProps) => {
  // Calculate gradient color based on position
  const getGradientColor = (index: number, total: number) => {
    if (total === 1) return 'bg-gray-600';
    
    const ratio = index / (total - 1);
    const darkness = Math.round(96 - (ratio * 32)); // From 96 (gray-600) to 64 (lighter)
    
    if (ratio === 0) return 'bg-black';
    if (ratio === 1) return 'bg-gray-400';
    
    // Interpolate between black and gray-400
    const grayValue = Math.round(400 - (ratio * 200));
    return `bg-gray-${Math.max(400, Math.min(600, grayValue))}`;
  };

  return (
    <th className={`w-32 h-12 text-center sticky top-0 z-10 ${getGradientColor(index, totalMembers)} text-white font-semibold`}
        style={{
          background: `linear-gradient(90deg, 
            ${index === 0 ? '#000000' : `hsl(0, 0%, ${20 + (index / (totalMembers - 1)) * 50}%)`} 0%, 
            ${index === totalMembers - 1 ? '#a1a1aa' : `hsl(0, 0%, ${25 + (index / (totalMembers - 1)) * 45}%)`} 100%)`
        }}>
      {isEditing ? (
        <div className="flex items-center justify-center gap-1">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') onSave();
              if (e.key === 'Escape') onCancel();
            }}
            className="w-20 h-6 px-1 text-xs text-gray-800 rounded border-none outline-none text-center"
            autoFocus
            maxLength={20}
          />
          <button onClick={onSave} className="text-green-300 hover:text-green-100" title="Save">
            <Check className="w-3 h-3" />
          </button>
          <button onClick={onCancel} className="text-red-300 hover:text-red-100" title="Cancel">
            <X className="w-3 h-3" />
          </button>
        </div>
      ) : (
        <div className="flex items-center justify-center gap-1">
          <button
            onClick={onEdit}
            className="font-semibold hover:bg-white/20 rounded transition-colors px-1 text-center truncate max-w-24"
            title="Click to edit name"
          >
            {member}
          </button>
          <button onClick={onEdit} className="text-white/70 hover:text-white" title="Edit name">
            <Edit className="w-3 h-3" />
          </button>
        </div>
      )}
    </th>
  );
};

const Team: React.FC<TeamProps> = ({ courses, onScroll, scrollTop }) => {
  const CAST_NAMES = [
    'Richard Hendricks',
    'Erlich Bachman',
    'Dinesh Chugtai',
    'Bertram Gilfoyle',
    'Jared Dunn',
    'Monica Hall',
    'Gavin Belson',
    'Nelson Bighetti',
    'Russ Hanneman',
    'Peter Gregory',
    'Laurie Bream',
    'Ed Chen',
    'Hoover Chan',
    'Don Bang',
    'Carla Walton',
    'Dan Melcher',
    'Fiona Wallace',
    'John Stafford',
    'Kara Swisher',
    'Maximo Reyes'
  ];

  const MAX_TEAM_MEMBERS = 10;

  const [teamMembers, setTeamMembers] = useState([CAST_NAMES[0]]);
  const [selections, setSelections] = useState<Record<string, boolean>>({});
  const [editingMember, setEditingMember] = useState<number | null>(null);
  const [editValue, setEditValue] = useState('');

  useEffect(() => {
    const scrollContainer = document.getElementById('team-scroll');
    if (scrollContainer && scrollTop !== undefined) {
      scrollContainer.scrollTop = scrollTop;
    }
  }, [scrollTop]);

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    onScroll?.(e.currentTarget.scrollTop);
  };

  const handleAddTeamMember = () => {
    if (teamMembers.length >= MAX_TEAM_MEMBERS) return;
    
    const newMemberName = CAST_NAMES[teamMembers.length] || `Team Member ${teamMembers.length + 1}`;
    setTeamMembers([...teamMembers, newMemberName]);
  };

  const handleUpdateTeamMember = (index: number, newName: string) => {
    const trimmedName = newName.trim();
    if (!trimmedName) return;
    
    // Check for duplicate names
    if (teamMembers.some((name, i) => i !== index && name.toLowerCase() === trimmedName.toLowerCase())) {
      return;
    }
    
    const updatedMembers = [...teamMembers];
    updatedMembers[index] = trimmedName;
    setTeamMembers(updatedMembers);
  };

  const handleToggleSelection = (courseIndex: number, memberIndex: number) => {
    const key = `${courseIndex}-${memberIndex}`;
    setSelections(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const isSelected = (courseIndex: number, memberIndex: number) => {
    const key = `${courseIndex}-${memberIndex}`;
    return selections[key] || false;
  };

  const startEditing = (index: number) => {
    setEditingMember(index);
    setEditValue(teamMembers[index]);
  };

  const saveEdit = () => {
    if (editValue.trim() && editingMember !== null) {
      handleUpdateTeamMember(editingMember, editValue.trim());
    }
    setEditingMember(null);
    setEditValue('');
  };

  const cancelEdit = () => {
    setEditingMember(null);
    setEditValue('');
  };

  const canAddMember = teamMembers.length < MAX_TEAM_MEMBERS;

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-hidden">
        <div 
          id="team-scroll"
          className="h-full overflow-y-auto overflow-x-auto"
          onScroll={handleScroll}
        >
          <table className="w-full border-collapse">
            <thead>
              <tr>
                {teamMembers.map((member, index) => (
                  <TeamMemberHeader
                    key={index}
                    member={member}
                    index={index}
                    totalMembers={teamMembers.length}
                    isEditing={editingMember === index}
                    editValue={editValue}
                    onEdit={() => startEditing(index)}
                    onEditChange={setEditValue}
                    onSave={saveEdit}
                    onCancel={cancelEdit}
                  />
                ))}
                <th className="w-24 h-12 bg-gray-600 text-white font-semibold sticky top-0 z-10">
                  <button 
                    onClick={handleAddTeamMember}
                    disabled={!canAddMember}
                    className={`w-full h-full bg-transparent border-none text-white transition-colors rounded flex items-center justify-center gap-1 font-semibold ${
                      canAddMember 
                        ? 'hover:bg-white/20 cursor-pointer' 
                        : 'opacity-50 cursor-not-allowed'
                    }`}
                    title={canAddMember ? "Add team member" : `Maximum ${MAX_TEAM_MEMBERS} members allowed`}
                  >
                    <Plus className="w-5 h-5" />
                  </button>
                </th>
              </tr>
            </thead>
            <tbody>
              {courses.map((course, courseIndex) => (
                <tr key={course.ID} className={`h-12 border-b border-gray-200 ${
                  courseIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'
                } hover:bg-orange-50 transition-colors`}>
                  {teamMembers.map((member, memberIndex) => (
                    <SelectionCell
                      key={memberIndex}
                      isSelected={isSelected(courseIndex, memberIndex)}
                      onToggle={() => handleToggleSelection(courseIndex, memberIndex)}
                      courseName={course.Name}
                      memberName={member}
                      rowIndex={courseIndex}
                    />
                  ))}
                  <td className="w-24 h-12 bg-transparent"></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      
      <TeamInsights />
    </div>
  );
};

export default Team;