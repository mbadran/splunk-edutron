import React, {
  useState,
  useCallback,
  forwardRef,
  useImperativeHandle,
} from "react";
import { useQuery } from "@tanstack/react-query";
import { Clock, DollarSign, ExternalLink, GraduationCap } from "lucide-react";
import Papa from "papaparse";
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  ColumnDef,
  getSortedRowModel,
  SortingState,
  ColumnResizeMode,
} from "@tanstack/react-table";
import BaseTable, { BaseTableRef, SortableHeader } from "./BaseTable";
import { Course } from "./types";
import { CATEGORY_COLORS, MODE_COLORS, MODE_TOOLTIPS } from "./constants";

interface CatalogProps {
  onCoursesLoad?: (count: number, courses: Course[]) => void;
  onScroll?: (scrollTop: number) => void;
}

interface CatalogRef {
  scrollToOffset: (offset: number) => void;
}

const loadCoursesFromCSV = async (): Promise<Course[]> => {
  const response = await fetch("/catalog.csv");
  if (!response.ok) {
    throw new Error(`Failed to load catalog.csv: ${response.status}`);
  }
  const text = await response.text();

  return new Promise((resolve, reject) => {
    Papa.parse(text, {
      header: true,
      skipEmptyLines: true,
      dynamicTyping: true,
      trimHeaders: true,
      delimitersToGuess: [",", "\t", "|", ";"],
      transform: (value, header) => {
        if (typeof value === "string") {
          return value.trim();
        }
        return value;
      },
      complete: (results) => {
        try {
          const courses: Course[] = [];

          for (const row of results.data as any[]) {
            // Handle STEP ID column name variations
            if (row["STEP ID"]) {
              row.STEP_ID = row["STEP ID"];
              delete row["STEP ID"];
            }
            if (row["Step ID"]) {
              row.STEP_ID = row["Step ID"];
              delete row["Step ID"];
            }
            if (row["step_id"]) {
              row.STEP_ID = row["step_id"];
              delete row["step_id"];
            }

            // Only include rows with required fields
            if (row.ID && row.Name) {
              const course: Course = {
                ID: String(row.ID || "").trim(),
                Name: String(row.Name || "").trim(),
                Category: String(row.Category || "").trim(),
                Duration: Number(row.Duration) || 0,
                Mode: String(row.Mode || "").trim(),
                Price: Number(row.Price) || 0,
                STEP_ID: row.STEP_ID ? String(row.STEP_ID).trim() : undefined,
              };

              courses.push(course);
            }
          }

          if (courses.length === 0) {
            reject(new Error("No valid courses found in catalog.csv"));
          } else {
            resolve(courses);
          }
        } catch (error) {
          reject(error);
        }
      },
      error: (error) => {
        reject(new Error(`CSV parsing error: ${error.message}`));
      },
    });
  });
};

const Catalog = forwardRef<CatalogRef, CatalogProps>(
  ({ onCoursesLoad, onScroll }, ref) => {
    const [sorting, setSorting] = useState<SortingState>([]);
    const baseTableRef = React.useRef<BaseTableRef>(null);

    // React Query for data fetching
    const {
      data: courses = [],
      isLoading,
      error,
      refetch,
    } = useQuery({
      queryKey: ["courses"],
      queryFn: loadCoursesFromCSV,
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes
      retry: 2,
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
    });

    // Notify parent when courses load
    React.useEffect(() => {
      if (courses.length > 0 && onCoursesLoad) {
        onCoursesLoad(courses.length, courses);
      }
    }, [courses, onCoursesLoad]);

    useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        baseTableRef.current?.scrollToOffset(offset);
      },
    }));

    const columnHelper = createColumnHelper<Course>();

    const generateCourseUrl = useCallback((stepId: string): string => {
      if (!stepId) return "#";
      return `https://education.splunk.com/Saba/Web_spf/NA10P2PRD105/guestapp/ledetail/${stepId}?utm_source=splunk-edutron`;
    }, []);

    const getCategoryColor = useCallback((category: string): string => {
      return CATEGORY_COLORS[category] || "bg-gray-500 text-white";
    }, []);

    const getModeColor = useCallback((mode: string): string => {
      return MODE_COLORS[mode] || "bg-gray-100 text-gray-800";
    }, []);

    const getModeTooltip = useCallback((mode: string): string => {
      return MODE_TOOLTIPS[mode] || mode;
    }, []);

    const columns: ColumnDef<Course>[] = React.useMemo(
      () => [
        columnHelper.accessor("ID", {
          id: "ID",
          header: ({ column }) => (
            <SortableHeader column={column}>ID</SortableHeader>
          ),
          cell: (info) => (
            <div className="h-12 flex items-center justify-start px-2">
              <code className="text-sm font-mono text-gray-700 bg-gray-200 px-2 py-1 rounded whitespace-nowrap">
                {info.getValue()}
              </code>
            </div>
          ),
          footer: () => "Total",
          size: 120,
          minSize: 80,
          maxSize: 200,
          enableResizing: true,
        }),
        columnHelper.accessor("Category", {
          id: "Category",
          header: ({ column }) => (
            <SortableHeader column={column}>Category</SortableHeader>
          ),
          cell: (info) => (
            <div className="h-12 flex items-center justify-start px-2">
              <span
                className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${getCategoryColor(info.getValue())}`}
              >
                {info.getValue()}
              </span>
            </div>
          ),
          footer: ({ table }) => {
            const uniqueCategories = new Set(
              table
                .getFilteredRowModel()
                .rows.map((row) => row.original.Category),
            );
            return `${uniqueCategories.size} Categories`;
          },
          size: 120,
          minSize: 100,
          maxSize: 150,
          enableResizing: true,
        }),
        columnHelper.accessor("Mode", {
          id: "Mode",
          header: ({ column }) => (
            <SortableHeader column={column}>Mode</SortableHeader>
          ),
          cell: (info) => (
            <div className="h-12 flex items-center justify-start px-2">
              <span
                className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${getModeColor(info.getValue())}`}
                title={getModeTooltip(info.getValue())}
              >
                {info.getValue()}
              </span>
            </div>
          ),
          footer: ({ table }) => {
            const modes = table
              .getFilteredRowModel()
              .rows.map((row) => row.original.Mode);
            const modeCounts = modes.reduce(
              (acc, mode) => {
                acc[mode] = (acc[mode] || 0) + 1;
                return acc;
              },
              {} as Record<string, number>,
            );
            return `${Object.keys(modeCounts).length} Modes`;
          },
          size: 80,
          minSize: 60,
          maxSize: 100,
          enableResizing: true,
        }),
        columnHelper.accessor("Duration", {
          id: "Duration",
          header: ({ column }) => (
            <SortableHeader column={column}>Duration</SortableHeader>
          ),
          cell: (info) => (
            <div className="h-12 flex items-center justify-start px-2">
              <div className="relative bg-yellow-100 px-2 py-1 rounded inline-block">
                <Clock className="absolute left-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-600 opacity-80" />
                <span className="text-sm font-medium text-gray-700 pl-4">
                  {info.getValue()}h
                </span>
              </div>
            </div>
          ),
          footer: ({ table }) => {
            const totalHours = table
              .getFilteredRowModel()
              .rows.reduce((sum, row) => sum + row.original.Duration, 0);
            return `${totalHours}h Total`;
          },
          size: 120,
          minSize: 100,
          maxSize: 150,
          enableResizing: true,
        }),
        columnHelper.accessor("Price", {
          id: "Price",
          header: ({ column }) => (
            <SortableHeader column={column}>Price</SortableHeader>
          ),
          cell: (info) => (
            <div className="h-12 flex items-center justify-start px-2">
              {info.getValue() === 0 ? (
                <span className="text-gray-700 font-medium text-sm bg-green-200 px-2 py-1 rounded whitespace-nowrap">
                  Free
                </span>
              ) : (
                <div className="flex items-center text-gray-700 bg-pink-200 px-2 py-1 rounded">
                  <DollarSign className="w-3 h-3 mr-1" />
                  <span className="font-medium text-sm font-mono">
                    {info.getValue().toLocaleString("en-US")}
                  </span>
                </div>
              )}
            </div>
          ),
          footer: ({ table }) => {
            const totalValue = table
              .getFilteredRowModel()
              .rows.reduce((sum, row) => sum + row.original.Price, 0);
            return `$${totalValue.toLocaleString("en-US")}`;
          },
          size: 100,
          minSize: 80,
          maxSize: 150,
          enableResizing: true,
        }),
        columnHelper.accessor("Name", {
          id: "Name",
          header: ({ column }) => (
            <SortableHeader column={column}>Course</SortableHeader>
          ),
          cell: (info) => {
            const course = info.row.original;
            return (
              <div className="h-12 flex items-center justify-start px-2">
                <div className="whitespace-nowrap overflow-hidden min-w-0">
                  {course.STEP_ID ? (
                    <a
                      href={generateCourseUrl(course.STEP_ID)}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0"
                      title={course.Name}
                    >
                      <span className="truncate min-w-0">{course.Name}</span>
                      <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
                    </a>
                  ) : (
                    <span
                      className="font-medium text-gray-900 truncate block min-w-0"
                      title={course.Name}
                    >
                      {course.Name}
                    </span>
                  )}
                </div>
              </div>
            );
          },
          footer: ({ table }) =>
            `${table.getFilteredRowModel().rows.length} Courses`,
          size: 350,
          minSize: 200,
          maxSize: 500,
          enableResizing: true,
        }),
      ],
      [
        columnHelper,
        getCategoryColor,
        getModeColor,
        getModeTooltip,
        generateCourseUrl,
      ],
    );

    const table = useReactTable({
      data: courses,
      columns,
      getCoreRowModel: getCoreRowModel(),
      getSortedRowModel: getSortedRowModel(),
      onSortingChange: setSorting,
      state: {
        sorting,
      },
      columnResizeMode: "onChange" as ColumnResizeMode,
      enableColumnResizing: true,
      enableSorting: true,
    });

    if (isLoading) {
      return (
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <div className="w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-600">Loading course catalog...</p>
          </div>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex items-center justify-center h-full p-4">
          <div className="max-w-md mx-auto text-center">
            <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
                <GraduationCap className="w-8 h-8 text-gray-600" />
              </div>
              <div className="text-red-400 mb-4 text-2xl">⚠️ Error</div>
              <p className="text-gray-600 mb-4">{(error as Error).message}</p>
              <p className="text-gray-500 text-sm mb-6">
                Make sure catalog.csv is in your /public directory
              </p>
              <div className="space-y-3">
                <button
                  onClick={() => refetch()}
                  className="w-full bg-orange-500 text-white hover:bg-orange-600 font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  Retry Loading
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    return (
      <BaseTable
        ref={baseTableRef}
        table={table}
        onScroll={onScroll}
        headerClassName="bg-slate-800"
        rowHeight={48}
      />
    );
  },
);

Catalog.displayName = "Catalog";

export default Catalog;
