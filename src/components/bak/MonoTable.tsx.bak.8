import React, { useMemo, useEffect } from "react";
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  ColumnResizeMode,
} from "@tanstack/react-table";
import { useAtom } from "jotai";
import BaseTable from "./common/BaseTable";
import { DEFAULT_TEAM_NAMES } from "@/utils/constants";
import {
  plannerCoursesAtom,
  planStateAtom,
  addTeamMemberAtom,
  setStatusAtom,
} from "@/atoms/globalAtoms";
import { useCatalogs } from "@/hooks/useCatalogs";
import { useMonoTableSelection } from "@/hooks/planner/useMonoTableSelection";
import { useTeamMemberManagement } from "@/hooks/planner/useTeamMemberManagement";
import { useMonoTableColumns } from "@/hooks/planner/useMonoTableColumns";
import { Person } from "@/types/types";

const MonoTable: React.FC = () => {
  // Use useCatalogs hook to ensure data is loaded
  const { catalogs, loading, error } = useCatalogs();
  const [courses] = useAtom(plannerCoursesAtom);
  const [planState] = useAtom(planStateAtom);
  const [, addTeamMember] = useAtom(addTeamMemberAtom);
  const [, setStatus] = useAtom(setStatusAtom);

  // Custom hooks for modular functionality
  const selectionHook = useMonoTableSelection();
  const teamManagementHook = useTeamMemberManagement();
  const { allColumns } = useMonoTableColumns(
    planState.teamMembers,
    selectionHook,
    teamManagementHook,
  );

  // Debug logging to track data flow
  useEffect(() => {
    console.log("MonoTable - catalogs loaded:", catalogs.length);
    console.log("MonoTable - courses from atom:", courses?.length || 0);
    console.log("MonoTable - plan state catalogs:", planState.catalogs);
    console.log(
      "MonoTable - team members:",
      planState.teamMembers?.length || 0,
    );

    if (courses?.length > 0) {
      console.log("MonoTable - sample course:", courses[0]);
    }
  }, [catalogs, courses, planState]);

  // Initialize team members if empty
  useEffect(() => {
    if (planState.teamMembers.length === 0) {
      const defaultMember: Person = {
        id: `person-initial`, // This will be replaced by addTeamMemberAtom with proper random ID
        name: DEFAULT_TEAM_NAMES[0] || "Team Member 1",
        teamId: "team-initial", // This will be set properly by addTeamMemberAtom
      };
      addTeamMember(defaultMember);
    }
  }, [planState.teamMembers.length, addTeamMember]);

  // Create table with TanStack's built-in row selection
  const table = useReactTable({
    data: courses || [],
    columns: allColumns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    enableColumnResizing: true,
    enableColumnPinning: true,
    enableSorting: true,
    enableRowSelection: true, // Enable TanStack's native row selection
    columnResizeMode: "onChange" as ColumnResizeMode,
    state: {
      columnPinning: {
        left: [
          "#",
          "ID",
          "Name",
          "Category",
          "Price",
          "PDF",
          "Mode",
          "Language",
          "Duration",
        ],
      },
      rowSelection: selectionHook.getRowSelectionState(), // Use our selection state
    },
    onRowSelectionChange: selectionHook.onRowSelectionChange, // Handle selection changes
    initialState: {
      sorting: [],
    },
    meta: {
      updateData: (rowIndex: number, columnId: string, value: unknown) => {
        console.log("Update data:", { rowIndex, columnId, value });
      },
    },
  });

  // Handle sorting status indicator
  useEffect(() => {
    const sortingState = table.getState().sorting;
    if (sortingState.length > 0) {
      setStatus({ isWorking: true, message: "Sorting courses..." });

      const timer = setTimeout(() => {
        setStatus({ isWorking: false, message: "" });
      }, 300);

      return () => clearTimeout(timer);
    }
  }, [table.getState().sorting, setStatus]);

  // Force table re-render when selections change
  useEffect(() => {
    // This will force the table to re-render when selection state changes
    table.resetRowSelection();
  }, [planState.selections, table]);

  // Show loading state while catalogs are loading
  if (loading) {
    return (
      <div
        id="mono-table-loading"
        className="h-full w-full flex items-center justify-center"
      >
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading training courses...</p>
        </div>
      </div>
    );
  }

  // Show error state if catalog loading failed
  if (error) {
    return (
      <div
        id="mono-table-error"
        className="h-full w-full flex items-center justify-center"
      >
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-red-600 mb-4">
            <svg
              className="w-12 h-12 mx-auto"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Failed to Load Courses
          </h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <p className="text-sm text-gray-500">
            Please refresh the page to try again.
          </p>
        </div>
      </div>
    );
  }

  // Empty state message
  const emptyStateMessage =
    !courses || courses.length === 0
      ? "No courses available. Please check that catalogs are loaded."
      : "No courses available for team assignment";

  return (
    <div id="mono-table" className="h-full w-full">
      <BaseTable
        table={table}
        headerClassName="bg-slate-300 text-slate-800"
        rowHeight={48}
        emptyStateMessage={emptyStateMessage}
        loadingState={loading}
        containerClassName="h-full"
      />
    </div>
  );
};

export default MonoTable;
