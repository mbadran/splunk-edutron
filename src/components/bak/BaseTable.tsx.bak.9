import React from "react";
import {
  Table,
  flexRender,
  ColumnResizeMode,
  Column,
} from "@tanstack/react-table";
import { GripVertical, ArrowUpDown, ArrowUp, ArrowDown } from "lucide-react";
import { useAtom } from "jotai";
import { atom } from "jotai";
import { DEFAULT_TABLE } from "@/utils/constants";

// Jotai atoms for table state
const tableScrollAtom = atom<number>(0);
const tableContainerHeightAtom = atom<number>(DEFAULT_TABLE.CONTAINER_HEIGHT);

export const SortableHeader = <TData,>({
  column,
  children,
  showDragHandle = false,
}: {
  column: Column<TData, unknown>;
  children: React.ReactNode;
  showDragHandle?: boolean;
}) => {
  const isSorted = column.getIsSorted();
  const canSort = column.getCanSort();

  const handleSort = (e: React.MouseEvent) => {
    e.preventDefault();
    if (canSort) {
      column.toggleSorting(undefined, false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (canSort && (e.key === "Enter" || e.key === " ")) {
      e.preventDefault();
      column.toggleSorting(undefined, false);
    }
  };

  return (
    <div className="flex items-center gap-2 w-full">
      {showDragHandle && (
        <div
          className="cursor-grab hover:cursor-grab active:cursor-grabbing p-1 hover:bg-slate-600 rounded transition-colors opacity-50 hover:opacity-100"
          title="Drag to reorder column"
          role="button"
          tabIndex={0}
          aria-label="Drag to reorder column"
        >
          <GripVertical className="w-3 h-3" />
        </div>
      )}

      <div
        className={`flex items-center gap-1 px-1 py-1 rounded transition-colors flex-1 min-w-0 ${
          canSort ? "cursor-pointer select-none hover:bg-slate-700" : ""
        }`}
        onClick={handleSort}
        role={canSort ? "button" : undefined}
        tabIndex={canSort ? 0 : undefined}
        aria-label={canSort ? `Sort by ${children}` : undefined}
        aria-sort={
          isSorted === "asc"
            ? "ascending"
            : isSorted === "desc"
              ? "descending"
              : canSort
                ? "none"
                : undefined
        }
        onKeyDown={handleKeyDown}
      >
        <span className="truncate">{children}</span>
        {canSort && (
          <div className="w-4 h-4 flex items-center justify-center flex-shrink-0">
            {isSorted === "asc" ? (
              <ArrowUp className="w-3 h-3" />
            ) : isSorted === "desc" ? (
              <ArrowDown className="w-3 h-3" />
            ) : (
              <ArrowUpDown className="w-3 h-3 opacity-50" />
            )}
          </div>
        )}
      </div>
    </div>
  );
};

interface BaseTableProps<TData> {
  table: Table<TData>;
  onScroll?: (scrollTop: number) => void;
  headerClassName?: string;
  containerClassName?: string;
  rowHeight?: number;
  renderFooter?: () => React.ReactNode;
  columnResizeMode?: ColumnResizeMode;
  emptyStateMessage?: string;
  loadingState?: boolean;
}

const BaseTable = <TData,>({
  table,
  onScroll,
  headerClassName = "bg-slate-800",
  containerClassName = "",
  rowHeight = DEFAULT_TABLE.ROW_HEIGHT,
  renderFooter,
  emptyStateMessage = "No data available",
  loadingState = false,
}: BaseTableProps<TData>) => {
  const [scrollTop, setScrollTop] = useAtom(tableScrollAtom);
  const [containerHeight] = useAtom(tableContainerHeightAtom);

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const newScrollTop = e.currentTarget.scrollTop;
    setScrollTop(newScrollTop);
    if (onScroll) {
      onScroll(newScrollTop);
    }
  };

  // Get table data
  const rows = table.getRowModel().rows;
  const headerGroups = table.getHeaderGroups();
  const totalWidth = table.getTotalSize();

  const renderEmptyState = () => (
    <div id="table-empty-state" className="flex items-center justify-center h-32 text-gray-500">
      <p>{emptyStateMessage}</p>
    </div>
  );

  const renderLoadingState = () => (
    <div id="table-loading-state" className="flex items-center justify-center h-32">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-600"></div>
    </div>
  );

  return (
    <div id="base-table-container" className={`flex flex-col h-full ${containerClassName}`}>
      <div className="flex-1 overflow-hidden">
        <div className="h-full flex flex-col">
          {/* Fixed Header */}
          <div id="table-header" className="sticky top-0 z-10 border-b border-gray-200 overflow-hidden">
            <div
              className={`${headerClassName} w-full`}
              style={{
                minWidth: totalWidth,
                overflowX: "hidden",
              }}
            >
              {headerGroups.map((headerGroup) => (
                <div key={headerGroup.id} className="flex w-full">
                  {headerGroup.headers.map((header) => {
                    const resizeHandler = header.getResizeHandler();

                    return (
                      <div
                        key={header.id}
                        className="text-white font-semibold px-1 py-3 border-r border-slate-700 relative bg-slate-800"
                        style={{
                          width: header.getSize(),
                          minWidth: header.getSize(),
                          height: "56px",
                        }}
                      >
                        {header.isPlaceholder ? null : (
                          <>
                            <div className="h-full flex items-center">
                              {flexRender(
                                header.column.columnDef.header,
                                header.getContext(),
                              )}
                            </div>
                            {/* Column resizer */}
                            {header.column.getCanResize() && (
                              <div
                                className={`absolute right-0 top-0 h-full w-1 cursor-col-resize hover:bg-slate-500 transition-colors ${
                                  header.column.getIsResizing()
                                    ? "bg-slate-400 opacity-100"
                                    : "bg-slate-600 opacity-0 hover:opacity-100"
                                }`}
                                onMouseDown={resizeHandler}
                                onTouchStart={resizeHandler}
                                role="separator"
                                aria-label={`Resize column ${header.column.id}`}
                                tabIndex={0}
                                style={{
                                  transform: header.column.getIsResizing()
                                    ? "scaleX(2)"
                                    : "scaleX(1)",
                                }}
                              />
                            )}
                          </>
                        )}
                      </div>
                    );
                  })}
                </div>
              ))}
            </div>
          </div>

          {/* Scrollable Body */}
          <div className="flex-1">
            <div
              id="table-body"
              className="overflow-auto pb-4"
              style={{ height: containerHeight }}
              onScroll={handleScroll}
              role="grid"
              aria-label="Data table"
              aria-rowcount={rows.length}
              aria-colcount={table.getAllColumns().length}
            >
              <div className="w-full" style={{ width: totalWidth }}>
                {loadingState
                  ? renderLoadingState()
                  : rows.length === 0
                    ? renderEmptyState()
                    : rows.map((row, index) => {
                        const rowClass =
                          index % 2 === 0 ? "bg-white" : "bg-gray-50";

                        return (
                          <div
                            key={row.id}
                            className={`flex border-b border-gray-200 hover:bg-orange-50 transition-colors ${rowClass}`}
                            style={{ height: rowHeight }}
                            role="row"
                            aria-rowindex={index + 2}
                          >
                            {row.getVisibleCells().map((cell, cellIndex) => (
                              <div
                                key={cell.id}
                                className="px-1 py-1 flex items-center border-r border-gray-200 last:border-r-0"
                                style={{
                                  width: cell.column.getSize(),
                                  minWidth: cell.column.getSize(),
                                }}
                                role="gridcell"
                                aria-colindex={cellIndex + 1}
                              >
                                {flexRender(
                                  cell.column.columnDef.cell,
                                  cell.getContext(),
                                )}
                              </div>
                            ))}
                          </div>
                        );
                      })}
              </div>
            </div>
          </div>
        </div>
      </div>
      {renderFooter && (
        <div id="table-footer" className="flex-shrink-0 border-t border-gray-200">
          {renderFooter()}
        </div>
      )}
    </div>
  );
};

export default BaseTable;