import React from "react";
import { Copy, Edit, Trash2, Check, X } from "lucide-react";
import { useAtom } from "jotai";
import {
  planStateAtom,
  isEditingBudgetAtom,
  budgetInputAtom,
  isCreditsUnitModeAtom,
  setBudgetAtom,
  setStatusAtom,
} from "@/atoms/globalAtoms";

interface PlanCalculatorProps {
  total?: number;
  onBudgetChange?: (budget: number | null) => void;
}

const PlanCalculator = ({
  total: externalTotal,
  onBudgetChange,
}: PlanCalculatorProps) => {
  // Use plan state from global atoms exclusively
  const [planState] = useAtom(planStateAtom);
  const [isEditingBudget, setIsEditingBudget] = useAtom(isEditingBudgetAtom);
  const [budgetInput, setBudgetInput] = useAtom(budgetInputAtom);
  const [isCreditsMode, setIsCreditsMode] = useAtom(isCreditsUnitModeAtom);
  const [, setBudget] = useAtom(setBudgetAtom);
  const [, setStatus] = useAtom(setStatusAtom);

  // Use external total if provided, otherwise use 0
  const total = externalTotal || 0;
  const budget = planState.budget;

  const handleSetBudget = () => {
    setStatus({ isWorking: true, message: "Setting Up Budget..." });
    setIsEditingBudget(true);
    setBudgetInput("");
    setStatus({ isWorking: false, message: "" });
  };

  const handleBudgetSubmit = () => {
    setStatus({ isWorking: true, message: "Saving Budget..." });

    const value = parseFloat(budgetInput) || 0;
    let budgetValue: number | null = null;

    if (value > 0) {
      // Store budget in USD as base unit
      // If user entered in TU mode, convert TUs to USD (1 TU = $10)
      budgetValue = isCreditsMode ? value * 10 : value;
    }

    setBudget(budgetValue);
    onBudgetChange?.(budgetValue);
  };

  const handleBudgetKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleBudgetSubmit();
    }
    if (e.key === "Escape") {
      setIsEditingBudget(false);
      // Convert stored USD to display value based on current mode
      const displayValue = budget && isCreditsMode ? budget / 10 : budget;
      setBudgetInput(displayValue?.toString() || "");
    }
  };

  const handleEditBudget = () => {
    setStatus({ isWorking: true, message: "Editing Budget..." });
    setIsEditingBudget(true);
    // Convert stored USD to display value based on current mode
    const displayValue = budget && isCreditsMode ? budget / 10 : budget;
    setBudgetInput(displayValue?.toString() || "");
    setStatus({ isWorking: false, message: "" });
  };

  const handleDeleteBudget = () => {
    setStatus({ isWorking: true, message: "Removing Budget..." });
    setBudget(null);
    onBudgetChange?.(null);
  };

  const handleCopy = (value: string) => {
    setStatus({ isWorking: true, message: "Copying to Clipboard..." });
    navigator.clipboard
      .writeText(value)
      .then(() => {
        setStatus({ isWorking: false, message: "Copied!" });
        setTimeout(() => setStatus({ isWorking: false, message: "" }), 1000);
      })
      .catch(() => {
        setStatus({ isWorking: false, message: "Copy Failed..." });
      });
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  // Convert stored USD values to display values based on current mode
  // Total and budget are stored in USD, convert to TUs for display (1 TU = $10)
  const displayTotal = isCreditsMode ? total / 10 : total;
  const displayBudget = budget && isCreditsMode ? budget / 10 : budget;
  const difference = budget ? budget - total : 0; // Calculate difference in USD
  const displayDifference = isCreditsMode ? difference / 10 : difference; // Convert to display units

  const shouldShowBudgetButton =
    !isEditingBudget && (budget === null || budget === 0);

  return (
    <div id="plan-calculator" className="flex w-full min-w-0">
      {/* Copy buttons section - left side */}
      <div className="flex flex-col gap-2 mr-4 sm:mr-2 w-[44px]">
        {/* Budget copy button - always reserve space, show when budget is set and not editing */}
        <div className="flex items-center h-[42px] justify-center">
          {!shouldShowBudgetButton && !isEditingBudget && (
            <button
              onClick={() => handleCopy((displayBudget || 0).toString())}
              className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
              style={{ transition: "color 0.2s" }}
              title="Copy Budget"
              aria-label="Copy budget value to clipboard"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>

        {/* Total copy button - always reserve space, show when total > 0 */}
        <div className="flex items-center h-[50px] justify-center">
          {total > 0 && (
            <button
              onClick={() => handleCopy(displayTotal.toString())}
              className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
              style={{ transition: "color 0.2s" }}
              title="Copy Total"
              aria-label="Copy total cost to clipboard"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>

        {/* Difference copy button - always reserve space, show when budget is set */}
        <div className="flex items-center h-[42px] justify-center">
          {budget !== null && budget !== 0 && (
            <button
              onClick={() => handleCopy(displayDifference.toString())}
              className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
              style={{ transition: "color 0.2s" }}
              title="Copy Difference"
              aria-label="Copy budget difference to clipboard"
            >
              <Copy className="w-3.5 h-3.5" />
            </button>
          )}
        </div>
      </div>

      {/* Main content */}
      <div className="flex flex-col gap-2 flex-1">
        {/* Budget Row */}
        <div className="flex items-center">
          {shouldShowBudgetButton ? (
            <div className="relative group">
              <button
                onClick={handleSetBudget}
                className="bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 text-white rounded-md text-sm px-3 py-2 whitespace-nowrap font-bold"
                style={{
                  transition: "background-color 0.2s",
                  minWidth: 175,
                  width: 175,
                }}
                title="Set a budget to manage your investment"
                aria-label="Set training budget"
              >
                Set Budget
              </button>
            </div>
          ) : (
            <div className="relative">
              {isEditingBudget ? (
                <>
                  <div className="flex items-center">
                    <div
                      className="px-3 py-1.5 border-2 border-orange-500 rounded-md focus-within:border-orange-600 bg-transparent text-white text-sm font-bold"
                      style={{ width: 175 }}
                    >
                      <div className="grid grid-cols-[12px_12px_1fr_auto] items-center gap-0">
                        <span className="text-left"></span>
                        <span className="text-left">
                          {isCreditsMode ? "" : "$"}
                        </span>
                        <input
                          id="budget-input"
                          type="number"
                          value={budgetInput}
                          onChange={(e) => setBudgetInput(e.target.value)}
                          onBlur={handleBudgetSubmit}
                          onKeyDown={handleBudgetKeyPress}
                          className="w-full bg-transparent focus:outline-none font-bold text-left"
                          autoFocus
                          onFocus={(e) => e.target.select()}
                          aria-label={`Budget amount in ${isCreditsMode ? "Training Units" : "USD"}`}
                        />
                        <span className="text-xs text-gray-300 font-bold">
                          Budget
                        </span>
                      </div>
                    </div>
                  </div>
                  {/* Edit controls positioned within total field width */}
                  <div className="absolute top-0 right-0 translate-x-full ml-2 flex items-center h-full">
                    <div className="flex items-center gap-1 w-[78px] justify-end">
                      <button
                        onClick={handleBudgetSubmit}
                        className="p-1.5 text-green-400 hover:text-green-300 flex-shrink-0"
                        style={{ transition: "color 0.2s" }}
                        title="Save changes"
                        aria-label="Save budget changes"
                      >
                        <Check className="w-3.5 h-3.5" />
                      </button>
                      <button
                        onClick={() => setIsEditingBudget(false)}
                        className="p-1.5 text-red-400 hover:text-red-300 flex-shrink-0"
                        style={{ transition: "color 0.2s" }}
                        title="Cancel editing"
                        aria-label="Cancel budget editing"
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="relative group">
                    <button
                      onClick={handleEditBudget}
                      className="px-3 py-1.5 border-2 border-orange-500 rounded-md text-left text-white bg-transparent hover:bg-white/10 text-sm font-bold"
                      style={{
                        transition: "background-color 0.2s",
                        width: 175,
                      }}
                      title="Edit Budget"
                      aria-label={`Edit budget: ${displayBudget ? formatCurrency(displayBudget) : "0"} ${isCreditsMode ? "Training Units" : "USD"}`}
                    >
                      <div className="grid grid-cols-[12px_12px_1fr_auto] items-center gap-0">
                        <span className="text-left"></span>
                        <span className="text-left">
                          {isCreditsMode ? "" : "$"}
                        </span>
                        <span className="text-left">
                          {displayBudget ? formatCurrency(displayBudget) : "0"}
                        </span>
                        <span className="text-xs text-gray-300 ml-1 font-bold">
                          Budget
                        </span>
                      </div>
                    </button>
                  </div>

                  {/* Edit controls positioned within total field width */}
                  <div className="absolute top-0 right-0 translate-x-full ml-2 flex items-center h-full">
                    <div className="flex items-center gap-1 w-[78px] justify-end">
                      <button
                        onClick={handleEditBudget}
                        className="p-1.5 text-gray-300 hover:text-white flex-shrink-0"
                        style={{ transition: "color 0.2s" }}
                        title="Edit Budget"
                        aria-label="Edit budget amount"
                      >
                        <Edit className="w-3.5 h-3.5" />
                      </button>
                      <button
                        onClick={handleDeleteBudget}
                        className="p-1.5 text-gray-300 hover:text-red-400 flex-shrink-0"
                        style={{ transition: "color 0.2s" }}
                        title="Delete Budget"
                        aria-label="Delete budget"
                      >
                        <Trash2 className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          )}
        </div>

        {/* Total Row - 10% bigger with embedded toggle */}
        <div className="flex items-center">
          <div className="relative">
            <div
              id="total-display"
              className="px-3 py-2.5 border-4 border-white rounded-md text-white bg-transparent text-lg min-w-[240px] sm:min-w-[280px] font-bold"
              aria-label={`Total cost: ${formatCurrency(displayTotal)} ${isCreditsMode ? "Training Units" : "USD"}`}
            >
              <div className="grid grid-cols-[12px_12px_1fr_auto_auto] items-center gap-0">
                <span className="text-left"></span>
                <span className="text-orange-400 text-left">
                  {isCreditsMode ? "" : "$"}
                </span>
                <span className="text-orange-400 text-left">
                  {formatCurrency(displayTotal)}
                </span>
                <span className="text-sm text-gray-300 ml-1 font-bold">
                  Total
                </span>

                <div className="w-4"></div>
              </div>

              {/* Embedded Currency Toggle - positioned absolutely to maintain grid */}
              <div className="absolute top-1/2 right-3 transform -translate-y-1/2">
                <button
                  onClick={() => {
                    setStatus({
                      isWorking: true,
                      message: `Switching to ${isCreditsMode ? "USD" : "Training Units"}...`,
                    });
                    setIsCreditsMode(!isCreditsMode);
                    setTimeout(
                      () => setStatus({ isWorking: false, message: "" }),
                      500,
                    );
                  }}
                  className="relative flex items-center bg-gradient-to-r from-orange-500 to-pink-500 rounded-full overflow-hidden hover:from-orange-600 hover:to-pink-600 text-xs p-0"
                  style={{ transition: "background-color 0.2s" }}
                  title={
                    isCreditsMode
                      ? "Toggle USD"
                      : "Toggle Training Units (Credits)"
                  }
                  aria-label={`Switch currency display to ${isCreditsMode ? "USD" : "Training Units"}`}
                >
                  {/* Selected option background - white oval */}
                  <div
                    className={`absolute top-0 bottom-0 bg-white rounded-full transition-transform duration-200 ${
                      isCreditsMode ? "translate-x-0" : "translate-x-full"
                    } w-1/2 m-0.5`}
                  ></div>

                  {/* Button content */}
                  <div
                    className={`relative z-10 px-2 py-1 font-bold ${
                      isCreditsMode ? "text-black" : "text-white"
                    }`}
                    style={{ transition: "color 0.2s" }}
                  >
                    TUs
                  </div>
                  <div
                    className={`relative z-10 px-2 py-1 font-bold ${
                      !isCreditsMode ? "text-black" : "text-white"
                    }`}
                    style={{ transition: "color 0.2s" }}
                  >
                    USD
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Difference Row (only shown when budget is set) */}
        {budget !== null && budget !== 0 && (
          <div className="flex items-center">
            <div className="relative">
              <div
                id="difference-display"
                className={`px-3 py-1.5 border-2 rounded-md text-white bg-transparent text-sm font-bold ${
                  difference >= 0 ? "border-green-500" : "border-red-500"
                }`}
                style={{ width: 175 }}
                aria-label={`Budget difference: ${difference >= 0 ? "surplus" : "deficit"} of ${formatCurrency(Math.abs(displayDifference))} ${isCreditsMode ? "Training Units" : "USD"}`}
              >
                <div className="grid grid-cols-[12px_12px_1fr_auto] items-center gap-0">
                  <span
                    className={`text-left ${difference >= 0 ? "text-green-400" : "text-red-400"}`}
                  >
                    {difference < 0 ? "-" : ""}
                  </span>
                  <span
                    className={`text-left ${difference >= 0 ? "text-green-400" : "text-red-400"}`}
                  >
                    {isCreditsMode ? "" : "$"}
                  </span>
                  <span
                    className={`text-left ${difference >= 0 ? "text-green-400" : "text-red-400"}`}
                  >
                    {formatCurrency(Math.abs(displayDifference))}
                  </span>
                  <span className="text-xs text-gray-300 ml-1 font-bold">
                    Difference
                  </span>
                </div>
              </div>
              {/* Space to match total field width */}
              <div className="absolute top-0 right-0 translate-x-full">
                <div className="w-4"></div>
                <div className="w-[76px]"></div> {/* Space to match toggle */}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PlanCalculator;
