import React from "react";
import { useAtom } from "jotai";
import Header from "./common/Header";
import MonoTable from "./MonoTable";
import { Person, Plan } from "@/types/types";
import { DEFAULT_TEAM_NAMES } from "@/utils/constants";
import {
  planStateAtom,
  updatePlanStateAtom,
  planTotalAtom,
  planSelectedCoursesAtom,
  planCostPerMemberAtom,
  plannerCoursesAtom,
  setStatusAtom,
} from "@/atoms/globalAtoms";

interface PlannerProps {
  onBackToHome: () => void;
}

const Planner: React.FC<PlannerProps> = ({ onBackToHome }) => {
  // Jotai state management - pure atoms, no local state
  const [planState] = useAtom(planStateAtom);
  const [, updatePlanState] = useAtom(updatePlanStateAtom);
  const [courses] = useAtom(plannerCoursesAtom);
  const [total] = useAtom(planTotalAtom);
  const [selectedCoursesCount] = useAtom(planSelectedCoursesAtom);
  const [costPerMember] = useAtom(planCostPerMemberAtom);
  const [, setStatus] = useAtom(setStatusAtom);

  // Initialize with default team member if empty
  React.useEffect(() => {
    if (planState.teamMembers.length === 0) {
      setStatus({ isWorking: true, message: "Initializing team..." });
      
      const defaultMember: Person = {
        id: `member-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        name: DEFAULT_TEAM_NAMES[0],
        email: "",
        role: "",
      };
      updatePlanState({ teamMembers: [defaultMember] });
    }
  }, [planState.teamMembers.length, updatePlanState, setStatus]);

  // Debug logging to track data flow
  React.useEffect(() => {
    console.log("Planner - courses available:", courses?.length || 0);
    console.log("Planner - team members:", planState.teamMembers?.length || 0);
    console.log("Planner - total cost:", total);
    console.log("Planner - selected courses:", selectedCoursesCount);
  }, [courses, planState.teamMembers, total, selectedCoursesCount]);

  // Handler functions
  const handleUpdateTitle = (newTitle: string) => {
    setStatus({ isWorking: true, message: "Updating plan title..." });
    updatePlanState({ title: newTitle });
  };

  // Simplified undo/redo - remove complex history management for now
  // TODO: Implement proper undo/redo in Stage 2 with global atoms
  const handleUndo = () => {
    setStatus({ isWorking: false, message: "Undo feature coming soon" });
  };

  const handleRedo = () => {
    setStatus({ isWorking: false, message: "Redo feature coming soon" });
  };

  const handleDownload = () => {
    setStatus({ isWorking: true, message: "Preparing plan export..." });

    try {
      const planExport: Plan = {
        metadata: {
          id: planState.id,
          title: planState.title,
          version: "1.0",
          createdAt: planState.createdAt,
          updatedAt: planState.updatedAt,
          exportedAt: new Date().toISOString(),
        },
        state: planState,
        totals: {
          selectedCourses: selectedCoursesCount,
          totalCost: total,
          costPerMember: costPerMember,
        },
        courses: courses || [],
      };

      const dataStr = JSON.stringify(planExport, null, 2);
      const dataUri =
        "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);

      const exportFileDefaultName = `${planState.title.replace(/[^a-z0-9]/gi, "_").toLowerCase()}_plan.json`;

      const linkElement = document.createElement("a");
      linkElement.setAttribute("href", dataUri);
      linkElement.setAttribute("download", exportFileDefaultName);
      linkElement.click();

      setStatus({ isWorking: false, message: "Plan exported successfully!" });
      
      // Clear success message after delay
      setTimeout(() => {
        setStatus({ isWorking: false, message: "" });
      }, 2000);

    } catch (error) {
      console.error("Export failed:", error);
      setStatus({ isWorking: false, message: "Export failed" });
    }
  };

  const handleBudgetChange = (newBudget: number | null) => {
    setStatus({ isWorking: true, message: "Updating plan budget..." });
    updatePlanState({ budget: newBudget });
  };

  // Navigation handler
  const handleNavigate = (route: string) => {
    setStatus({ isWorking: true, message: `Navigating to ${route}...` });
    console.log("Navigate to:", route);
    // TODO: Implement navigation logic when routing is added
    setTimeout(() => setStatus({ isWorking: false, message: "" }), 1000);
  };

  return (
    <div id="planner" className="min-h-screen bg-gray-50 flex flex-col">
      <Header
        onBackToHome={onBackToHome}
        pageTitle={planState.title}
        onUpdateTitle={handleUpdateTitle}
        onUndo={handleUndo}
        onRedo={handleRedo}
        onDownload={handleDownload}
        canUndo={false} // Simplified for now
        canRedo={false} // Simplified for now
        total={total}
        onBudgetChange={handleBudgetChange}
        currentRoute="/planner"
        onNavigate={handleNavigate}
      />

      {/* MonoTable replaces the dual-table PlanScroller - full height minus header */}
      <div className="flex-1 min-h-0 p-4">
        <div className="h-full">
          <MonoTable />
        </div>
      </div>
    </div>
  );
};

export default Planner;