import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';
import { Plus, Edit, Check, X, Trash2, GripVertical } from 'lucide-react';
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  ColumnDef,
  flexRender,
  ColumnOrderState,
} from '@tanstack/react-table';
import TeamInsights from './TeamInsights';

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface TeamProps {
  courses: Course[];
  courseCount: number;
  teamMembers: string[];
  selections: Record<string, boolean>;
  onTeamMembersChange: (members: string[]) => void;
  onToggleSelection: (courseIndex: number, memberIndex: number) => void;
  isSelected: (courseIndex: number, memberIndex: number) => boolean;
  onScroll?: (scrollOffset: number) => void;
}

interface SelectionCellProps {
  courseIndex: number;
  memberIndex: number;
  isSelected: boolean;
  onToggle: () => void;
  courseName: string;
  memberName: string;
}

interface TeamMemberHeaderProps {
  member: string;
  index: number;
  onEdit: () => void;
  onDelete: () => void;
  isEditing: boolean;
  editValue: string;
  onEditChange: (value: string) => void;
  onSave: () => void;
  onCancel: () => void;
  totalMembers: number;
}

const SelectionCell: React.FC<SelectionCellProps> = ({ 
  courseIndex,
  memberIndex,
  isSelected, 
  onToggle, 
  courseName, 
  memberName 
}) => {
  const cellClass = isSelected ? 'bg-green-200' : 'bg-transparent';
  
  return (
    <div className={`w-32 h-12 flex items-center justify-center cursor-pointer transition-all duration-200 border-b border-gray-200 ${cellClass} hover:bg-orange-50`}>
      <button
        onClick={onToggle}
        className={`w-full h-full flex items-center justify-center text-lg font-bold transition-colors ${
          isSelected ? 'text-green-700' : 'text-gray-400 hover:text-green-700'
        }`}
        title={`Toggle ${courseName} for ${memberName}`}
        aria-label={`${isSelected ? 'Remove' : 'Add'} ${courseName} for ${memberName}`}
      >
        {isSelected ? '‚óè' : ''}
      </button>
    </div>
  );
};

const TeamMemberHeader: React.FC<TeamMemberHeaderProps> = ({ 
  member, 
  index, 
  onEdit, 
  onDelete, 
  isEditing, 
  editValue, 
  onEditChange, 
  onSave, 
  onCancel, 
  totalMembers 
}) => {
  const getColumnGradient = (index: number, total: number) => {
    if (total === 1) return '#000000';
    const ratio = index / (total - 1);
    const grayValue = Math.round(80 * ratio);
    return `rgb(${grayValue}, ${grayValue}, ${grayValue})`;
  };

  return (
    <div className="w-32 px-2 py-3 border-r border-slate-700 relative text-white font-semibold"
         style={{ backgroundColor: getColumnGradient(index, totalMembers) }}>
      {isEditing ? (
        <div className="flex items-center justify-center gap-1">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') onSave();
              if (e.key === 'Escape') onCancel();
            }}
            className="w-20 h-6 px-1 text-xs text-white bg-transparent rounded border-none outline-none text-center border-b-2 border-dashed border-white/60"
            autoFocus
            maxLength={30}
            onFocus={(e) => e.target.select()}
          />
          <button onClick={onSave} className="text-green-300 hover:text-green-100" title="Save">
            <Check className="w-3 h-3" />
          </button>
          <button onClick={onCancel} className="text-red-300 hover:text-red-100" title="Cancel">
            <X className="w-3 h-3" />
          </button>
        </div>
      ) : (
        <div className="flex items-center gap-2 w-full">
          <div 
            className="flex items-center gap-1 px-1 flex-1 cursor-pointer select-none hover:bg-white/20 rounded transition-colors"
            onClick={onEdit}
          >
            <button
              className="font-semibold text-center min-w-0 flex-1"
              title={member}
            >
              <span className="block truncate leading-tight">{member}</span>
            </button>
            <div className="flex gap-1 flex-shrink-0">
              <Edit className="w-3 h-3 opacity-50 hover:opacity-100" />
              {totalMembers > 1 && (
                <Trash2 className="w-3 h-3 opacity-50 hover:opacity-100 hover:text-red-300" onClick={(e) => { e.stopPropagation(); onDelete(); }} />
              )}
            </div>
          </div>
          <div 
            className="cursor-grab hover:cursor-grab active:cursor-grabbing p-1 hover:bg-white/20 rounded transition-colors"
            onMouseDown={(e) => {
              e.stopPropagation();
              // Drag functionality handled by tanstack table
            }}
            title="Drag to reorder column"
          >
            <GripVertical className="w-3 h-3 opacity-50 hover:opacity-100" />
          </div>
        </div>
      )}
    </div>
  );
};

interface TeamRef {
  scrollToOffset: (offset: number) => void;
}

const Team = forwardRef<TeamRef, TeamProps>(({ 
  courses, 
  courseCount,
  teamMembers,
  selections,
  onTeamMembersChange,
  onToggleSelection,
  isSelected,
  onScroll 
}, ref) => {
  const CAST_NAMES = [
    'Richard Hendricks',
    'Erlich Bachman',
    'Dinesh Chugtai',
    'Bertram Gilfoyle',
    'Jared Dunn',
    'Monica Hall',
    'Gavin Belson',
    'Nelson Bighetti',
    'Russ Hanneman',
    'Peter Gregory',
    'Laurie Bream',
    'Ed Chen',
    'Hoover Chan',
    'Don Bang',
    'Carla Walton',
    'Dan Melcher',
    'Fiona Wallace',
    'John Stafford',
    'Kara Swisher',
    'Maximo Reyes'
  ];

  const MAX_TEAM_MEMBERS = 20;
  const ROW_HEIGHT = 48;
  const MEMBER_COLUMN_WIDTH = 128;

  const [editingMember, setEditingMember] = useState<number | null>(null);
  const [editValue, setEditValue] = useState('');
  const [containerHeight, setContainerHeight] = useState(400);
  const [columnOrder, setColumnOrder] = useState<ColumnOrderState>([]);
  const parentRef = useRef<HTMLDivElement>(null);

  // Initialize column order when team members change
  useEffect(() => {
    const memberColumns = teamMembers.map((_, index) => `member-${index}`);
    const newOrder = [...memberColumns, 'add-member'];
    setColumnOrder(newOrder);
  }, [teamMembers.length]);

  // Update container height on mount and resize
  useEffect(() => {
    const updateHeight = () => {
      if (typeof window !== 'undefined') {
        const newHeight = Math.max(400, window.innerHeight * 0.7 - 48);
        setContainerHeight(newHeight);
      }
    };

    updateHeight();
    
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', updateHeight);
      return () => window.removeEventListener('resize', updateHeight);
    }
  }, []);

  useImperativeHandle(ref, () => ({
    scrollToOffset: (offset: number) => {
      if (parentRef.current) {
        parentRef.current.scrollTop = offset;
      }
    }
  }));

  // Handle scroll events
  useEffect(() => {
    const handleScroll = () => {
      if (onScroll && parentRef.current) {
        onScroll(parentRef.current.scrollTop);
      }
    };

    const element = parentRef.current;
    if (element) {
      element.addEventListener('scroll', handleScroll);
      return () => element.removeEventListener('scroll', handleScroll);
    }
  }, [onScroll]);

  const handleDeleteTeamMember = (index: number) => {
    if (teamMembers.length <= 1) return;
    
    const updatedMembers = teamMembers.filter((_, i) => i !== index);
    onTeamMembersChange(updatedMembers);
    
    if (editingMember === index) {
      setEditingMember(null);
      setEditValue('');
    } else if (editingMember !== null && editingMember > index) {
      setEditingMember(editingMember - 1);
    }
  };

  const handleAddTeamMember = () => {
    if (teamMembers.length >= MAX_TEAM_MEMBERS) return;
    
    const newMemberName = CAST_NAMES[teamMembers.length] || `Team Member ${teamMembers.length + 1}`;
    onTeamMembersChange([...teamMembers, newMemberName]);
  };

  const handleUpdateTeamMember = (index: number, newName: string) => {
    const trimmedName = newName.trim();
    if (!trimmedName) return;
    
    if (teamMembers.some((name, i) => i !== index && name.toLowerCase() === trimmedName.toLowerCase())) {
      return;
    }
    
    const updatedMembers = [...teamMembers];
    updatedMembers[index] = trimmedName;
    onTeamMembersChange(updatedMembers);
  };

  const startEditing = (index: number) => {
    setEditingMember(index);
    setEditValue(teamMembers[index]);
  };

  const saveEdit = () => {
    if (editValue.trim() && editingMember !== null) {
      handleUpdateTeamMember(editingMember, editValue.trim());
    }
    setEditingMember(null);
    setEditValue('');
  };

  const cancelEdit = () => {
    setEditingMember(null);
    setEditValue('');
  };

  const canAddMember = teamMembers.length < MAX_TEAM_MEMBERS;

  const columnHelper = createColumnHelper<Course>();

  const columns: ColumnDef<Course, any>[] = [
    ...teamMembers.map((member, memberIndex) =>
      columnHelper.display({
        id: `member-${memberIndex}`,
        header: () => (
          <TeamMemberHeader
            member={member}
            index={memberIndex}
            totalMembers={teamMembers.length}
            isEditing={editingMember === memberIndex}
            editValue={editValue}
            onEdit={() => startEditing(memberIndex)}
            onDelete={() => handleDeleteTeamMember(memberIndex)}
            onEditChange={setEditValue}
            onSave={saveEdit}
            onCancel={cancelEdit}
          />
        ),
        cell: ({ row }) => (
          <SelectionCell
            courseIndex={row.index}
            memberIndex={memberIndex}
            isSelected={isSelected(row.index, memberIndex)}
            onToggle={() => onToggleSelection(row.index, memberIndex)}
            courseName={row.original.Name}
            memberName={member}
          />
        ),
        size: MEMBER_COLUMN_WIDTH,
        minSize: MEMBER_COLUMN_WIDTH,
        maxSize: MEMBER_COLUMN_WIDTH,
        enableResizing: false,
      })
    ),
    columnHelper.display({
      id: 'add-member',
      header: () => (
        <div className="w-32 px-2 py-3 border-r border-slate-700 bg-gray-600 text-white font-semibold flex items-center justify-center">
          <button 
            onClick={handleAddTeamMember}
            disabled={!canAddMember}
            className={`w-full h-full bg-transparent border-none text-white transition-colors rounded flex items-center justify-center gap-1 font-semibold ${
              canAddMember 
                ? 'hover:bg-white/20 cursor-pointer' 
                : 'opacity-50 cursor-not-allowed'
            }`}
            title={canAddMember ? "Add team member" : `Maximum ${MAX_TEAM_MEMBERS} members allowed`}
          >
            <Plus className="w-5 h-5" />
          </button>
        </div>
      ),
      cell: () => <div className="w-32 h-12"></div>,
      size: MEMBER_COLUMN_WIDTH,
      minSize: MEMBER_COLUMN_WIDTH,
      maxSize: MEMBER_COLUMN_WIDTH,
      enableResizing: false,
    }),
  ];

  const table = useReactTable({
    data: courses,
    columns,
    getCoreRowModel: getCoreRowModel(),
    onColumnOrderChange: setColumnOrder,
    state: {
      columnOrder,
    },
    enableColumnResizing: false,
  });

  const { rows } = table.getRowModel();

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-hidden">
        <div className="h-full flex flex-col">
          {/* Fixed Header - matches Catalog component structure */}
          <div className="flex sticky top-0 z-10 border-b border-gray-200 bg-slate-800">
            {table.getHeaderGroups().map(headerGroup => (
              <React.Fragment key={headerGroup.id}>
                {headerGroup.headers.map(header => (
                  <div key={header.id} style={{ width: header.getSize() }}>
                    {flexRender(header.column.columnDef.header, header.getContext())}
                  </div>
                ))}
              </React.Fragment>
            ))}
            {/* Fill remaining space with gray background */}
            <div className="flex-1 bg-gray-600"></div>
          </div>
          
          {/* Scrollable Body - matches Catalog component structure */}
          <div className="flex-1">
            <div
              ref={parentRef}
              className="team-scroll-container overflow-auto pb-4"
              style={{ height: containerHeight }}
            >
              <div className="w-full">
                {rows.map((row, index) => {
                  const rowClass = index % 2 === 0 ? 'bg-white' : 'bg-gray-50';
                  
                  return (
                    <div
                      key={row.id}
                      className={`flex border-b border-gray-200 hover:bg-orange-50 transition-colors ${rowClass}`}
                      style={{ height: ROW_HEIGHT }}
                    >
                      {row.getVisibleCells().map(cell => (
                        <div key={cell.id} style={{ width: cell.column.getSize() }}>
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </div>
                      ))}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <TeamInsights />
    </div>
  );
});

Team.displayName = 'Team';

export default Team;