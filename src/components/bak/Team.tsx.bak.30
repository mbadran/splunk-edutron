import React, {
  useState,
  forwardRef,
  useImperativeHandle,
  useCallback,
  useMemo,
} from "react";
import { Plus, Edit, Check, X, Trash2 } from "lucide-react";
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  ColumnDef,
} from "@tanstack/react-table";
import BaseTable, {
  BaseTableRef,
  TABLE_CONSTANTS,
  SortableHeader,
} from "./BaseTable";
import { DEFAULT_TEAM_NAMES } from "./constants";
import TeamInsights from "./TeamInsights";

interface Course {
  ID: string;
  Name: string;
  Category: string;
  Duration: number;
  Mode: string;
  Price: number;
  STEP_ID?: string;
}

interface TeamProps {
  courses: Course[];
  courseCount: number;
  teamMembers: string[];
  selections: Record<string, boolean>;
  onTeamMembersChange: (members: string[]) => void;
  onToggleSelection: (courseIndex: number, memberIndex: number) => void;
  isSelected: (courseIndex: number, memberIndex: number) => boolean;
  onScroll?: (scrollOffset: number) => void;
}

interface SelectionCellProps {
  courseIndex: number;
  memberIndex: number;
  isSelected: boolean;
  onToggle: () => void;
  courseName: string;
  memberName: string;
}

interface TeamMemberHeaderProps {
  member: string;
  index: number;
  onEdit: () => void;
  onDelete: () => void;
  isEditing: boolean;
  editValue: string;
  onEditChange: (value: string) => void;
  onSave: () => void;
  onCancel: () => void;
  totalMembers: number;
}

interface TeamRef {
  scrollToOffset: (offset: number) => void;
}

const MAX_TEAM_MEMBERS = 20;
const MEMBER_COLUMN_WIDTH = TABLE_CONSTANTS.COLUMN_WIDTH.MEDIUM;

const SelectionCell: React.FC<SelectionCellProps> = React.memo(
  ({
    courseIndex,
    memberIndex,
    isSelected,
    onToggle,
    courseName,
    memberName,
  }) => {
    return (
      <div className="h-12 flex items-center justify-center px-2">
        {isSelected ? (
          <button
            onClick={onToggle}
            className="w-full h-8 flex items-center justify-center text-lg font-bold transition-all duration-200 rounded cursor-pointer bg-green-500 text-white hover:bg-green-600"
            title={`Remove ${courseName} for ${memberName}`}
            aria-label={`Remove ${courseName} for ${memberName}`}
          >
            ‚óè
          </button>
        ) : (
          <button
            onClick={onToggle}
            className="w-full h-8 flex items-center justify-center transition-all duration-200 rounded cursor-pointer hover:bg-orange-100"
            title={`Add ${courseName} for ${memberName}`}
            aria-label={`Add ${courseName} for ${memberName}`}
          >
            {/* Completely blank when not selected */}
          </button>
        )}
      </div>
    );
  },
);

SelectionCell.displayName = "SelectionCell";

const TeamMemberHeader: React.FC<TeamMemberHeaderProps> = React.memo(
  ({
    member,
    index,
    onEdit,
    onDelete,
    isEditing,
    editValue,
    onEditChange,
    onSave,
    onCancel,
    totalMembers,
  }) => {
    // Get first name for display
    const displayName = useMemo(() => member.split(" ")[0], [member]);
    const needsEllipsis = member !== displayName;

    if (isEditing) {
      return (
        <div className="flex flex-col items-center justify-center gap-2 w-full h-full px-2">
          <input
            type="text"
            value={editValue}
            onChange={(e) => onEditChange(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") onSave();
              if (e.key === "Escape") onCancel();
            }}
            className="w-full h-6 px-1 text-xs text-white bg-transparent rounded border-none outline-none text-center border-b-2 border-dashed border-white/60"
            autoFocus
            maxLength={30}
            onFocus={(e) => e.target.select()}
          />
          <div className="flex gap-2">
            <button
              onClick={onSave}
              className="text-green-300 hover:text-green-100 p-1 rounded"
              title="Save"
            >
              <Check className="w-3 h-3" />
            </button>
            <button
              onClick={onCancel}
              className="text-red-300 hover:text-red-100 p-1 rounded"
              title="Cancel"
            >
              <X className="w-3 h-3" />
            </button>
          </div>
        </div>
      );
    }

    return (
      <div className="flex items-center justify-between w-full h-full px-2">
        {/* Member name */}
        <div
          className="flex-1 text-center cursor-pointer select-none hover:bg-slate-700/50 rounded px-1 py-1 transition-colors min-w-0"
          onClick={onEdit}
          title={member}
        >
          <span className="text-sm font-semibold truncate block">
            {displayName}
            {needsEllipsis ? "..." : ""}
          </span>
        </div>

        {/* Action buttons */}
        <div className="flex flex-shrink-0 gap-1 opacity-75 hover:opacity-100 transition-opacity">
          <button
            onClick={onEdit}
            className="p-1 hover:bg-slate-600 rounded transition-colors"
            title="Edit name"
          >
            <Edit className="w-3 h-3" />
          </button>

          {totalMembers > 1 && (
            <button
              onClick={onDelete}
              className="p-1 hover:bg-slate-600 hover:text-red-300 rounded transition-colors"
              title="Delete member"
            >
              <Trash2 className="w-3 h-3" />
            </button>
          )}
        </div>
      </div>
    );
  },
);

TeamMemberHeader.displayName = "TeamMemberHeader";

const Team = forwardRef<TeamRef, TeamProps>(
  (
    {
      courses,
      courseCount,
      teamMembers,
      selections,
      onTeamMembersChange,
      onToggleSelection,
      isSelected,
      onScroll,
    },
    ref,
  ) => {
    const [editingMember, setEditingMember] = useState<number | null>(null);
    const [editValue, setEditValue] = useState("");

    const baseTableRef = React.useRef<BaseTableRef>(null);

    useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        baseTableRef.current?.scrollToOffset(offset);
      },
    }));

    const handleDeleteTeamMember = useCallback(
      (index: number) => {
        if (teamMembers.length <= 1) return;

        const updatedMembers = teamMembers.filter((_, i) => i !== index);
        onTeamMembersChange(updatedMembers);

        if (editingMember === index) {
          setEditingMember(null);
          setEditValue("");
        } else if (editingMember !== null && editingMember > index) {
          setEditingMember(editingMember - 1);
        }
      },
      [teamMembers, onTeamMembersChange, editingMember],
    );

    const handleAddTeamMember = useCallback(() => {
      if (teamMembers.length >= MAX_TEAM_MEMBERS) return;

      const newMemberName =
        DEFAULT_TEAM_NAMES[teamMembers.length] ||
        `Team Member ${teamMembers.length + 1}`;
      onTeamMembersChange([...teamMembers, newMemberName]);
    }, [teamMembers, onTeamMembersChange]);

    const handleUpdateTeamMember = useCallback(
      (index: number, newName: string) => {
        const trimmedName = newName.trim();
        if (!trimmedName) return;

        if (
          teamMembers.some(
            (name, i) =>
              i !== index && name.toLowerCase() === trimmedName.toLowerCase(),
          )
        ) {
          return;
        }

        const updatedMembers = [...teamMembers];
        updatedMembers[index] = trimmedName;
        onTeamMembersChange(updatedMembers);
      },
      [teamMembers, onTeamMembersChange],
    );

    const startEditing = useCallback(
      (index: number) => {
        setEditingMember(index);
        setEditValue(teamMembers[index]);
      },
      [teamMembers],
    );

    const saveEdit = useCallback(() => {
      if (editValue.trim() && editingMember !== null) {
        handleUpdateTeamMember(editingMember, editValue.trim());
      }
      setEditingMember(null);
      setEditValue("");
    }, [editValue, editingMember, handleUpdateTeamMember]);

    const cancelEdit = useCallback(() => {
      setEditingMember(null);
      setEditValue("");
    }, []);

    const canAddMember = teamMembers.length < MAX_TEAM_MEMBERS;

    const columnHelper = createColumnHelper<Course>();

    const columns: ColumnDef<Course, any>[] = useMemo(
      () => [
        ...teamMembers.map((member, memberIndex) =>
          columnHelper.display({
            id: `member-${memberIndex}`,
            header: ({ column }) => (
              <SortableHeader column={column} showDragHandle={false}>
                <TeamMemberHeader
                  member={member}
                  index={memberIndex}
                  totalMembers={teamMembers.length}
                  isEditing={editingMember === memberIndex}
                  editValue={editValue}
                  onEdit={() => startEditing(memberIndex)}
                  onDelete={() => handleDeleteTeamMember(memberIndex)}
                  onEditChange={setEditValue}
                  onSave={saveEdit}
                  onCancel={cancelEdit}
                />
              </SortableHeader>
            ),
            cell: ({ row }) => (
              <SelectionCell
                courseIndex={row.index}
                memberIndex={memberIndex}
                isSelected={isSelected(row.index, memberIndex)}
                onToggle={() => onToggleSelection(row.index, memberIndex)}
                courseName={row.original.Name}
                memberName={member}
              />
            ),
            size: MEMBER_COLUMN_WIDTH,
            minSize: MEMBER_COLUMN_WIDTH,
            maxSize: MEMBER_COLUMN_WIDTH,
            enableResizing: false,
          }),
        ),
        columnHelper.display({
          id: "add-member",
          header: ({ column }) => (
            <SortableHeader column={column} showDragHandle={false}>
              <button
                onClick={handleAddTeamMember}
                disabled={!canAddMember}
                className={`w-full h-full bg-transparent border-none text-white transition-colors rounded flex items-center justify-center gap-1 font-semibold ${
                  canAddMember
                    ? "hover:bg-slate-700 cursor-pointer"
                    : "opacity-50 cursor-not-allowed"
                }`}
                title={
                  canAddMember
                    ? "Add team member"
                    : `Maximum ${MAX_TEAM_MEMBERS} members allowed`
                }
              >
                <Plus className="w-5 h-5" />
              </button>
            </SortableHeader>
          ),
          cell: () => <div className="h-12"></div>,
          size: MEMBER_COLUMN_WIDTH,
          minSize: MEMBER_COLUMN_WIDTH,
          maxSize: MEMBER_COLUMN_WIDTH,
          enableResizing: false,
        }),
      ],
      [
        teamMembers,
        editingMember,
        editValue,
        canAddMember,
        isSelected,
        onToggleSelection,
        startEditing,
        handleDeleteTeamMember,
        saveEdit,
        cancelEdit,
        handleAddTeamMember,
        columnHelper,
      ],
    );

    const table = useReactTable({
      data: courses,
      columns,
      getCoreRowModel: getCoreRowModel(),
      enableColumnResizing: false,
    });

    const renderFooter = useCallback(() => <TeamInsights />, []);

    return (
      <BaseTable
        ref={baseTableRef}
        table={table}
        onScroll={onScroll}
        headerClassName="bg-slate-800"
        rowHeight={TABLE_CONSTANTS.ROW_HEIGHT}
        renderFooter={renderFooter}
        emptyStateMessage="No courses available for team assignment"
      />
    );
  },
);

Team.displayName = "Team";

export default Team;
