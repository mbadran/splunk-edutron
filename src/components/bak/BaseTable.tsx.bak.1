import React, { useRef, useEffect, useState, forwardRef, useImperativeHandle } from "react";
import {
  Table,
  flexRender,
  ColumnResizeMode,
} from "@tanstack/react-table";
import { GripVertical, ArrowUpDown, ArrowUp, ArrowDown } from "lucide-react";

export interface BaseTableRef {
  scrollToOffset: (offset: number) => void;
}

interface BaseTableProps<TData> {
  table: Table<TData>;
  onScroll?: (scrollTop: number) => void;
  headerClassName?: string;
  containerClassName?: string;
  rowHeight?: number;
  renderFooter?: () => React.ReactNode;
}

export const SortableHeader = ({
  column,
  children,
  showDragHandle = false,
}: {
  column: any;
  children: React.ReactNode;
  showDragHandle?: boolean;
}) => {
  const isSorted = column.getIsSorted();

  return (
    <div className="flex items-center gap-2 w-full">
      {showDragHandle && (
        <div
          className="cursor-grab hover:cursor-grab active:cursor-grabbing p-1 hover:bg-slate-600 rounded transition-colors opacity-50 hover:opacity-100"
          title="Drag to reorder column"
        >
          <GripVertical className="w-3 h-3" />
        </div>
      )}
      
      <div
        className="flex items-center gap-1 cursor-pointer select-none hover:bg-slate-700 px-2 py-1 rounded transition-colors flex-1 min-w-0"
        onClick={column.getToggleSortingHandler()}
      >
        <span className="truncate">{children}</span>
        <div className="w-4 h-4 flex items-center justify-center flex-shrink-0">
          {isSorted === "asc" && <ArrowUp className="w-3 h-3" />}
          {isSorted === "desc" && <ArrowDown className="w-3 h-3" />}
          {!isSorted && <ArrowUpDown className="w-3 h-3 opacity-50" />}
        </div>
      </div>
    </div>
  );
};

const BaseTable = forwardRef<BaseTableRef, BaseTableProps<any>>(
  ({ 
    table, 
    onScroll, 
    headerClassName = "bg-slate-800", 
    containerClassName = "",
    rowHeight = 48,
    renderFooter 
  }, ref) => {
    const [containerHeight, setContainerHeight] = useState(400);
    const parentRef = useRef<HTMLDivElement>(null);

    // Update container height on mount and resize
    useEffect(() => {
      const updateHeight = () => {
        if (typeof window !== "undefined") {
          const newHeight = Math.max(400, window.innerHeight * 0.7 - 48);
          setContainerHeight(newHeight);
        }
      };

      updateHeight();

      if (typeof window !== "undefined") {
        window.addEventListener("resize", updateHeight);
        return () => window.removeEventListener("resize", updateHeight);
      }
    }, []);

    useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        if (parentRef.current) {
          parentRef.current.scrollTop = offset;
        }
      },
    }));

    // Handle scroll events
    useEffect(() => {
      const handleScroll = () => {
        if (onScroll && parentRef.current) {
          onScroll(parentRef.current.scrollTop);
        }
      };

      const element = parentRef.current;
      if (element) {
        element.addEventListener("scroll", handleScroll);
        return () => element.removeEventListener("scroll", handleScroll);
      }
    }, [onScroll]);

    const { rows } = table.getRowModel();
    const headerGroups = table.getHeaderGroups();
    const footerGroups = table.getFooterGroups();

    // Calculate total table width for horizontal scrolling
    const totalWidth = table.getAllColumns().reduce((acc, column) => {
      return acc + (column.getSize() || 150);
    }, 0);

    return (
      <div className={`flex flex-col h-full ${containerClassName}`}>
        <div className="flex-1 overflow-hidden">
          <div className="h-full flex flex-col">
            {/* Fixed Header */}
            <div 
              className={`sticky top-0 z-10 border-b border-gray-200 ${headerClassName}`}
              style={{ minWidth: totalWidth }}
            >
              {headerGroups.map((headerGroup) => (
                <div key={headerGroup.id} className="flex">
                  {headerGroup.headers.map((header) => (
                    <div
                      key={header.id}
                      className="text-white font-semibold px-2 py-3 border-r border-slate-700 relative"
                      style={{
                        width: header.getSize(),
                        minWidth: header.getSize(),
                      }}
                    >
                      {header.isPlaceholder ? null : (
                        <>
                          {flexRender(
                            header.column.columnDef.header,
                            header.getContext(),
                          )}
                          {/* Column Resizer */}
                          {header.column.getCanResize() && (
                            <div
                              className="absolute right-0 top-0 h-full w-1 bg-slate-600 cursor-col-resize hover:bg-slate-500 opacity-0 hover:opacity-100 transition-opacity"
                              onMouseDown={header.getResizeHandler()}
                              onTouchStart={header.getResizeHandler()}
                            />
                          )}
                        </>
                      )}
                    </div>
                  ))}
                </div>
              ))}
            </div>

            {/* Scrollable Body */}
            <div className="flex-1">
              <div
                ref={parentRef}
                className="overflow-auto pb-4"
                style={{ height: containerHeight }}
              >
                <div className="w-full" style={{ minWidth: totalWidth }}>
                  {rows.map((row, index) => {
                    const rowClass = index % 2 === 0 ? "bg-white" : "bg-gray-50";

                    return (
                      <div
                        key={row.id}
                        className={`flex border-b border-gray-200 hover:bg-orange-50 transition-colors ${rowClass}`}
                        style={{ height: rowHeight }}
                      >
                        {row.getVisibleCells().map((cell) => (
                          <div
                            key={cell.id}
                            style={{
                              width: cell.column.getSize(),
                              minWidth: cell.column.getSize(),
                            }}
                          >
                            {flexRender(
                              cell.column.columnDef.cell,
                              cell.getContext(),
                            )}
                          </div>
                        ))}
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            {/* Footer */}
            {renderFooter && (
              <div className="border-t border-gray-200 bg-gray-50">
                {renderFooter()}
              </div>
            )}
            
            {/* TanStack Table Footer */}
            {footerGroups.length > 0 && (
              <div 
                className="border-t border-gray-200 bg-gray-50"
                style={{ minWidth: totalWidth }}
              >
                {footerGroups.map((footerGroup) => (
                  <div key={footerGroup.id} className="flex">
                    {footerGroup.headers.map((header) => (
                      <div
                        key={header.id}
                        className="px-2 py-2 text-sm font-medium text-gray-700 border-r border-gray-200"
                        style={{
                          width: header.getSize(),
                          minWidth: header.getSize(),
                        }}
                      >
                        {header.isPlaceholder ? null : (
                          flexRender(
                            header.column.columnDef.footer,
                            header.getContext(),
                          )
                        )}
                      </div>
                    ))}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
);

BaseTable.displayName = "BaseTable";

export default BaseTable;