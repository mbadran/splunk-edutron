import React from "react";
import {
  useReactTable,
  getCoreRowModel,
  createColumnHelper,
  ColumnDef,
  getSortedRowModel,
  ColumnResizeMode,
} from "@tanstack/react-table";
import { Clock, DollarSign, ExternalLink, FileText } from "lucide-react";
import BaseTable, { SortableHeader } from "@/components/common/BaseTable";
import CatalogBase from "./CatalogBase";
import { Course } from "@/types/types";
import {
  COURSE_URL,
  CATEGORY_COLORS,
  MODE_COLORS,
  MODE_TOOLTIPS,
  DEFAULT_TABLE,
  DETAILS_URL,
} from "@/utils/constants";

interface CatalogTableProps {
  onScroll?: (scrollTop: number) => void;
}

// Configuration constants
const COLUMN_EXCEPTIONS = new Set<string>([
  "STEP_ID", // Use values but don't display as column
]);

// Define column order - columns not in this list will be added at the end
const COLUMN_ORDER = ["ID", "Category", "Price", "Name", "Mode", "Language", "Duration", "PDF"];

// Simplified column configuration
const COLUMN_SIZES: Record<
  string,
  { size: number; minSize: number; maxSize: number }
> = {
  "#": {
    size: DEFAULT_TABLE.COLUMN_WIDTH.XSMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_XSMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_XSMALL,
  },
  ID: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_MEDIUM,
  },
  Category: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_LARGE,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
  },
  Mode: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
  },
  Language: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
  },
  Duration: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_LARGE,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
  },
  Price: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.MEDIUM,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_MEDIUM,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
  },
  Name: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.XXLARGE,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_XXLARGE,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_XXLARGE,
  },
  PDF: {
    size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
    minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
    maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
  },
};

const CatalogTable: React.FC<CatalogTableProps> = ({ onScroll }) => {
  const columnHelper = createColumnHelper<Course>();

  // Cell renderer components - simplified and extracted
  const RowNumberCell = ({ rowIndex }: { rowIndex: number }) => (
    <div
      id={`row-number-${rowIndex}`}
      className="h-12 flex items-center justify-end px-2"
    >
      <span className="text-sm font-mono text-gray-600 font-medium">
        {rowIndex + 1}
      </span>
    </div>
  );

  const IdCell = ({ value, rowIndex }: { value: any; rowIndex: number }) => (
    <div
      id={`course-id-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <code className="text-sm font-mono text-gray-700 bg-gray-200 px-2 py-1 rounded whitespace-nowrap">
        {value}
      </code>
    </div>
  );

  const CategoryCell = ({
    value,
    rowIndex,
  }: {
    value: any;
    rowIndex: number;
  }) => (
    <div
      id={`course-category-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <span
        className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${
          CATEGORY_COLORS[value] || "bg-gray-500 text-white"
        }`}
      >
        {value}
      </span>
    </div>
  );

  const ModeCell = ({ value, rowIndex }: { value: any; rowIndex: number }) => (
    <div
      id={`course-mode-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <span
        className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap cursor-help ${
          MODE_COLORS[value] || "bg-gray-100 text-gray-800"
        }`}
        title={MODE_TOOLTIPS[value] || value}
      >
        {value}
      </span>
    </div>
  );

  const LanguageCell = ({
    value,
    rowIndex,
  }: {
    value: any;
    rowIndex: number;
  }) => (
    <div
      id={`course-language-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <span className="px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-blue-100 text-blue-800">
        {value}
      </span>
    </div>
  );

  const DurationCell = ({
    value,
    rowIndex,
  }: {
    value: any;
    rowIndex: number;
  }) => (
    <div
      id={`course-duration-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <div className="relative bg-yellow-100 px-2 py-1 rounded inline-block">
        <Clock className="absolute left-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-600 opacity-80" />
        <span className="text-sm font-medium text-gray-700 pl-4">{value}h</span>
      </div>
    </div>
  );

  const PriceCell = ({ value, rowIndex }: { value: any; rowIndex: number }) => (
    <div
      id={`course-price-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      {value === 0 ? (
        <span className="text-gray-700 font-medium text-sm bg-green-200 px-2 py-1 rounded whitespace-nowrap">
          Free
        </span>
      ) : (
        <div className="flex items-center text-gray-700 bg-pink-200 px-2 py-1 rounded">
          <DollarSign className="w-3 h-3 mr-1" />
          <span className="font-medium text-sm font-mono">
            {value.toLocaleString("en-US")}
          </span>
        </div>
      )}
    </div>
  );

  const NameCell = ({
    value,
    course,
    rowIndex,
  }: {
    value: any;
    course: Course;
    rowIndex: number;
  }) => (
    <div
      id={`course-name-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <div className="whitespace-nowrap overflow-hidden min-w-0">
        {course.STEP_ID ? (
          <a
            href={COURSE_URL.replace("<STEP_ID>", course.STEP_ID)}
            target="_blank"
            rel="noopener noreferrer"
            className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0"
            title={value}
          >
            <span className="truncate min-w-0">{value}</span>
            <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
          </a>
        ) : (
          <span
            className="font-medium text-gray-900 truncate block min-w-0"
            title={value}
          >
            {value}
          </span>
        )}
      </div>
    </div>
  );

  const PDFCell = ({
    course,
    rowIndex,
  }: {
    course: Course;
    rowIndex: number;
  }) => (
    <div
      id={`course-pdf-${rowIndex}`}
      className="h-12 flex items-center justify-center px-2"
    >
      {course.Alias ? (
        <a
          href={DETAILS_URL.replace("<COURSE_ALIAS>", course.Alias)}
          target="_blank"
          rel="noopener noreferrer"
          className="text-red-600 hover:text-red-800 transition-colors p-1 rounded hover:bg-red-50"
          title={`View PDF for ${course.Name || 'course'}`}
        >
          <FileText className="w-4 h-4" />
        </a>
      ) : (
        <span className="text-gray-400" title="PDF not available">
          <FileText className="w-4 h-4" />
        </span>
      )}
    </div>
  );

  const DefaultCell = ({
    value,
    rowIndex,
  }: {
    value: any;
    rowIndex: number;
  }) => (
    <div
      id={`course-field-${rowIndex}`}
      className="h-12 flex items-center justify-start px-2"
    >
      <span className="text-sm text-gray-700 truncate" title={String(value)}>
        {String(value)}
      </span>
    </div>
  );

  // Get cell component for column
  const getCellComponent = (
    columnKey: string,
    value: any,
    course: Course,
    rowIndex: number,
  ) => {
    const props = { value, course, rowIndex };

    switch (columnKey) {
      case "#":
        return <RowNumberCell rowIndex={rowIndex} />;
      case "ID":
        return <IdCell {...props} />;
      case "Category":
        return <CategoryCell {...props} />;
      case "Mode":
        return <ModeCell {...props} />;
      case "Language":
        return <LanguageCell {...props} />;
      case "Duration":
        return <DurationCell {...props} />;
      case "Price":
        return <PriceCell {...props} />;
      case "Name":
        return <NameCell {...props} />;
      case "PDF":
        return <PDFCell course={course} rowIndex={rowIndex} />;
      default:
        return <DefaultCell {...props} />;
    }
  };

  // Generate columns dynamically
  const createColumns = (courses: Course[]): ColumnDef<Course>[] => {
    if (courses.length === 0) return [];

    const allColumns: ColumnDef<Course>[] = [];

    // Add row number column first - using accessor with custom sortingFn for proper TanStack integration
    const rowNumSizes = COLUMN_SIZES["#"];
    allColumns.push(
      columnHelper.accessor(
        (row, index) => index + 1, // Accessor function that returns the row number
        {
          id: "#",
          header: ({ column }) => (
            <SortableHeader column={column}>
              <span className="text-xs">#</span>
            </SortableHeader>
          ),
          cell: (info) =>
            getCellComponent("#", info.getValue(), info.row.original, info.row.index),
          size: rowNumSizes.size,
          minSize: rowNumSizes.minSize,
          maxSize: rowNumSizes.maxSize,
          enableResizing: true,
          enableSorting: true,
          sortingFn: (rowA, rowB, columnId) => {
            // Custom sorting function for row numbers
            const valueA = rowA.index + 1;
            const valueB = rowB.index + 1;
            return valueA - valueB;
          },
          meta: {
            // Add metadata to help identify this as a row number column
            isRowNumber: true,
          },
        }
      ),
    );

    // Get all course property keys and filter out exceptions
    const sampleCourse = courses[0];
    const allKeys = Object.keys(sampleCourse).filter(
      (key) => !COLUMN_EXCEPTIONS.has(key),
    );

    // Separate ordered and other columns
    const orderedKeys = COLUMN_ORDER.filter((key) => allKeys.includes(key));
    const otherKeys = allKeys.filter((key) => !COLUMN_ORDER.includes(key));
    const finalKeys = [...orderedKeys, ...otherKeys];

    // Create data columns
    finalKeys.forEach((key) => {
      if (key === "PDF") {
        // Special handling for PDF column - using accessor with custom sortingFn
        const sizes = COLUMN_SIZES[key] || {
          size: DEFAULT_TABLE.COLUMN_WIDTH.SMALL,
          minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_SMALL,
          maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_SMALL,
        };

        allColumns.push(
          columnHelper.accessor(
            (row) => row.Alias || "", // Accessor function that returns the Alias for sorting
            {
              id: key,
              header: ({ column }) => (
                <SortableHeader column={column}>
                  <span className="text-xs">{key}</span>
                </SortableHeader>
              ),
              cell: (info) =>
                getCellComponent(
                  key,
                  info.getValue(),
                  info.row.original,
                  info.row.index,
                ),
              size: sizes.size,
              minSize: sizes.minSize,
              maxSize: sizes.maxSize,
              enableResizing: true,
              enableSorting: true,
              sortingFn: (rowA, rowB, columnId) => {
                // Custom sorting function for PDF column based on Alias availability
                const aliasA = rowA.original.Alias || "";
                const aliasB = rowB.original.Alias || "";
                return aliasA.localeCompare(aliasB);
              },
            }
          ),
        );
      } else {
        // Regular data columns
        const sizes = COLUMN_SIZES[key] || {
          size: DEFAULT_TABLE.COLUMN_WIDTH.LARGE,
          minSize: DEFAULT_TABLE.COLUMN_LIMITS.MIN_LARGE,
          maxSize: DEFAULT_TABLE.COLUMN_LIMITS.MAX_LARGE,
        };

        allColumns.push(
          columnHelper.accessor(key as keyof Course, {
            id: key,
            header: ({ column }) => (
              <SortableHeader column={column}>
                <span className="text-xs">{key}</span>
              </SortableHeader>
            ),
            cell: (info) =>
              getCellComponent(
                key,
                info.getValue(),
                info.row.original,
                info.row.index,
              ),
            size: sizes.size,
            minSize: sizes.minSize,
            maxSize: sizes.maxSize,
            enableResizing: true,
            enableSorting: true,
          }),
        );
      }
    });

    return allColumns;
  };

  return (
    <div id="catalog-table-container" className="h-full">
      <CatalogBase>
        {({ courses, isLoading, error, refetch }) => {
          // Create columns and table regardless of loading/error state to maintain hook consistency
          const columns = createColumns(courses || []);

          const table = useReactTable({
            data: courses || [],
            columns,
            getCoreRowModel: getCoreRowModel(),
            getSortedRowModel: getSortedRowModel(),
            // Use React Table's built-in state management instead of external Jotai
            initialState: {
              sorting: [],
            },
            columnResizeMode: "onChange" as ColumnResizeMode,
            enableColumnResizing: true,
            enableSorting: !isLoading && !error, // Disable sorting during loading/error
          });

          // Handle loading and error states after hooks are called
          if (isLoading || error) {
            return null; // CatalogBase handles loading and error states
          }

          return (
            <div id="catalog-table" className="h-full">
              <BaseTable
                table={table}
                onScroll={onScroll}
                headerClassName="bg-slate-800"
                rowHeight={48}
                emptyStateMessage="No courses available"
                loadingState={false}
              />
            </div>
          );
        }}
      </CatalogBase>
    </div>
  );
};

export default CatalogTable;