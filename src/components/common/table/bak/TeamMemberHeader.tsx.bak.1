import React from "react";
import { GripVertical, ArrowUpDown, Filter } from "lucide-react";

// Enhanced team member header component for Phase 3
export const TeamMemberHeader = React.memo<{
  column: any;
  member: any;
  index: number;
  totalMembers: number;
  managementHook: any;
  onMoveColumn?: (columnId: string, direction: "left" | "right") => void;
}>(({ column, member, index, totalMembers, managementHook, onMoveColumn }) => {
  const { handleDeleteTeamMember } = managementHook;
  const [showBinaryFilter, setShowBinaryFilter] = React.useState(false);

  // Handle team member name editing
  const handleEditName = () => {
    const newName = prompt("Enter new name:", member.name);
    if (newName && newName.trim() && newName.trim() !== member.name) {
      managementHook.handleUpdateTeamMember(index, newName.trim());
    }
  };

  // Handle team member deletion
  const handleDelete = () => {
    if (totalMembers <= 1) {
      alert("Cannot delete the last team member");
      return;
    }

    if (confirm(`Delete ${member.name} from the team?`)) {
      handleDeleteTeamMember(index);
    }
  };

  // Handle binary filter toggle (selected/not selected)
  const handleFilterToggle = () => {
    const currentFilter = column.getFilterValue();
    if (currentFilter === "selected") {
      column.setFilterValue(undefined); // Turn off filter
    } else {
      column.setFilterValue("selected"); // Show only selected
    }
  };

  // Handle sort toggle
  const handleSortToggle = () => {
    column.toggleSorting();
  };

  // Get current filter state
  const isFiltered = column.getFilterValue() === "selected";
  const sortDirection = column.getIsSorted();

  // Drag and drop handlers
  const handleDragStart = (e: React.DragEvent) => {
    e.stopPropagation();
    e.dataTransfer.setData("text/plain", column.id);
    e.dataTransfer.effectAllowed = "move";
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const draggedColumnId = e.dataTransfer.getData("text/plain");
    if (draggedColumnId && draggedColumnId !== column.id && onMoveColumn) {
      const rect = e.currentTarget.getBoundingClientRect();
      const dragX = e.clientX - rect.left;
      const isLeftDrop = dragX < rect.width / 2;
      onMoveColumn(draggedColumnId, isLeftDrop ? "left" : "right");
    }
  };

  return (
    <div 
      className="w-full h-full bg-gray-800"
      onDragOver={handleDragOver}
      onDrop={handleDrop}
    >
      {/* Row 1: Team member name */}
      <div className="flex items-center justify-between w-full text-sm font-bold h-8 px-3 text-white">
        <button
          onClick={handleEditName}
          className="flex-1 text-left truncate hover:bg-white/20 rounded px-1 py-0.5 transition-colors min-w-0"
          title={`Edit ${member.name}`}
        >
          <span className="truncate block">{member.name}</span>
        </button>
      </div>

      {/* Row 2: Controls */}
      <div className="flex items-center justify-between w-full h-6 px-2">
        <div className="flex items-center gap-1">
          {/* Drag handle */}
          {onMoveColumn && (
            <div
              className="cursor-grab hover:cursor-grab active:cursor-grabbing p-1 rounded opacity-60 hover:opacity-100 hover:text-orange-200 hover:bg-white/10 transition-all duration-200"
              title="Drag to reorder column"
              draggable={true}
              onDragStart={handleDragStart}
            >
              <GripVertical className="w-3 h-3" />
            </div>
          )}

          {/* Sort control */}
          <button
            onClick={handleSortToggle}
            className={`p-1 rounded opacity-60 hover:opacity-100 transition-all duration-200 hover:bg-white/10 ${
              sortDirection 
                ? "text-orange-200 opacity-100 bg-white/10" 
                : "hover:text-orange-200"
            }`}
            title={
              sortDirection === "asc" 
                ? "Sorted by selected (ascending)"
                : sortDirection === "desc"
                ? "Sorted by selected (descending)" 
                : "Sort by selection state"
            }
            type="button"
          >
            <ArrowUpDown className="w-3 h-3" />
          </button>

          {/* Binary filter toggle */}
          <button
            onClick={handleFilterToggle}
            className={`p-1 rounded opacity-60 hover:opacity-100 transition-all duration-200 hover:bg-white/10 ${
              isFiltered 
                ? "text-orange-200 opacity-100 bg-white/10" 
                : "hover:text-orange-200"
            }`}
            title={
              isFiltered 
                ? "Showing only selected courses - click to show all"
                : "Show only courses selected for this member"
            }
            type="button"
          >
            <Filter className="w-3 h-3" />
          </button>
        </div>

        {/* Delete button */}
        {totalMembers > 1 && (
          <button
            onClick={handleDelete}
            className="p-1 hover:bg-red-500/20 rounded transition-colors text-red-300 hover:text-red-200"
            title={`Delete ${member.name}`}
          >
            Ã—
          </button>
        )}
      </div>
    </div>
  );
});

TeamMemberHeader.displayName = "TeamMemberHeader";