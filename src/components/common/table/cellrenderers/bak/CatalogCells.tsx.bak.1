import React from "react";
import { Clock, DollarSign, ExternalLink, FileText } from "lucide-react";
import {
  COURSE_URL_TEMPLATE,
  CATEGORY_COLORS,
  MODE_COLORS,
  MODE_TOOLTIPS,
  DETAILS_URL_TEMPLATE,
  LANGUAGE_COLORS,
} from "@/utils/constants";

// Catalog-specific cell renderers for course data
export const IDCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <code className="text-sm font-mono bg-gray-200 px-3 py-1 rounded-full whitespace-nowrap text-gray-700">
      {String(getValue())}
    </code>
  </div>
);

export const CategoryCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <span
      className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap ${
        CATEGORY_COLORS[String(getValue())] || "bg-gray-500 text-white"
      }`}
    >
      {String(getValue())}
    </span>
  </div>
);

export const ModeCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <span
      className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap cursor-help ${
        MODE_COLORS[String(getValue())] || "bg-gray-100 text-gray-800"
      }`}
      title={MODE_TOOLTIPS[String(getValue())] || String(getValue())}
    >
      {String(getValue())}
    </span>
  </div>
);

// Language cell with color fix
export const LanguageCell = ({ getValue }: any) => {
  const language = String(getValue());
  
  // Debug logging
  console.log("Language value:", language, "Available colors:", LANGUAGE_COLORS);
  
  // Ensure we get the right color class
  let colorClass = LANGUAGE_COLORS[language];
  if (!colorClass) {
    console.warn(`No color found for language: "${language}". Using default.`);
    colorClass = LANGUAGE_COLORS.default;
  }
  
  // More specific CSS class mapping to avoid conflicts
  const specificColorClass = colorClass.includes('violet') ? 'language-violet' :
                            colorClass.includes('indigo') ? 'language-indigo' :
                            colorClass.includes('purple') ? 'language-purple' :
                            colorClass.includes('pink') ? 'language-pink' :
                            colorClass.includes('rose') ? 'language-rose' :
                            colorClass.includes('fuchsia') ? 'language-fuchsia' :
                            colorClass.includes('blue') ? 'language-blue' :
                            colorClass.includes('cyan') ? 'language-cyan' :
                            'language-default';
  
  return (
    <div className="h-12 flex items-center px-2 justify-start">
      <span 
        className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap ${specificColorClass}`}
        style={{
          // Fallback inline styles to override any CSS conflicts
          backgroundColor: language === 'English' ? '#ede9fe' :
                          language === 'Japanese' ? '#e0e7ff' :
                          language === 'Spanish' ? '#f3e8ff' :
                          language === 'Portuguese' ? '#fce7f3' :
                          language === 'French' ? '#fff1f2' :
                          language === 'German' ? '#fdf4ff' :
                          language === 'Chinese' ? '#dbeafe' :
                          language === 'Korean' ? '#cffafe' :
                          '#f1f5f9',
          color: language === 'English' ? '#5b21b6' :
                 language === 'Japanese' ? '#3730a3' :
                 language === 'Spanish' ? '#6b21a8' :
                 language === 'Portuguese' ? '#be185d' :
                 language === 'French' ? '#be123c' :
                 language === 'German' ? '#a21caf' :
                 language === 'Chinese' ? '#1d4ed8' :
                 language === 'Korean' ? '#0891b2' :
                 '#475569'
        }}
      >
        {language}
      </span>
    </div>
  );
};

export const DurationCell = ({ getValue }: any) => (
  <div className="h-12 flex items-center px-2 justify-start">
    <div className="bg-yellow-100 px-3 py-1 rounded-full inline-flex items-center">
      <Clock className="w-3 h-3 text-gray-600 opacity-80 mr-1" />
      <span className="text-sm font-medium text-gray-700">
        {String(getValue())}h
      </span>
    </div>
  </div>
);

export const PriceCell = ({ getValue }: any) => {
  const price = Number(getValue());
  return (
    <div className="h-12 flex items-center px-2 justify-start">
      {price === 0 ? (
        <span className="text-gray-700 font-medium text-sm bg-green-200 px-3 py-1 rounded-full whitespace-nowrap">
          Free
        </span>
      ) : (
        <div className="flex items-center text-gray-700 bg-pink-200 px-3 py-1 rounded-full">
          <DollarSign className="w-3 h-3 mr-1" />
          <span className="font-medium text-sm font-mono">
            {price.toLocaleString("en-US")}
          </span>
        </div>
      )}
    </div>
  );
};

export const NameCell = ({ getValue, row }: any) => {
  const course = row.original;
  return (
    <div className="h-12 flex items-center px-2 justify-start" style={{ minWidth: 0 }}>
      <div className="w-full min-w-0 overflow-hidden">
        {course.STEP_ID ? (
          <a
            href={COURSE_URL_TEMPLATE.replace("<STEP_ID>", course.STEP_ID)}
            target="_blank"
            rel="noopener noreferrer"
            className="text-orange-600 hover:text-orange-800 font-medium flex items-center gap-1 group min-w-0 w-full overflow-hidden text-base"
            title={String(getValue())}
          >
            <span className="truncate min-w-0 flex-1 overflow-hidden text-ellipsis whitespace-nowrap">
              {String(getValue())}
            </span>
            <ExternalLink className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
          </a>
        ) : (
          <span
            className="font-medium text-gray-900 truncate block min-w-0 w-full overflow-hidden text-ellipsis whitespace-nowrap text-base"
            title={String(getValue())}
          >
            {String(getValue())}
          </span>
        )}
      </div>
    </div>
  );
};

export const PDFCell = ({ getValue, row }: any) => {
  const course = row.original;
  return (
    <div className="h-12 flex items-center px-2 justify-center">
      {course.Alias ? (
        <a
          href={DETAILS_URL_TEMPLATE.replace("<COURSE_ALIAS>", course.Alias)}
          target="_blank"
          rel="noopener noreferrer"
          className="text-red-600 hover:text-red-800 transition-colors p-1 rounded hover:bg-red-50"
          title={`View PDF for ${course.Name || "course"}`}
        >
          <FileText className="w-4 h-4" />
        </a>
      ) : (
        <span className="text-gray-400" title="PDF not available">
          <FileText className="w-4 h-4" />
        </span>
      )}
    </div>
  );
};