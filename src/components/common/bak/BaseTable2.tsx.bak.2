import React from "react";
import {
  Table,
  flexRender,
  ColumnDef,
  Column,
  ColumnResizeMode,
} from "@tanstack/react-table";
import { ArrowUpDown, ArrowUp, ArrowDown } from "lucide-react";

// Cell renderer interfaces
export interface BasicCellRenderer<TData> {
  value: unknown;
  row: { original: TData; index: number };
  column: { id: string };
}

export interface CatalogCellRenderer<TData> extends BasicCellRenderer<TData> {
  // Additional props for catalog-specific cells
}

// Base column configuration interface
export interface BaseColumnConfig {
  size?: number;
  minSize?: number;
  maxSize?: number;
  enableSorting?: boolean;
  enableResizing?: boolean;
  enableHiding?: boolean;
}

// Native TanStack sortable header component - zero custom styles
export const NativeSortableHeader = <TData,>({
  column,
  children,
  className = "",
}: {
  column: Column<TData, unknown>;
  children: React.ReactNode;
  className?: string;
}) => {
  const canSort = column.getCanSort();
  const sortDirection = column.getIsSorted();

  return (
    <div
      className={`flex items-center gap-2 w-full text-sm font-semibold text-white ${
        canSort ? "cursor-pointer select-none hover:text-gray-200" : ""
      } ${className}`}
      onClick={() => canSort && column.toggleSorting()}
      role={canSort ? "button" : undefined}
      tabIndex={canSort ? 0 : undefined}
      aria-label={canSort ? `Sort by ${children}` : undefined}
      aria-sort={
        sortDirection === "asc"
          ? "ascending"
          : sortDirection === "desc"
            ? "descending"
            : canSort
              ? "none"
              : undefined
      }
      onKeyDown={(e) => {
        if (canSort && (e.key === "Enter" || e.key === " ")) {
          e.preventDefault();
          column.toggleSorting();
        }
      }}
    >
      <span className="truncate flex-1 min-w-0">{children}</span>
      {canSort && (
        <div className="flex-shrink-0">
          {sortDirection === "asc" ? (
            <ArrowUp className="w-4 h-4" />
          ) : sortDirection === "desc" ? (
            <ArrowDown className="w-4 h-4" />
          ) : (
            <ArrowUpDown className="w-4 h-4 opacity-50" />
          )}
        </div>
      )}
    </div>
  );
};

// Default cell renderer for basic display
export const DefaultCellRenderer = <TData,>({
  value,
  row,
  column,
  className = "",
}: BasicCellRenderer<TData> & { className?: string }) => {
  const cellId = `cell-${column.id}-${row.index}`;

  return (
    <div id={cellId} className={`flex items-center ${className}`}>
      <span
        className="truncate w-full"
        title={String(value || "")}
      >
        {String(value || "")}
      </span>
    </div>
  );
};

// Utility to create catalog columns with native TanStack patterns
export const createCatalogColumn = <TData,>(
  key: keyof TData | string,
  config: BaseColumnConfig & {
    header?: string;
    cell?: (props: CatalogCellRenderer<TData>) => React.ReactNode;
    headerClassName?: string;
    cellClassName?: string;
  } = {}
): ColumnDef<TData> => {
  return {
    id: String(key),
    accessorKey: key as keyof TData,
    header: ({ column }) => (
      <NativeSortableHeader column={column} className={config.headerClassName}>
        {config.header || String(key)}
      </NativeSortableHeader>
    ),
    cell: config.cell || (({ getValue, row, column }) => (
      <DefaultCellRenderer
        value={getValue()}
        row={row}
        column={column}
        className={config.cellClassName}
      />
    )),
    size: config.size || 150,
    minSize: config.minSize || 100,
    maxSize: config.maxSize || 300,
    enableResizing: config.enableResizing ?? true,
    enableSorting: config.enableSorting ?? true,
    enableHiding: config.enableHiding ?? true,
  };
};

// Row number column utility using native TanStack patterns
export const createRowNumberColumn = <TData,>(
  config: BaseColumnConfig & {
    headerClassName?: string;
    cellClassName?: string;
  } = {}
): ColumnDef<TData> => {
  return {
    id: "#",
    accessorFn: (_, index) => index + 1,
    header: ({ column }) => (
      <NativeSortableHeader column={column} className={config.headerClassName}>
        #
      </NativeSortableHeader>
    ),
    cell: ({ getValue, row }) => (
      <div
        id={`row-number-${row.index}`}
        className={`h-12 flex items-center justify-center ${config.cellClassName || ""}`}
      >
        <span className="font-mono font-medium text-gray-700">
          {getValue() as number}
        </span>
      </div>
    ),
    size: config.size || 60,
    minSize: config.minSize || 40,
    maxSize: config.maxSize || 80,
    enableResizing: config.enableResizing ?? true,
    enableSorting: config.enableSorting ?? true,
    enableHiding: config.enableHiding ?? false, // Row numbers usually stay visible
    meta: {
      isRowNumber: true,
    },
  };
};

// Forward ref interface for BaseTable2
export interface BaseTable2Ref {
  scrollToOffset: (offset: number) => void;
}

interface BaseTable2Props<TData> {
  table: Table<TData>;
  onScroll?: (scrollTop: number) => void;
  containerHeight?: number | string;
  headerClassName?: string;
  bodyClassName?: string;
  rowClassName?: string;
  cellClassName?: string;
  emptyStateMessage?: string;
  loadingState?: boolean;
  footerMessage?: string;
}

const BaseTable2 = React.forwardRef<BaseTable2Ref, BaseTable2Props<any>>(
  <TData,>(
    {
      table,
      onScroll,
      containerHeight = "100%",
      headerClassName = "",
      bodyClassName = "",
      rowClassName = "",
      cellClassName = "",
      emptyStateMessage = "No data available",
      loadingState = false,
      footerMessage,
    }: BaseTable2Props<TData>,
    ref: React.Ref<BaseTable2Ref>,
  ) => {
    const scrollRef = React.useRef<HTMLDivElement>(null);

    React.useImperativeHandle(ref, () => ({
      scrollToOffset: (offset: number) => {
        if (scrollRef.current) {
          scrollRef.current.scrollTop = offset;
        }
      },
    }));

    const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
      const newScrollTop = e.currentTarget.scrollTop;
      if (onScroll) {
        onScroll(newScrollTop);
      }
    };

    const rows = table.getRowModel().rows;
    const headerGroups = table.getHeaderGroups();
    const totalWidth = table.getTotalSize();

    const renderEmptyState = () => (
      <div className="flex items-center justify-center h-32">
        <p>{emptyStateMessage}</p>
      </div>
    );

    const renderLoadingState = () => (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-600"></div>
      </div>
    );

    return (
      <div
        className="flex flex-col h-full"
        style={{ height: containerHeight }}
      >
        {/* Native TanStack Sticky Header */}
        <div
          className={`sticky top-0 z-10 ${headerClassName}`}
          style={{ minWidth: totalWidth }}
        >
          {headerGroups.map((headerGroup) => (
            <div key={headerGroup.id} className="flex">
              {headerGroup.headers.map((header) => (
                <div
                  key={header.id}
                  className="relative"
                  style={{
                    width: header.getSize(),
                    minWidth: header.getSize(),
                  }}
                >
                  <div className="h-full flex items-center px-2 py-3">
                    {header.isPlaceholder ? null : (
                      flexRender(
                        header.column.columnDef.header,
                        header.getContext(),
                      )
                    )}
                  </div>
                  
                  {/* Native TanStack Resizer */}
                  {header.column.getCanResize() && (
                    <div
                      className="absolute right-0 top-0 h-full w-1 cursor-col-resize opacity-0 hover:opacity-100"
                      onMouseDown={header.getResizeHandler()}
                      onTouchStart={header.getResizeHandler()}
                      role="separator"
                      aria-label="Resize column"
                      tabIndex={0}
                    />
                  )}
                </div>
              ))}
            </div>
          ))}
        </div>

        {/* Scrollable Body */}
        <div className="flex-1 overflow-auto">
          <div
            ref={scrollRef}
            className={`${bodyClassName}`}
            style={{ minWidth: totalWidth }}
            onScroll={handleScroll}
            role="grid"
            aria-label="Data table"
            aria-rowcount={rows.length}
            aria-colcount={table.getAllColumns().length}
          >
            {loadingState
              ? renderLoadingState()
              : rows.length === 0
                ? renderEmptyState()
                : rows.map((row, rowIndex) => (
                    <div
                      key={row.id}
                      className={`flex ${rowClassName}`}
                      role="row"
                      aria-rowindex={rowIndex + 2}
                    >
                      {row.getVisibleCells().map((cell, cellIndex) => (
                        <div
                          key={cell.id}
                          className={`overflow-hidden ${cellClassName}`}
                          style={{
                            width: cell.column.getSize(),
                            minWidth: cell.column.getSize(),
                          }}
                          role="gridcell"
                          aria-colindex={cellIndex + 1}
                        >
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext(),
                          )}
                        </div>
                      ))}
                    </div>
                  ))}
          </div>
        </div>

        {/* Optional Footer */}
        {footerMessage && (
          <div className="flex-shrink-0 px-4 py-2 bg-gray-100 border-t border-gray-200">
            <span 
              className="text-gray-700 text-sm"
              dangerouslySetInnerHTML={{
                __html: footerMessage
                  .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
              }}
            />
          </div>
        )}
      </div>
    );
  },
);

BaseTable2.displayName = "BaseTable2";

export default BaseTable2;