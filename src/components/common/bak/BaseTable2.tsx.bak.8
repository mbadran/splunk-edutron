import React from "react";
import {
  Table,
  flexRender,
  ColumnDef,
  Column,
  ColumnResizeMode,
} from "@tanstack/react-table";
import { ArrowUpDown, ArrowUp, ArrowDown, Filter, GripVertical } from "lucide-react";

// Simplified cell renderer interface
export interface CellRenderer<TData> {
  value: unknown;
  row: { original: TData; index: number };
  column: { id: string };
}

// Base column configuration interface
export interface BaseColumnConfig {
  size?: number;
  minSize?: number;
  maxSize?: number;
  enableSorting?: boolean;
  enableResizing?: boolean;
  enableColumnFilter?: boolean;
}

// Native TanStack header with two-row layout
export const NativeSortableHeader = <TData,>({
  column,
  children,
  className = "",
  showMoveHandle = false,
  onMoveColumn,
}: {
  column: Column<TData, unknown>;
  children: React.ReactNode;
  className?: string;
  showMoveHandle?: boolean;
  onMoveColumn?: (columnId: string, direction: 'left' | 'right') => void;
}) => {
  const canSort = column.getCanSort();
  const sortDirection = column.getIsSorted();
  const canFilter = column.getCanFilter();
  const filterValue = column.getFilterValue();
  const hasFilter = filterValue !== undefined && filterValue !== "";
  const isSorted = sortDirection !== false;
  
  const [showFilterInput, setShowFilterInput] = React.useState(false);
  const [inputValue, setInputValue] = React.useState((filterValue ?? "") as string);

  // Sync input value with filter value when filter changes externally
  React.useEffect(() => {
    setInputValue((filterValue ?? "") as string);
  }, [filterValue]);

  // Handle filter input changes with debouncing
  const handleFilterChange = React.useCallback((value: string) => {
    setInputValue(value);
    column.setFilterValue(value || undefined);
  }, [column]);

  // Determine header text color based on active states
  const getHeaderTextColor = () => {
    if (hasFilter || isSorted) return "text-orange-400";
    return "text-white";
  };

  return (
    <div className={`w-full ${className}`}>
      {/* Row 1: Column Title with dynamic text color */}
      <div className={`flex items-center justify-center w-full text-sm font-semibold h-8 ${getHeaderTextColor()}`}>
        <span className="truncate">{children}</span>
      </div>

      {/* Row 2: Controls OR Filter Input */}
      <div className="flex items-center justify-center w-full h-6">
        {showFilterInput && canFilter ? (
          /* Filter Input Row (replaces controls) */
          <input
            type="text"
            value={inputValue}
            onChange={(e) => {
              e.stopPropagation();
              handleFilterChange(e.target.value);
            }}
            onBlur={() => setShowFilterInput(false)}
            onKeyDown={(e) => {
              e.stopPropagation();
              if (e.key === 'Escape') {
                setShowFilterInput(false);
              }
              if (e.key === 'Enter') {
                setShowFilterInput(false);
              }
            }}
            placeholder={`Filter ${children}...`}
            className="w-full mx-1 px-2 py-1 text-xs text-white bg-transparent border-2 border-orange-500 rounded outline-none"
            autoFocus
          />
        ) : (
          /* Controls Row */
          <div className="flex items-center gap-1">
            {/* Move Handle */}
            {showMoveHandle && onMoveColumn && (
              <div
                className="cursor-grab hover:cursor-grab active:cursor-grabbing opacity-50 hover:opacity-100"
                title="Drag to reorder column"
                draggable={true}
                onDragStart={(e) => {
                  e.stopPropagation();
                  e.dataTransfer.setData('text/plain', column.id);
                  e.dataTransfer.effectAllowed = 'move';
                }}
                onDragOver={(e) => {
                  e.preventDefault();
                  e.dataTransfer.dropEffect = 'move';
                }}
                onDrop={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  const draggedColumnId = e.dataTransfer.getData('text/plain');
                  if (draggedColumnId && draggedColumnId !== column.id) {
                    // Determine direction based on drag position
                    const rect = e.currentTarget.getBoundingClientRect();
                    const dragX = e.clientX - rect.left;
                    const isLeftDrop = dragX < rect.width / 2;
                    onMoveColumn(draggedColumnId, isLeftDrop ? 'left' : 'right');
                  }
                }}
              >
                <GripVertical className="w-3 h-3" />
              </div>
            )}

            {/* Sort Button */}
            {canSort && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  column.toggleSorting();
                }}
                className={`opacity-50 hover:opacity-100 transition-opacity ${
                  isSorted ? "text-orange-400" : ""
                }`}
                title={`Sort by ${children}`}
                type="button"
              >
                {sortDirection === "asc" ? (
                  <ArrowUp className="w-3 h-3" />
                ) : sortDirection === "desc" ? (
                  <ArrowDown className="w-3 h-3" />
                ) : (
                  <ArrowUpDown className="w-3 h-3" />
                )}
              </button>
            )}

            {/* Filter Toggle */}
            {canFilter && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setShowFilterInput(true);
                }}
                className={`opacity-50 hover:opacity-100 transition-opacity ${
                  hasFilter ? "text-orange-400" : ""
                }`}
                title="Toggle filter"
                type="button"
              >
                <Filter className="w-3 h-3" />
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

// Default cell renderer for basic display
export const DefaultCellRenderer = <TData,>({
  value,
  row,
  column,
  className = "",
}: CellRenderer<TData> & { className?: string }) => {
  const cellId = `cell-${column.id}-${row.index}`;

  return (
    <div id={cellId} className={`flex items-center ${className}`}>
      <span
        className="truncate w-full"
        title={String(value || "")}
      >
        {String(value || "")}
      </span>
    </div>
  );
};

// Utility to create catalog columns with native TanStack patterns
export const createCatalogColumn = <TData,>(
  key: keyof TData | string,
  config: BaseColumnConfig & {
    header?: string;
    cell?: (props: CellRenderer<TData>) => React.ReactNode;
    headerClassName?: string;
    cellClassName?: string;
    showMoveHandle?: boolean;
    onMoveColumn?: (columnId: string, direction: 'left' | 'right') => void;
  } = {}
): ColumnDef<TData> => {
  return {
    id: String(key),
    accessorKey: key as keyof TData,
    header: ({ column }) => (
      <NativeSortableHeader 
        column={column} 
        className={config.headerClassName}
        showMoveHandle={config.showMoveHandle}
        onMoveColumn={config.onMoveColumn}
      >
        {config.header || String(key)}
      </NativeSortableHeader>
    ),
    cell: config.cell || (({ getValue, row, column }) => (
      <DefaultCellRenderer
        value={getValue()}
        row={row}
        column={column}
        className={config.cellClassName}
      />
    )),
    size: config.size || 150,
    minSize: config.minSize || 100,
    maxSize: config.maxSize || 300,
    enableResizing: config.enableResizing ?? true,
    enableSorting: config.enableSorting ?? true,
    enableColumnFilter: config.enableColumnFilter ?? true,
  };
};

// Row number column utility using native TanStack patterns
export const createRowNumberColumn = <TData,>(
  config: BaseColumnConfig & {
    headerClassName?: string;
    cellClassName?: string;
    showMoveHandle?: boolean;
    onMoveColumn?: (columnId: string, direction: 'left' | 'right') => void;
  } = {}
): ColumnDef<TData> => {
  return {
    id: "#",
    accessorFn: (_, index) => index + 1,
    header: ({ column }) => (
      <NativeSortableHeader 
        column={column} 
        className={config.headerClassName}
        showMoveHandle={config.showMoveHandle}
        onMoveColumn={config.onMoveColumn}
      >
        #
      </NativeSortableHeader>
    ),
    cell: ({ getValue, row }) => (
      <div
        id={`row-number-${row.index}`}
        className={`h-12 flex items-center justify-center ${config.cellClassName || ""}`}
      >
        <span className="font-mono text-sm text-gray-700">
          {getValue() as number}
        </span>
      </div>
    ),
    size: config.size || 60,
    minSize: config.minSize || 40,
    maxSize: config.maxSize || 80,
    enableResizing: config.enableResizing ?? true,
    enableSorting: config.enableSorting ?? true,
    enableColumnFilter: false, // Row numbers don't need filtering
    meta: {
      isRowNumber: true,
    },
  };
};

// Forward ref interface for BaseTable2
export interface BaseTable2Ref {
  scrollToTop: () => void;
}

interface BaseTable2Props<TData> {
  table: Table<TData>;
  onScroll?: (scrollTop: number) => void;
  containerHeight?: number | string;
  headerClassName?: string;
  bodyClassName?: string;
  rowClassName?: string;
  cellClassName?: string;
  emptyStateMessage?: string;
  loadingState?: boolean;
  footerMessage?: string;
}

const BaseTable2 = React.forwardRef<BaseTable2Ref, BaseTable2Props<any>>(
  <TData,>(
    {
      table,
      onScroll,
      containerHeight = "100%",
      headerClassName = "",
      bodyClassName = "",
      rowClassName = "",
      cellClassName = "",
      emptyStateMessage = "No data available",
      loadingState = false,
      footerMessage,
    }: BaseTable2Props<TData>,
    ref: React.Ref<BaseTable2Ref>,
  ) => {
    const scrollRef = React.useRef<HTMLDivElement>(null);

    React.useImperativeHandle(ref, () => ({
      scrollToTop: () => {
        if (scrollRef.current) {
          scrollRef.current.scrollTop = 0;
        }
      },
    }));

    const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
      const newScrollTop = e.currentTarget.scrollTop;
      if (onScroll) {
        onScroll(newScrollTop);
      }
    };

    const rows = table.getRowModel().rows;
    const headerGroups = table.getHeaderGroups();
    const totalWidth = table.getTotalSize();

    const renderEmptyState = () => (
      <div className="flex items-center justify-center h-32">
        <p>{emptyStateMessage}</p>
      </div>
    );

    const renderLoadingState = () => (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-600"></div>
      </div>
    );

    return (
      <div
        className="flex flex-col h-full"
        style={{ height: containerHeight }}
      >
        {/* Regular Header (NO sticky CSS) */}
        <div
          className={`${headerClassName}`}
          style={{ minWidth: totalWidth }}
        >
          {headerGroups.map((headerGroup) => (
            <div key={headerGroup.id} className="flex">
              {headerGroup.headers.map((header) => (
                <div
                  key={header.id}
                  className="relative"
                  style={{
                    width: header.getSize(),
                    minWidth: header.getSize(),
                  }}
                >
                  <div className="h-20 flex items-center px-3 py-2">
                    {header.isPlaceholder ? null : (
                      flexRender(
                        header.column.columnDef.header,
                        header.getContext(),
                      )
                    )}
                  </div>
                  
                  {/* Native TanStack Resizer */}
                  {header.column.getCanResize() && (
                    <div
                      className="absolute right-0 top-0 h-full w-1 cursor-col-resize bg-gray-400 opacity-0 hover:opacity-100 transition-opacity"
                      onMouseDown={header.getResizeHandler()}
                      onTouchStart={header.getResizeHandler()}
                      role="separator"
                      aria-label="Resize column"
                      tabIndex={0}
                    />
                  )}
                </div>
              ))}
            </div>
          ))}
        </div>

        {/* Scrollable Body */}
        <div className="flex-1 overflow-auto">
          <div
            ref={scrollRef}
            className={`${bodyClassName}`}
            style={{ minWidth: totalWidth }}
            onScroll={handleScroll}
            role="grid"
            aria-label="Data table"
            aria-rowcount={rows.length}
            aria-colcount={table.getAllColumns().length}
          >
            {loadingState
              ? renderLoadingState()
              : rows.length === 0
                ? renderEmptyState()
                : rows.map((row, rowIndex) => (
                    <div
                      key={row.id}
                      className={`flex ${rowClassName}`}
                      role="row"
                      aria-rowindex={rowIndex + 2}
                    >
                      {row.getVisibleCells().map((cell, cellIndex) => (
                        <div
                          key={cell.id}
                          className={`overflow-hidden ${cellClassName}`}
                          style={{
                            width: cell.column.getSize(),
                            minWidth: cell.column.getSize(),
                          }}
                          role="gridcell"
                          aria-colindex={cellIndex + 1}
                        >
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext(),
                          )}
                        </div>
                      ))}
                    </div>
                  ))}
          </div>
        </div>

        {/* Optional Footer */}
        {footerMessage && (
          <div className="flex-shrink-0 px-4 py-2 bg-gray-100 border-t border-gray-200">
            <span 
              className="text-gray-700 text-sm"
              dangerouslySetInnerHTML={{
                __html: footerMessage
                  .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
              }}
            />
          </div>
        )}
      </div>
    );
  },
);

BaseTable2.displayName = "BaseTable2";

export default BaseTable2;