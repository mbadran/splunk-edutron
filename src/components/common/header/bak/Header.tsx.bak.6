import React, { lazy, Suspense } from "react";
import { useAtom } from "jotai";
import { Home, Menu, X } from "lucide-react";
import { NAV_ROUTES } from "@/lib/routes";
import Breadcrumbs from "./Breadcrumbs";
import Title from "./Title";
import Notes from "./Notes";
import {
  planStateAtom,
  updateTitleAtom,
  updateNotesAtom,
} from "@/atoms/globalAtoms";

// Conditional imports for planner-specific components
const PlanActions = lazy(() => import("@/components/PlanActions"));
const PlanCalculator = lazy(() => import("@/components/PlanCalculator"));

// Conditional import for catalog-specific components
const CatalogActions = lazy(() => import("@/components/CatalogActions"));

interface HeaderProps {
  onBackToHome: () => void;
  pageTitle: string;
  onUpdateTitle?: (title: string) => void;
  total?: number;
  onBudgetChange?: (budget: number | null) => void;
  currentRoute?: string;
  onNavigate?: (route: string) => void;
}

const Header: React.FC<HeaderProps> = ({
  onBackToHome,
  pageTitle,
  onUpdateTitle,
  total,
  onBudgetChange,
  currentRoute = "",
  onNavigate,
}) => {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);
  
  // Get plan state for planner-specific features
  const [planState] = useAtom(planStateAtom);
  const [, updateTitle] = useAtom(updateTitleAtom);
  const [, updateNotes] = useAtom(updateNotesAtom);

  // Route detection
  const isPlannerRoute =
    currentRoute.includes("/planner") ||
    (typeof window !== "undefined" &&
      window.location.pathname.includes("/planner"));
      
  const isCatalogCoursesRoute =
    currentRoute.includes("/catalogs/") && currentRoute.includes("/courses") ||
    (typeof window !== "undefined" &&
      window.location.pathname.includes("/catalogs/") &&
      window.location.pathname.includes("/courses"));

  const showPlanActions = isPlannerRoute;
  const showCatalogActions = isCatalogCoursesRoute;
  const showCalculator = isPlannerRoute && total !== undefined && onBudgetChange;
  const showPlanId = isPlannerRoute;
  const showPlanNotes = isPlannerRoute;

  // Handle title updates
  const handleTitleUpdate = (newTitle: string) => {
    if (isPlannerRoute) {
      updateTitle(newTitle);
    } else if (onUpdateTitle) {
      onUpdateTitle(newTitle);
    }
  };

  // Helper function to determine if a route is active
  const isRouteActive = (navRoute: string, current: string): boolean => {
    if (navRoute === current) return true;
    if (navRoute === "/" && current === "/") return true;
    if (navRoute !== "/" && current.startsWith(navRoute + "/")) return true;
    return false;
  };

  const handleNavigation = (route: string) => {
    if (route === "/") {
      onBackToHome();
    } else if (onNavigate) {
      onNavigate(route);
    }
    setIsMenuOpen(false);
  };

  return (
    <div
      id="app-header"
      className="bg-gradient-to-br from-slate-800 via-slate-700 to-blue-900 shadow-lg border-b-2 border-orange-500 sticky top-0 z-20"
    >
      <div className="px-4 sm:px-6 py-4">
        {/* CSS Grid Layout: 3 rows x 4 columns (combined breadcrumbs + title) */}
        <div className="grid grid-cols-[auto_auto_1fr_auto] grid-rows-[auto_minmax(0,auto)_auto] gap-4 debug-border-parent" style={{ border: '2px solid yellow' }}>
          
          {/* Row 1, Col 1: Menu */}
          <div className="debug-border-child" style={{ border: '2px solid red' }}>
            <div className="relative">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="flex items-center justify-center w-10 h-10 bg-white text-black rounded-full hover:bg-gray-100 transition-all shadow-lg"
                aria-label="Navigation menu"
              >
                {isMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
              </button>

              {isMenuOpen && (
                <div className="absolute top-12 left-0 bg-gradient-to-br from-slate-800 via-slate-700 to-blue-900 rounded-lg shadow-xl border border-orange-500 py-2 min-w-[150px] z-30">
                  {NAV_ROUTES.map((navRoute) => (
                    <button
                      key={navRoute.route}
                      onClick={() => handleNavigation(navRoute.route)}
                      className={`w-full text-left px-4 py-2 hover:bg-white/10 transition-colors font-bold text-white ${
                        isRouteActive(navRoute.route, currentRoute)
                          ? "bg-orange-500/20 border-l-4 border-orange-500"
                          : ""
                      }`}
                    >
                      {navRoute.label}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Row 1, Col 2: Home Button */}
          <div className="debug-border-child" style={{ border: '2px solid red' }}>
            <button
              onClick={onBackToHome}
              className="flex items-center gap-3 px-4 py-2 bg-gradient-to-r from-orange-500 to-pink-500 text-white rounded-lg hover:from-orange-600 hover:to-pink-600 transition-all font-medium shadow-lg"
            >
              <Home className="w-4 h-4" />
              <strong>Splunk EDUTRON</strong>
            </button>
          </div>

          {/* Row 1, Col 3: Breadcrumbs + Title Combined */}
          <div className="debug-border-child flex items-center gap-4" style={{ border: '2px solid red' }}>
            <Breadcrumbs currentRoute={currentRoute} onNavigate={onNavigate} />
            <Title
              title={isPlannerRoute ? planState.title : pageTitle}
              onUpdate={handleTitleUpdate}
              currentRoute={currentRoute}
            />
          </div>

          {/* Row 1, Col 4: Calculator (planner only) */}
          {showCalculator ? (
            <div className="debug-border-child" style={{ border: '2px solid red' }}>
              <Suspense fallback={<div className="w-32 h-12 bg-gray-200 animate-pulse rounded"></div>}>
                <PlanCalculator total={total} onBudgetChange={onBudgetChange} />
              </Suspense>
            </div>
          ) : (
            <div></div>
          )}

          {/* Row 2, Col 1: Empty */}
          <div></div>

          {/* Row 2, Col 2: Plan ID (planner only) */}
          {showPlanId ? (
            <div className="debug-border-child py-1" style={{ border: '2px solid red' }}>
              <div className="text-md font-normal text-orange-400">
                ({planState.id})
              </div>
            </div>
          ) : (
            <div className="h-5"></div>
          )}

          {/* Row 2, Col 3: Notes (planner only) */}
          {showPlanNotes ? (
            <div className="debug-border-child py-1" style={{ border: '2px solid red' }}>
              <Notes
                notes={planState.notes || ""}
                onUpdate={updateNotes}
                placeholder="Notes..."
                isEditable={true}
              />
            </div>
          ) : (
            <div className="h-5"></div>
          )}

          {/* Row 2, Col 4: Empty */}
          <div></div>

          {/* Row 3, Col 1-2: Empty */}
          <div></div>
          <div></div>

          {/* Row 3, Col 3: Actions */}
          {(showPlanActions || showCatalogActions) ? (
            <div className="debug-border-child py-1" style={{ border: '2px solid red' }}>
              {showPlanActions && (
                <Suspense fallback={<div className="w-32 h-8 bg-gray-200 animate-pulse rounded"></div>}>
                  <PlanActions />
                </Suspense>
              )}
              {showCatalogActions && (
                <Suspense fallback={<div className="w-32 h-8 bg-gray-200 animate-pulse rounded"></div>}>
                  <CatalogActions />
                </Suspense>
              )}
            </div>
          ) : (
            <div className="h-5"></div>
          )}

          {/* Row 3, Col 4: Empty */}
          <div></div>
        </div>
      </div>

      {/* Overlay to close menu when clicking outside */}
      {isMenuOpen && (
        <div
          className="fixed inset-0 z-10"
          onClick={() => setIsMenuOpen(false)}
          aria-hidden="true"
        />
      )}
    </div>
  );
};

export default Header;